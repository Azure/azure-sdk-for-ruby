# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Microsoft.SoftwarePlan
  #
  # Azure software plans let users create and manage licenses for various
  # software used in Azure.
  #
  class HybridUseBenefit
    include MsRestAzure

    #
    # Creates and initializes a new instance of the HybridUseBenefit class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [softwareplanClient] reference to the softwareplanClient
    attr_reader :client

    #
    # Get all hybrid use benefits associated with an ARM resource.
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param filter [String] Supports applying filter on the type of SKU
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<HybridUseBenefitModel>] operation results.
    #
    def list(scope, filter:nil, custom_headers:nil)
      first_page = list_as_lazy(scope, filter:filter, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Get all hybrid use benefits associated with an ARM resource.
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param filter [String] Supports applying filter on the type of SKU
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(scope, filter:nil, custom_headers:nil)
      list_async(scope, filter:filter, custom_headers:custom_headers).value!
    end

    #
    # Get all hybrid use benefits associated with an ARM resource.
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param filter [String] Supports applying filter on the type of SKU
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(scope, filter:nil, custom_headers:nil)
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'scope' => scope},
          query_params: {'api-version' => @client.api_version,'$filter' => filter},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Microsoft.SoftwarePlan::Models::HybridUseBenefitListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create a new hybrid use benefit under a given scope
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param body [HybridUseBenefitModel] Request body for creating a hybrid use
    # benefit
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HybridUseBenefitModel] operation results.
    #
    def create(scope, plan_id, body, custom_headers:nil)
      response = create_async(scope, plan_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create a new hybrid use benefit under a given scope
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param body [HybridUseBenefitModel] Request body for creating a hybrid use
    # benefit
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_with_http_info(scope, plan_id, body, custom_headers:nil)
      create_async(scope, plan_id, body, custom_headers:custom_headers).value!
    end

    #
    # Create a new hybrid use benefit under a given scope
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param body [HybridUseBenefitModel] Request body for creating a hybrid use
    # benefit
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_async(scope, plan_id, body, custom_headers:nil)
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, 'plan_id is nil' if plan_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Microsoft.SoftwarePlan::Models::HybridUseBenefitModel.mapper()
      request_content = @client.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'scope' => scope,'planId' => plan_id},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Microsoft.SoftwarePlan::Models::HybridUseBenefitModel.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates an existing hybrid use benefit
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param body [HybridUseBenefitModel] Request body for creating a hybrid use
    # benefit
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HybridUseBenefitModel] operation results.
    #
    def update(scope, plan_id, body, custom_headers:nil)
      response = update_async(scope, plan_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates an existing hybrid use benefit
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param body [HybridUseBenefitModel] Request body for creating a hybrid use
    # benefit
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_with_http_info(scope, plan_id, body, custom_headers:nil)
      update_async(scope, plan_id, body, custom_headers:custom_headers).value!
    end

    #
    # Updates an existing hybrid use benefit
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param body [HybridUseBenefitModel] Request body for creating a hybrid use
    # benefit
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_async(scope, plan_id, body, custom_headers:nil)
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, 'plan_id is nil' if plan_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Microsoft.SoftwarePlan::Models::HybridUseBenefitModel.mapper()
      request_content = @client.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'scope' => scope,'planId' => plan_id},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Microsoft.SoftwarePlan::Models::HybridUseBenefitModel.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets a given plan ID
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HybridUseBenefitModel] operation results.
    #
    def get(scope, plan_id, custom_headers:nil)
      response = get_async(scope, plan_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets a given plan ID
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(scope, plan_id, custom_headers:nil)
      get_async(scope, plan_id, custom_headers:custom_headers).value!
    end

    #
    # Gets a given plan ID
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(scope, plan_id, custom_headers:nil)
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, 'plan_id is nil' if plan_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'scope' => scope,'planId' => plan_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Microsoft.SoftwarePlan::Models::HybridUseBenefitModel.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a given plan ID
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete(scope, plan_id, custom_headers:nil)
      response = delete_async(scope, plan_id, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes a given plan ID
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(scope, plan_id, custom_headers:nil)
      delete_async(scope, plan_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a given plan ID
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param plan_id [String] This is a unique identifier for a plan. Should be a
    # guid.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(scope, plan_id, custom_headers:nil)
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, 'plan_id is nil' if plan_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'scope' => scope,'planId' => plan_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Get all hybrid use benefits associated with an ARM resource.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HybridUseBenefitListResult] operation results.
    #
    def list_next(next_page_link, custom_headers:nil)
      response = list_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get all hybrid use benefits associated with an ARM resource.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers:nil)
      list_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Get all hybrid use benefits associated with an ARM resource.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Microsoft.SoftwarePlan::Models::HybridUseBenefitListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get all hybrid use benefits associated with an ARM resource.
    #
    # @param scope [String] The scope at which the operation is performed. This is
    # limited to Microsoft.Compute/virtualMachines and
    # Microsoft.Compute/hostGroups/hosts for now
    # @param filter [String] Supports applying filter on the type of SKU
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HybridUseBenefitListResult] which provide lazy access to pages of
    # the response.
    #
    def list_as_lazy(scope, filter:nil, custom_headers:nil)
      response = list_async(scope, filter:filter, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
