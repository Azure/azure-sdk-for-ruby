# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::CognitiveServices::LuisAuthoring::V3_0_preview
  #
  # Model
  #
  class Model
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Model class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [LuisAuthoringClient] reference to the LuisAuthoringClient
    attr_reader :client

    #
    # Adds an intent to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_create_object [ModelCreateObject] A model object containing the
    # name of the new intent.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def add_intent(app_id, version_id, intent_create_object, custom_headers:nil)
      response = add_intent_async(app_id, version_id, intent_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds an intent to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_create_object [ModelCreateObject] A model object containing the
    # name of the new intent.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_intent_with_http_info(app_id, version_id, intent_create_object, custom_headers:nil)
      add_intent_async(app_id, version_id, intent_create_object, custom_headers:custom_headers).value!
    end

    #
    # Adds an intent to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_create_object [ModelCreateObject] A model object containing the
    # name of the new intent.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_intent_async(app_id, version_id, intent_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'intent_create_object is nil' if intent_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ModelCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  intent_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/intents'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about the intent models in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_intents(app_id, version_id, skip:0, take:100, custom_headers:nil)
      response = list_intents_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about the intent models in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_intents_with_http_info(app_id, version_id, skip:0, take:100, custom_headers:nil)
      list_intents_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
    end

    #
    # Gets information about the intent models in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_intents_async(app_id, version_id, skip:0, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, "'skip' should satisfy the constraint - 'InclusiveMinimum': '0'" if !skip.nil? && skip < 0
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/intents'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          query_params: {'skip' => skip,'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'IntentClassifierElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'IntentClassifier'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds an entity extractor to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_model_create_object [EntityModelCreateObject] A model object
    # containing the name of the new entity extractor and its children.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def add_entity(app_id, version_id, entity_model_create_object, custom_headers:nil)
      response = add_entity_async(app_id, version_id, entity_model_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds an entity extractor to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_model_create_object [EntityModelCreateObject] A model object
    # containing the name of the new entity extractor and its children.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_entity_with_http_info(app_id, version_id, entity_model_create_object, custom_headers:nil)
      add_entity_async(app_id, version_id, entity_model_create_object, custom_headers:custom_headers).value!
    end

    #
    # Adds an entity extractor to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_model_create_object [EntityModelCreateObject] A model object
    # containing the name of the new entity extractor and its children.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_entity_async(app_id, version_id, entity_model_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_model_create_object is nil' if entity_model_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityModelCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_model_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/entities'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about all the simple entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_entities(app_id, version_id, skip:0, take:100, custom_headers:nil)
      response = list_entities_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about all the simple entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_entities_with_http_info(app_id, version_id, skip:0, take:100, custom_headers:nil)
      list_entities_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
    end

    #
    # Gets information about all the simple entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_entities_async(app_id, version_id, skip:0, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, "'skip' should satisfy the constraint - 'InclusiveMinimum': '0'" if !skip.nil? && skip < 0
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/entities'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          query_params: {'skip' => skip,'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'NDepthEntityExtractorElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'NDepthEntityExtractor'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about all the hierarchical entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_hierarchical_entities(app_id, version_id, skip:0, take:100, custom_headers:nil)
      response = list_hierarchical_entities_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about all the hierarchical entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_hierarchical_entities_with_http_info(app_id, version_id, skip:0, take:100, custom_headers:nil)
      list_hierarchical_entities_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
    end

    #
    # Gets information about all the hierarchical entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_hierarchical_entities_async(app_id, version_id, skip:0, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, "'skip' should satisfy the constraint - 'InclusiveMinimum': '0'" if !skip.nil? && skip < 0
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          query_params: {'skip' => skip,'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'HierarchicalEntityExtractorElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'HierarchicalEntityExtractor'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about all the composite entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_composite_entities(app_id, version_id, skip:0, take:100, custom_headers:nil)
      response = list_composite_entities_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about all the composite entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_composite_entities_with_http_info(app_id, version_id, skip:0, take:100, custom_headers:nil)
      list_composite_entities_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
    end

    #
    # Gets information about all the composite entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_composite_entities_async(app_id, version_id, skip:0, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, "'skip' should satisfy the constraint - 'InclusiveMinimum': '0'" if !skip.nil? && skip < 0
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/compositeentities'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          query_params: {'skip' => skip,'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'CompositeEntityExtractorElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'CompositeEntityExtractor'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about all the list entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_closed_lists(app_id, version_id, skip:0, take:100, custom_headers:nil)
      response = list_closed_lists_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about all the list entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_closed_lists_with_http_info(app_id, version_id, skip:0, take:100, custom_headers:nil)
      list_closed_lists_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
    end

    #
    # Gets information about all the list entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_closed_lists_async(app_id, version_id, skip:0, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, "'skip' should satisfy the constraint - 'InclusiveMinimum': '0'" if !skip.nil? && skip < 0
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/closedlists'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          query_params: {'skip' => skip,'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'ClosedListEntityExtractorElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'ClosedListEntityExtractor'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a list entity model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param closed_list_model_create_object [ClosedListModelCreateObject] A model
    # containing the name and words for the new list entity extractor.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def add_closed_list(app_id, version_id, closed_list_model_create_object, custom_headers:nil)
      response = add_closed_list_async(app_id, version_id, closed_list_model_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a list entity model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param closed_list_model_create_object [ClosedListModelCreateObject] A model
    # containing the name and words for the new list entity extractor.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_closed_list_with_http_info(app_id, version_id, closed_list_model_create_object, custom_headers:nil)
      add_closed_list_async(app_id, version_id, closed_list_model_create_object, custom_headers:custom_headers).value!
    end

    #
    # Adds a list entity model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param closed_list_model_create_object [ClosedListModelCreateObject] A model
    # containing the name and words for the new list entity extractor.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_closed_list_async(app_id, version_id, closed_list_model_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'closed_list_model_create_object is nil' if closed_list_model_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ClosedListModelCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  closed_list_model_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/closedlists'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a list of prebuilt entities to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_extractor_names [Array<String>] An array of prebuilt entity
    # extractor names.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def add_prebuilt(app_id, version_id, prebuilt_extractor_names, custom_headers:nil)
      response = add_prebuilt_async(app_id, version_id, prebuilt_extractor_names, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a list of prebuilt entities to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_extractor_names [Array<String>] An array of prebuilt entity
    # extractor names.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_prebuilt_with_http_info(app_id, version_id, prebuilt_extractor_names, custom_headers:nil)
      add_prebuilt_async(app_id, version_id, prebuilt_extractor_names, custom_headers:custom_headers).value!
    end

    #
    # Adds a list of prebuilt entities to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_extractor_names [Array<String>] An array of prebuilt entity
    # extractor names.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_prebuilt_async(app_id, version_id, prebuilt_extractor_names, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'prebuilt_extractor_names is nil' if prebuilt_extractor_names.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = {
        client_side_validation: true,
        required: true,
        serialized_name: 'prebuiltExtractorNames',
        type: {
          name: 'Sequence',
          element: {
              client_side_validation: true,
              required: false,
              serialized_name: 'StringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  prebuilt_extractor_names)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/prebuilts'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'PrebuiltEntityExtractorElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'PrebuiltEntityExtractor'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about all the prebuilt entities in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_prebuilts(app_id, version_id, skip:0, take:100, custom_headers:nil)
      response = list_prebuilts_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about all the prebuilt entities in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_prebuilts_with_http_info(app_id, version_id, skip:0, take:100, custom_headers:nil)
      list_prebuilts_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
    end

    #
    # Gets information about all the prebuilt entities in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_prebuilts_async(app_id, version_id, skip:0, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, "'skip' should satisfy the constraint - 'InclusiveMinimum': '0'" if !skip.nil? && skip < 0
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/prebuilts'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          query_params: {'skip' => skip,'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'PrebuiltEntityExtractorElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'PrebuiltEntityExtractor'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets all the available prebuilt entities in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_prebuilt_entities(app_id, version_id, custom_headers:nil)
      response = list_prebuilt_entities_async(app_id, version_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all the available prebuilt entities in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_prebuilt_entities_with_http_info(app_id, version_id, custom_headers:nil)
      list_prebuilt_entities_async(app_id, version_id, custom_headers:custom_headers).value!
    end

    #
    # Gets all the available prebuilt entities in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_prebuilt_entities_async(app_id, version_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/listprebuilts'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'AvailablePrebuiltEntityModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'AvailablePrebuiltEntityModel'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about all the intent and entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_models(app_id, version_id, skip:0, take:100, custom_headers:nil)
      response = list_models_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about all the intent and entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_models_with_http_info(app_id, version_id, skip:0, take:100, custom_headers:nil)
      list_models_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
    end

    #
    # Gets information about all the intent and entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_models_async(app_id, version_id, skip:0, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, "'skip' should satisfy the constraint - 'InclusiveMinimum': '0'" if !skip.nil? && skip < 0
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/models'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          query_params: {'skip' => skip,'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'ModelInfoResponseElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'ModelInfoResponse'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the example utterances for the given intent or entity model in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param model_id [String] The ID (GUID) of the model.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def examples_method(app_id, version_id, model_id, skip:0, take:100, custom_headers:nil)
      response = examples_method_async(app_id, version_id, model_id, skip:skip, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the example utterances for the given intent or entity model in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param model_id [String] The ID (GUID) of the model.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def examples_method_with_http_info(app_id, version_id, model_id, skip:0, take:100, custom_headers:nil)
      examples_method_async(app_id, version_id, model_id, skip:skip, take:take, custom_headers:custom_headers).value!
    end

    #
    # Gets the example utterances for the given intent or entity model in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param model_id [String] The ID (GUID) of the model.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def examples_method_async(app_id, version_id, model_id, skip:0, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'model_id is nil' if model_id.nil?
      fail ArgumentError, "'skip' should satisfy the constraint - 'InclusiveMinimum': '0'" if !skip.nil? && skip < 0
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/models/{modelId}/examples'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'modelId' => model_id},
          query_params: {'skip' => skip,'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'LabelTextObjectElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'LabelTextObject'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about the intent model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [IntentClassifier] operation results.
    #
    def get_intent(app_id, version_id, intent_id, custom_headers:nil)
      response = get_intent_async(app_id, version_id, intent_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about the intent model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_intent_with_http_info(app_id, version_id, intent_id, custom_headers:nil)
      get_intent_async(app_id, version_id, intent_id, custom_headers:custom_headers).value!
    end

    #
    # Gets information about the intent model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_intent_async(app_id, version_id, intent_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'intent_id is nil' if intent_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/intents/{intentId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'intentId' => intent_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::IntentClassifier.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the name of an intent in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param model_update_object [ModelUpdateObject] A model object containing the
    # new intent name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_intent(app_id, version_id, intent_id, model_update_object, custom_headers:nil)
      response = update_intent_async(app_id, version_id, intent_id, model_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates the name of an intent in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param model_update_object [ModelUpdateObject] A model object containing the
    # new intent name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_intent_with_http_info(app_id, version_id, intent_id, model_update_object, custom_headers:nil)
      update_intent_async(app_id, version_id, intent_id, model_update_object, custom_headers:custom_headers).value!
    end

    #
    # Updates the name of an intent in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param model_update_object [ModelUpdateObject] A model object containing the
    # new intent name.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_intent_async(app_id, version_id, intent_id, model_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'intent_id is nil' if intent_id.nil?
      fail ArgumentError, 'model_update_object is nil' if model_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ModelUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  model_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/intents/{intentId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'intentId' => intent_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes an intent from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param delete_utterances [Boolean] If true, deletes the intent's example
    # utterances. If false, moves the example utterances to the None intent. The
    # default value is false.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_intent(app_id, version_id, intent_id, delete_utterances:false, custom_headers:nil)
      response = delete_intent_async(app_id, version_id, intent_id, delete_utterances:delete_utterances, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes an intent from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param delete_utterances [Boolean] If true, deletes the intent's example
    # utterances. If false, moves the example utterances to the None intent. The
    # default value is false.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_intent_with_http_info(app_id, version_id, intent_id, delete_utterances:false, custom_headers:nil)
      delete_intent_async(app_id, version_id, intent_id, delete_utterances:delete_utterances, custom_headers:custom_headers).value!
    end

    #
    # Deletes an intent from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param delete_utterances [Boolean] If true, deletes the intent's example
    # utterances. If false, moves the example utterances to the None intent. The
    # default value is false.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_intent_async(app_id, version_id, intent_id, delete_utterances:false, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'intent_id is nil' if intent_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/intents/{intentId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'intentId' => intent_id},
          query_params: {'deleteUtterances' => delete_utterances},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about an entity model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [NDepthEntityExtractor] operation results.
    #
    def get_entity(app_id, version_id, entity_id, custom_headers:nil)
      response = get_entity_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about an entity model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_entity_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      get_entity_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Gets information about an entity model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_entity_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::NDepthEntityExtractor.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes an entity or a child from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor or the child entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_entity(app_id, version_id, entity_id, custom_headers:nil)
      response = delete_entity_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes an entity or a child from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor or the child entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_entity_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      delete_entity_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes an entity or a child from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor or the child entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_entity_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the name of an entity extractor or the name and instanceOf model of a
    # child entity extractor.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor or the child entity extractor ID.
    # @param entity_model_update_object [EntityModelUpdateObject] A model object
    # containing the name new entity extractor or the name and instance of model of
    # a child entity extractor
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_entity_child(app_id, version_id, entity_id, entity_model_update_object, custom_headers:nil)
      response = update_entity_child_async(app_id, version_id, entity_id, entity_model_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates the name of an entity extractor or the name and instanceOf model of a
    # child entity extractor.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor or the child entity extractor ID.
    # @param entity_model_update_object [EntityModelUpdateObject] A model object
    # containing the name new entity extractor or the name and instance of model of
    # a child entity extractor
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_entity_child_with_http_info(app_id, version_id, entity_id, entity_model_update_object, custom_headers:nil)
      update_entity_child_async(app_id, version_id, entity_id, entity_model_update_object, custom_headers:custom_headers).value!
    end

    #
    # Updates the name of an entity extractor or the name and instanceOf model of a
    # child entity extractor.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor or the child entity extractor ID.
    # @param entity_model_update_object [EntityModelUpdateObject] A model object
    # containing the name new entity extractor or the name and instance of model of
    # a child entity extractor
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_entity_child_async(app_id, version_id, entity_id, entity_model_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'entity_model_update_object is nil' if entity_model_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityModelUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_model_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the information of the features used by the intent in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_intent_features(app_id, version_id, intent_id, custom_headers:nil)
      response = get_intent_features_async(app_id, version_id, intent_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the information of the features used by the intent in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_intent_features_with_http_info(app_id, version_id, intent_id, custom_headers:nil)
      get_intent_features_async(app_id, version_id, intent_id, custom_headers:custom_headers).value!
    end

    #
    # Gets the information of the features used by the intent in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_intent_features_async(app_id, version_id, intent_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'intent_id is nil' if intent_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/intents/{intentId}/features'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'intentId' => intent_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'ModelFeatureInformationElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'ModelFeatureInformation'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the information of the features used by the intent in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param feature_relations_update_object [Array<ModelFeatureInformation>] A
    # list of feature information objects containing the new feature relations.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def replace_intent_features(app_id, version_id, intent_id, feature_relations_update_object, custom_headers:nil)
      response = replace_intent_features_async(app_id, version_id, intent_id, feature_relations_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates the information of the features used by the intent in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param feature_relations_update_object [Array<ModelFeatureInformation>] A
    # list of feature information objects containing the new feature relations.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def replace_intent_features_with_http_info(app_id, version_id, intent_id, feature_relations_update_object, custom_headers:nil)
      replace_intent_features_async(app_id, version_id, intent_id, feature_relations_update_object, custom_headers:custom_headers).value!
    end

    #
    # Updates the information of the features used by the intent in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param feature_relations_update_object [Array<ModelFeatureInformation>] A
    # list of feature information objects containing the new feature relations.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def replace_intent_features_async(app_id, version_id, intent_id, feature_relations_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'intent_id is nil' if intent_id.nil?
      fail ArgumentError, 'feature_relations_update_object is nil' if feature_relations_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = {
        client_side_validation: true,
        required: true,
        serialized_name: 'featureRelationsUpdateObject',
        type: {
          name: 'Sequence',
          element: {
              client_side_validation: true,
              required: false,
              serialized_name: 'ModelFeatureInformationElementType',
              type: {
                name: 'Composite',
                class_name: 'ModelFeatureInformation'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  feature_relations_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/intents/{intentId}/features'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'intentId' => intent_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a relation from the feature relations used by the intent in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param feature_relation_delete_object [ModelFeatureInformation] A feature
    # information object containing the feature relation to delete.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_intent_feature(app_id, version_id, intent_id, feature_relation_delete_object, custom_headers:nil)
      response = delete_intent_feature_async(app_id, version_id, intent_id, feature_relation_delete_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a relation from the feature relations used by the intent in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param feature_relation_delete_object [ModelFeatureInformation] A feature
    # information object containing the feature relation to delete.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_intent_feature_with_http_info(app_id, version_id, intent_id, feature_relation_delete_object, custom_headers:nil)
      delete_intent_feature_async(app_id, version_id, intent_id, feature_relation_delete_object, custom_headers:custom_headers).value!
    end

    #
    # Deletes a relation from the feature relations used by the intent in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param feature_relation_delete_object [ModelFeatureInformation] A feature
    # information object containing the feature relation to delete.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_intent_feature_async(app_id, version_id, intent_id, feature_relation_delete_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'intent_id is nil' if intent_id.nil?
      fail ArgumentError, 'feature_relation_delete_object is nil' if feature_relation_delete_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ModelFeatureInformation.mapper()
      request_content = @client.serialize(request_mapper,  feature_relation_delete_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/intents/{intentId}/features'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'intentId' => intent_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the information of the features used by the entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_entity_features(app_id, version_id, entity_id, custom_headers:nil)
      response = get_entity_features_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the information of the features used by the entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_entity_features_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      get_entity_features_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Gets the information of the features used by the entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_entity_features_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}/features'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'ModelFeatureInformationElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'ModelFeatureInformation'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the information of the features used by the entity in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param feature_relations_update_object [Array<ModelFeatureInformation>] A
    # list of feature information objects containing the new feature relations.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def replace_entity_features(app_id, version_id, entity_id, feature_relations_update_object, custom_headers:nil)
      response = replace_entity_features_async(app_id, version_id, entity_id, feature_relations_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates the information of the features used by the entity in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param feature_relations_update_object [Array<ModelFeatureInformation>] A
    # list of feature information objects containing the new feature relations.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def replace_entity_features_with_http_info(app_id, version_id, entity_id, feature_relations_update_object, custom_headers:nil)
      replace_entity_features_async(app_id, version_id, entity_id, feature_relations_update_object, custom_headers:custom_headers).value!
    end

    #
    # Updates the information of the features used by the entity in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param feature_relations_update_object [Array<ModelFeatureInformation>] A
    # list of feature information objects containing the new feature relations.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def replace_entity_features_async(app_id, version_id, entity_id, feature_relations_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'feature_relations_update_object is nil' if feature_relations_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = {
        client_side_validation: true,
        required: true,
        serialized_name: 'featureRelationsUpdateObject',
        type: {
          name: 'Sequence',
          element: {
              client_side_validation: true,
              required: false,
              serialized_name: 'ModelFeatureInformationElementType',
              type: {
                name: 'Composite',
                class_name: 'ModelFeatureInformation'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  feature_relations_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}/features'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a relation from the feature relations used by the entity in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param feature_relation_delete_object [ModelFeatureInformation] A feature
    # information object containing the feature relation to delete.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_entity_feature(app_id, version_id, entity_id, feature_relation_delete_object, custom_headers:nil)
      response = delete_entity_feature_async(app_id, version_id, entity_id, feature_relation_delete_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a relation from the feature relations used by the entity in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param feature_relation_delete_object [ModelFeatureInformation] A feature
    # information object containing the feature relation to delete.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_entity_feature_with_http_info(app_id, version_id, entity_id, feature_relation_delete_object, custom_headers:nil)
      delete_entity_feature_async(app_id, version_id, entity_id, feature_relation_delete_object, custom_headers:custom_headers).value!
    end

    #
    # Deletes a relation from the feature relations used by the entity in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param feature_relation_delete_object [ModelFeatureInformation] A feature
    # information object containing the feature relation to delete.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_entity_feature_async(app_id, version_id, entity_id, feature_relation_delete_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'feature_relation_delete_object is nil' if feature_relation_delete_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ModelFeatureInformation.mapper()
      request_content = @client.serialize(request_mapper,  feature_relation_delete_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}/features'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about a hierarchical entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HierarchicalEntityExtractor] operation results.
    #
    def get_hierarchical_entity(app_id, version_id, h_entity_id, custom_headers:nil)
      response = get_hierarchical_entity_async(app_id, version_id, h_entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about a hierarchical entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_hierarchical_entity_with_http_info(app_id, version_id, h_entity_id, custom_headers:nil)
      get_hierarchical_entity_async(app_id, version_id, h_entity_id, custom_headers:custom_headers).value!
    end

    #
    # Gets information about a hierarchical entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_hierarchical_entity_async(app_id, version_id, h_entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::HierarchicalEntityExtractor.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the name of a hierarchical entity model in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param model_update_object [ModelUpdateObject] Model containing names of the
    # hierarchical entity.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_hierarchical_entity(app_id, version_id, h_entity_id, model_update_object, custom_headers:nil)
      response = update_hierarchical_entity_async(app_id, version_id, h_entity_id, model_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates the name of a hierarchical entity model in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param model_update_object [ModelUpdateObject] Model containing names of the
    # hierarchical entity.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_hierarchical_entity_with_http_info(app_id, version_id, h_entity_id, model_update_object, custom_headers:nil)
      update_hierarchical_entity_async(app_id, version_id, h_entity_id, model_update_object, custom_headers:custom_headers).value!
    end

    #
    # Updates the name of a hierarchical entity model in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param model_update_object [ModelUpdateObject] Model containing names of the
    # hierarchical entity.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_hierarchical_entity_async(app_id, version_id, h_entity_id, model_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?
      fail ArgumentError, 'model_update_object is nil' if model_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ModelUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  model_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a hierarchical entity from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_hierarchical_entity(app_id, version_id, h_entity_id, custom_headers:nil)
      response = delete_hierarchical_entity_async(app_id, version_id, h_entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a hierarchical entity from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_hierarchical_entity_with_http_info(app_id, version_id, h_entity_id, custom_headers:nil)
      delete_hierarchical_entity_async(app_id, version_id, h_entity_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a hierarchical entity from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_hierarchical_entity_async(app_id, version_id, h_entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about a composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CompositeEntityExtractor] operation results.
    #
    def get_composite_entity(app_id, version_id, c_entity_id, custom_headers:nil)
      response = get_composite_entity_async(app_id, version_id, c_entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about a composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_composite_entity_with_http_info(app_id, version_id, c_entity_id, custom_headers:nil)
      get_composite_entity_async(app_id, version_id, c_entity_id, custom_headers:custom_headers).value!
    end

    #
    # Gets information about a composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_composite_entity_async(app_id, version_id, c_entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'c_entity_id is nil' if c_entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'cEntityId' => c_entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::CompositeEntityExtractor.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates a composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param composite_model_update_object [CompositeEntityModel] A model object
    # containing the new entity extractor name and children.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_composite_entity(app_id, version_id, c_entity_id, composite_model_update_object, custom_headers:nil)
      response = update_composite_entity_async(app_id, version_id, c_entity_id, composite_model_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates a composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param composite_model_update_object [CompositeEntityModel] A model object
    # containing the new entity extractor name and children.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_composite_entity_with_http_info(app_id, version_id, c_entity_id, composite_model_update_object, custom_headers:nil)
      update_composite_entity_async(app_id, version_id, c_entity_id, composite_model_update_object, custom_headers:custom_headers).value!
    end

    #
    # Updates a composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param composite_model_update_object [CompositeEntityModel] A model object
    # containing the new entity extractor name and children.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_composite_entity_async(app_id, version_id, c_entity_id, composite_model_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'c_entity_id is nil' if c_entity_id.nil?
      fail ArgumentError, 'composite_model_update_object is nil' if composite_model_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::CompositeEntityModel.mapper()
      request_content = @client.serialize(request_mapper,  composite_model_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'cEntityId' => c_entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a composite entity from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_composite_entity(app_id, version_id, c_entity_id, custom_headers:nil)
      response = delete_composite_entity_async(app_id, version_id, c_entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a composite entity from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_composite_entity_with_http_info(app_id, version_id, c_entity_id, custom_headers:nil)
      delete_composite_entity_async(app_id, version_id, c_entity_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a composite entity from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_composite_entity_async(app_id, version_id, c_entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'c_entity_id is nil' if c_entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'cEntityId' => c_entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about a list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list model ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ClosedListEntityExtractor] operation results.
    #
    def get_closed_list(app_id, version_id, cl_entity_id, custom_headers:nil)
      response = get_closed_list_async(app_id, version_id, cl_entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about a list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list model ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_closed_list_with_http_info(app_id, version_id, cl_entity_id, custom_headers:nil)
      get_closed_list_async(app_id, version_id, cl_entity_id, custom_headers:custom_headers).value!
    end

    #
    # Gets information about a list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list model ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_closed_list_async(app_id, version_id, cl_entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'cl_entity_id is nil' if cl_entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{clEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'clEntityId' => cl_entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ClosedListEntityExtractor.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list model ID.
    # @param closed_list_model_update_object [ClosedListModelUpdateObject] The new
    # list entity name and words list.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_closed_list(app_id, version_id, cl_entity_id, closed_list_model_update_object, custom_headers:nil)
      response = update_closed_list_async(app_id, version_id, cl_entity_id, closed_list_model_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates the list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list model ID.
    # @param closed_list_model_update_object [ClosedListModelUpdateObject] The new
    # list entity name and words list.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_closed_list_with_http_info(app_id, version_id, cl_entity_id, closed_list_model_update_object, custom_headers:nil)
      update_closed_list_async(app_id, version_id, cl_entity_id, closed_list_model_update_object, custom_headers:custom_headers).value!
    end

    #
    # Updates the list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list model ID.
    # @param closed_list_model_update_object [ClosedListModelUpdateObject] The new
    # list entity name and words list.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_closed_list_async(app_id, version_id, cl_entity_id, closed_list_model_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'cl_entity_id is nil' if cl_entity_id.nil?
      fail ArgumentError, 'closed_list_model_update_object is nil' if closed_list_model_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ClosedListModelUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  closed_list_model_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{clEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'clEntityId' => cl_entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a batch of sublists to an existing list entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity model ID.
    # @param closed_list_model_patch_object [ClosedListModelPatchObject] A words
    # list batch.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def patch_closed_list(app_id, version_id, cl_entity_id, closed_list_model_patch_object, custom_headers:nil)
      response = patch_closed_list_async(app_id, version_id, cl_entity_id, closed_list_model_patch_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a batch of sublists to an existing list entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity model ID.
    # @param closed_list_model_patch_object [ClosedListModelPatchObject] A words
    # list batch.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def patch_closed_list_with_http_info(app_id, version_id, cl_entity_id, closed_list_model_patch_object, custom_headers:nil)
      patch_closed_list_async(app_id, version_id, cl_entity_id, closed_list_model_patch_object, custom_headers:custom_headers).value!
    end

    #
    # Adds a batch of sublists to an existing list entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity model ID.
    # @param closed_list_model_patch_object [ClosedListModelPatchObject] A words
    # list batch.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch_closed_list_async(app_id, version_id, cl_entity_id, closed_list_model_patch_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'cl_entity_id is nil' if cl_entity_id.nil?
      fail ArgumentError, 'closed_list_model_patch_object is nil' if closed_list_model_patch_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ClosedListModelPatchObject.mapper()
      request_content = @client.serialize(request_mapper,  closed_list_model_patch_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{clEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'clEntityId' => cl_entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a list entity model from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity model ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_closed_list(app_id, version_id, cl_entity_id, custom_headers:nil)
      response = delete_closed_list_async(app_id, version_id, cl_entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a list entity model from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity model ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_closed_list_with_http_info(app_id, version_id, cl_entity_id, custom_headers:nil)
      delete_closed_list_async(app_id, version_id, cl_entity_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a list entity model from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity model ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_closed_list_async(app_id, version_id, cl_entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'cl_entity_id is nil' if cl_entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{clEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'clEntityId' => cl_entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about a prebuilt entity model in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_id The prebuilt entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PrebuiltEntityExtractor] operation results.
    #
    def get_prebuilt(app_id, version_id, prebuilt_id, custom_headers:nil)
      response = get_prebuilt_async(app_id, version_id, prebuilt_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about a prebuilt entity model in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_id The prebuilt entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_prebuilt_with_http_info(app_id, version_id, prebuilt_id, custom_headers:nil)
      get_prebuilt_async(app_id, version_id, prebuilt_id, custom_headers:custom_headers).value!
    end

    #
    # Gets information about a prebuilt entity model in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_id The prebuilt entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_prebuilt_async(app_id, version_id, prebuilt_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'prebuilt_id is nil' if prebuilt_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'prebuiltId' => prebuilt_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::PrebuiltEntityExtractor.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a prebuilt entity extractor from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_id The prebuilt entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_prebuilt(app_id, version_id, prebuilt_id, custom_headers:nil)
      response = delete_prebuilt_async(app_id, version_id, prebuilt_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a prebuilt entity extractor from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_id The prebuilt entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_prebuilt_with_http_info(app_id, version_id, prebuilt_id, custom_headers:nil)
      delete_prebuilt_async(app_id, version_id, prebuilt_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a prebuilt entity extractor from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_id The prebuilt entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_prebuilt_async(app_id, version_id, prebuilt_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'prebuilt_id is nil' if prebuilt_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'prebuiltId' => prebuilt_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a sublist of a specific list entity model from a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity extractor ID.
    # @param sub_list_id [Integer] The sublist ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_sub_list(app_id, version_id, cl_entity_id, sub_list_id, custom_headers:nil)
      response = delete_sub_list_async(app_id, version_id, cl_entity_id, sub_list_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a sublist of a specific list entity model from a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity extractor ID.
    # @param sub_list_id [Integer] The sublist ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_sub_list_with_http_info(app_id, version_id, cl_entity_id, sub_list_id, custom_headers:nil)
      delete_sub_list_async(app_id, version_id, cl_entity_id, sub_list_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a sublist of a specific list entity model from a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity extractor ID.
    # @param sub_list_id [Integer] The sublist ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_sub_list_async(app_id, version_id, cl_entity_id, sub_list_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'cl_entity_id is nil' if cl_entity_id.nil?
      fail ArgumentError, 'sub_list_id is nil' if sub_list_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'clEntityId' => cl_entity_id,'subListId' => sub_list_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates one of the list entity's sublists in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity extractor ID.
    # @param sub_list_id [Integer] The sublist ID.
    # @param word_list_base_update_object [WordListBaseUpdateObject] A sublist
    # update object containing the new canonical form and the list of words.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_sub_list(app_id, version_id, cl_entity_id, sub_list_id, word_list_base_update_object, custom_headers:nil)
      response = update_sub_list_async(app_id, version_id, cl_entity_id, sub_list_id, word_list_base_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates one of the list entity's sublists in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity extractor ID.
    # @param sub_list_id [Integer] The sublist ID.
    # @param word_list_base_update_object [WordListBaseUpdateObject] A sublist
    # update object containing the new canonical form and the list of words.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_sub_list_with_http_info(app_id, version_id, cl_entity_id, sub_list_id, word_list_base_update_object, custom_headers:nil)
      update_sub_list_async(app_id, version_id, cl_entity_id, sub_list_id, word_list_base_update_object, custom_headers:custom_headers).value!
    end

    #
    # Updates one of the list entity's sublists in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity extractor ID.
    # @param sub_list_id [Integer] The sublist ID.
    # @param word_list_base_update_object [WordListBaseUpdateObject] A sublist
    # update object containing the new canonical form and the list of words.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_sub_list_async(app_id, version_id, cl_entity_id, sub_list_id, word_list_base_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'cl_entity_id is nil' if cl_entity_id.nil?
      fail ArgumentError, 'sub_list_id is nil' if sub_list_id.nil?
      fail ArgumentError, 'word_list_base_update_object is nil' if word_list_base_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::WordListBaseUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  word_list_base_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'clEntityId' => cl_entity_id,'subListId' => sub_list_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Suggests example utterances that would improve the accuracy of the intent
    # model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_intent_suggestions(app_id, version_id, intent_id, take:100, custom_headers:nil)
      response = list_intent_suggestions_async(app_id, version_id, intent_id, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Suggests example utterances that would improve the accuracy of the intent
    # model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_intent_suggestions_with_http_info(app_id, version_id, intent_id, take:100, custom_headers:nil)
      list_intent_suggestions_async(app_id, version_id, intent_id, take:take, custom_headers:custom_headers).value!
    end

    #
    # Suggests example utterances that would improve the accuracy of the intent
    # model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param intent_id The intent classifier ID.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_intent_suggestions_async(app_id, version_id, intent_id, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'intent_id is nil' if intent_id.nil?
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/intents/{intentId}/suggest'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'intentId' => intent_id},
          query_params: {'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'IntentsSuggestionExampleElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'IntentsSuggestionExample'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get suggested example utterances that would improve the accuracy of the
    # entity model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The target entity extractor model to enhance.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_entity_suggestions(app_id, version_id, entity_id, take:100, custom_headers:nil)
      response = list_entity_suggestions_async(app_id, version_id, entity_id, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get suggested example utterances that would improve the accuracy of the
    # entity model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The target entity extractor model to enhance.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_entity_suggestions_with_http_info(app_id, version_id, entity_id, take:100, custom_headers:nil)
      list_entity_suggestions_async(app_id, version_id, entity_id, take:take, custom_headers:custom_headers).value!
    end

    #
    # Get suggested example utterances that would improve the accuracy of the
    # entity model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The target entity extractor model to enhance.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_entity_suggestions_async(app_id, version_id, entity_id, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}/suggest'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          query_params: {'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'EntitiesSuggestionExampleElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'EntitiesSuggestionExample'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a sublist to an existing list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity extractor ID.
    # @param word_list_create_object [WordListObject] Words list.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Bignum] operation results.
    #
    def add_sub_list(app_id, version_id, cl_entity_id, word_list_create_object, custom_headers:nil)
      response = add_sub_list_async(app_id, version_id, cl_entity_id, word_list_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a sublist to an existing list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity extractor ID.
    # @param word_list_create_object [WordListObject] Words list.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_sub_list_with_http_info(app_id, version_id, cl_entity_id, word_list_create_object, custom_headers:nil)
      add_sub_list_async(app_id, version_id, cl_entity_id, word_list_create_object, custom_headers:custom_headers).value!
    end

    #
    # Adds a sublist to an existing list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param cl_entity_id The list entity extractor ID.
    # @param word_list_create_object [WordListObject] Words list.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_sub_list_async(app_id, version_id, cl_entity_id, word_list_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'cl_entity_id is nil' if cl_entity_id.nil?
      fail ArgumentError, 'word_list_create_object is nil' if word_list_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::WordListObject.mapper()
      request_content = @client.serialize(request_mapper,  word_list_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'clEntityId' => cl_entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Number'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a customizable prebuilt domain along with all of its intent and entity
    # models in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_domain_object [PrebuiltDomainCreateBaseObject] A prebuilt
    # domain create object containing the name of the domain.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def add_custom_prebuilt_domain(app_id, version_id, prebuilt_domain_object, custom_headers:nil)
      response = add_custom_prebuilt_domain_async(app_id, version_id, prebuilt_domain_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a customizable prebuilt domain along with all of its intent and entity
    # models in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_domain_object [PrebuiltDomainCreateBaseObject] A prebuilt
    # domain create object containing the name of the domain.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_custom_prebuilt_domain_with_http_info(app_id, version_id, prebuilt_domain_object, custom_headers:nil)
      add_custom_prebuilt_domain_async(app_id, version_id, prebuilt_domain_object, custom_headers:custom_headers).value!
    end

    #
    # Adds a customizable prebuilt domain along with all of its intent and entity
    # models in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_domain_object [PrebuiltDomainCreateBaseObject] A prebuilt
    # domain create object containing the name of the domain.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_custom_prebuilt_domain_async(app_id, version_id, prebuilt_domain_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'prebuilt_domain_object is nil' if prebuilt_domain_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::PrebuiltDomainCreateBaseObject.mapper()
      request_content = @client.serialize(request_mapper,  prebuilt_domain_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltdomains'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'UuidElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a customizable prebuilt intent model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_domain_model_create_object [PrebuiltDomainModelCreateObject]
    # A model object containing the name of the customizable prebuilt intent and
    # the name of the domain to which this model belongs.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def add_custom_prebuilt_intent(app_id, version_id, prebuilt_domain_model_create_object, custom_headers:nil)
      response = add_custom_prebuilt_intent_async(app_id, version_id, prebuilt_domain_model_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a customizable prebuilt intent model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_domain_model_create_object [PrebuiltDomainModelCreateObject]
    # A model object containing the name of the customizable prebuilt intent and
    # the name of the domain to which this model belongs.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_custom_prebuilt_intent_with_http_info(app_id, version_id, prebuilt_domain_model_create_object, custom_headers:nil)
      add_custom_prebuilt_intent_async(app_id, version_id, prebuilt_domain_model_create_object, custom_headers:custom_headers).value!
    end

    #
    # Adds a customizable prebuilt intent model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_domain_model_create_object [PrebuiltDomainModelCreateObject]
    # A model object containing the name of the customizable prebuilt intent and
    # the name of the domain to which this model belongs.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_custom_prebuilt_intent_async(app_id, version_id, prebuilt_domain_model_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'prebuilt_domain_model_create_object is nil' if prebuilt_domain_model_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::PrebuiltDomainModelCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  prebuilt_domain_model_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltintents'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about customizable prebuilt intents added to a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_custom_prebuilt_intents(app_id, version_id, custom_headers:nil)
      response = list_custom_prebuilt_intents_async(app_id, version_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about customizable prebuilt intents added to a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_custom_prebuilt_intents_with_http_info(app_id, version_id, custom_headers:nil)
      list_custom_prebuilt_intents_async(app_id, version_id, custom_headers:custom_headers).value!
    end

    #
    # Gets information about customizable prebuilt intents added to a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_custom_prebuilt_intents_async(app_id, version_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltintents'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'IntentClassifierElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'IntentClassifier'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a prebuilt entity model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_domain_model_create_object [PrebuiltDomainModelCreateObject]
    # A model object containing the name of the prebuilt entity and the name of the
    # domain to which this model belongs.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def add_custom_prebuilt_entity(app_id, version_id, prebuilt_domain_model_create_object, custom_headers:nil)
      response = add_custom_prebuilt_entity_async(app_id, version_id, prebuilt_domain_model_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a prebuilt entity model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_domain_model_create_object [PrebuiltDomainModelCreateObject]
    # A model object containing the name of the prebuilt entity and the name of the
    # domain to which this model belongs.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_custom_prebuilt_entity_with_http_info(app_id, version_id, prebuilt_domain_model_create_object, custom_headers:nil)
      add_custom_prebuilt_entity_async(app_id, version_id, prebuilt_domain_model_create_object, custom_headers:custom_headers).value!
    end

    #
    # Adds a prebuilt entity model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param prebuilt_domain_model_create_object [PrebuiltDomainModelCreateObject]
    # A model object containing the name of the prebuilt entity and the name of the
    # domain to which this model belongs.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_custom_prebuilt_entity_async(app_id, version_id, prebuilt_domain_model_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'prebuilt_domain_model_create_object is nil' if prebuilt_domain_model_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::PrebuiltDomainModelCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  prebuilt_domain_model_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltentities'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets all prebuilt entities used in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_custom_prebuilt_entities(app_id, version_id, custom_headers:nil)
      response = list_custom_prebuilt_entities_async(app_id, version_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all prebuilt entities used in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_custom_prebuilt_entities_with_http_info(app_id, version_id, custom_headers:nil)
      list_custom_prebuilt_entities_async(app_id, version_id, custom_headers:custom_headers).value!
    end

    #
    # Gets all prebuilt entities used in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_custom_prebuilt_entities_async(app_id, version_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltentities'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'EntityExtractorElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'EntityExtractor'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets all prebuilt intent and entity model information used in a version of
    # this application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_custom_prebuilt_models(app_id, version_id, custom_headers:nil)
      response = list_custom_prebuilt_models_async(app_id, version_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all prebuilt intent and entity model information used in a version of
    # this application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_custom_prebuilt_models_with_http_info(app_id, version_id, custom_headers:nil)
      list_custom_prebuilt_models_async(app_id, version_id, custom_headers:custom_headers).value!
    end

    #
    # Gets all prebuilt intent and entity model information used in a version of
    # this application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_custom_prebuilt_models_async(app_id, version_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltmodels'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'CustomPrebuiltModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'CustomPrebuiltModel'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a prebuilt domain's models in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param domain_name [String] Domain name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_custom_prebuilt_domain(app_id, version_id, domain_name, custom_headers:nil)
      response = delete_custom_prebuilt_domain_async(app_id, version_id, domain_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a prebuilt domain's models in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param domain_name [String] Domain name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_custom_prebuilt_domain_with_http_info(app_id, version_id, domain_name, custom_headers:nil)
      delete_custom_prebuilt_domain_async(app_id, version_id, domain_name, custom_headers:custom_headers).value!
    end

    #
    # Deletes a prebuilt domain's models in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param domain_name [String] Domain name.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_custom_prebuilt_domain_async(app_id, version_id, domain_name, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'domain_name is nil' if domain_name.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltdomains/{domainName}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'domainName' => domain_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates a single child in an existing entity model hierarchy in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param child_entity_model_create_object [ChildEntityModelCreateObject] A
    # model object containing the name of the new child model and its children.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def add_entity_child(app_id, version_id, entity_id, child_entity_model_create_object, custom_headers:nil)
      response = add_entity_child_async(app_id, version_id, entity_id, child_entity_model_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates a single child in an existing entity model hierarchy in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param child_entity_model_create_object [ChildEntityModelCreateObject] A
    # model object containing the name of the new child model and its children.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_entity_child_with_http_info(app_id, version_id, entity_id, child_entity_model_create_object, custom_headers:nil)
      add_entity_child_async(app_id, version_id, entity_id, child_entity_model_create_object, custom_headers:custom_headers).value!
    end

    #
    # Creates a single child in an existing entity model hierarchy in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param child_entity_model_create_object [ChildEntityModelCreateObject] A
    # model object containing the name of the new child model and its children.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_entity_child_async(app_id, version_id, entity_id, child_entity_model_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'child_entity_model_create_object is nil' if child_entity_model_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ChildEntityModelCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  child_entity_model_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}/children'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about the child's model contained in an hierarchical entity
    # child model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param h_child_id The hierarchical entity extractor child ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HierarchicalChildEntity] operation results.
    #
    def get_hierarchical_entity_child(app_id, version_id, h_entity_id, h_child_id, custom_headers:nil)
      response = get_hierarchical_entity_child_async(app_id, version_id, h_entity_id, h_child_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about the child's model contained in an hierarchical entity
    # child model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param h_child_id The hierarchical entity extractor child ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_hierarchical_entity_child_with_http_info(app_id, version_id, h_entity_id, h_child_id, custom_headers:nil)
      get_hierarchical_entity_child_async(app_id, version_id, h_entity_id, h_child_id, custom_headers:custom_headers).value!
    end

    #
    # Gets information about the child's model contained in an hierarchical entity
    # child model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param h_child_id The hierarchical entity extractor child ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_hierarchical_entity_child_async(app_id, version_id, h_entity_id, h_child_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?
      fail ArgumentError, 'h_child_id is nil' if h_child_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id,'hChildId' => h_child_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::HierarchicalChildEntity.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Renames a single child in an existing hierarchical entity model in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param h_child_id The hierarchical entity extractor child ID.
    # @param hierarchical_child_model_update_object
    # [HierarchicalChildModelUpdateObject] Model object containing new name of the
    # hierarchical entity child.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_hierarchical_entity_child(app_id, version_id, h_entity_id, h_child_id, hierarchical_child_model_update_object, custom_headers:nil)
      response = update_hierarchical_entity_child_async(app_id, version_id, h_entity_id, h_child_id, hierarchical_child_model_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Renames a single child in an existing hierarchical entity model in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param h_child_id The hierarchical entity extractor child ID.
    # @param hierarchical_child_model_update_object
    # [HierarchicalChildModelUpdateObject] Model object containing new name of the
    # hierarchical entity child.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_hierarchical_entity_child_with_http_info(app_id, version_id, h_entity_id, h_child_id, hierarchical_child_model_update_object, custom_headers:nil)
      update_hierarchical_entity_child_async(app_id, version_id, h_entity_id, h_child_id, hierarchical_child_model_update_object, custom_headers:custom_headers).value!
    end

    #
    # Renames a single child in an existing hierarchical entity model in a version
    # of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param h_child_id The hierarchical entity extractor child ID.
    # @param hierarchical_child_model_update_object
    # [HierarchicalChildModelUpdateObject] Model object containing new name of the
    # hierarchical entity child.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_hierarchical_entity_child_async(app_id, version_id, h_entity_id, h_child_id, hierarchical_child_model_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?
      fail ArgumentError, 'h_child_id is nil' if h_child_id.nil?
      fail ArgumentError, 'hierarchical_child_model_update_object is nil' if hierarchical_child_model_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::HierarchicalChildModelUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  hierarchical_child_model_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id,'hChildId' => h_child_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a hierarchical entity extractor child in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param h_child_id The hierarchical entity extractor child ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_hierarchical_entity_child(app_id, version_id, h_entity_id, h_child_id, custom_headers:nil)
      response = delete_hierarchical_entity_child_async(app_id, version_id, h_entity_id, h_child_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a hierarchical entity extractor child in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param h_child_id The hierarchical entity extractor child ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_hierarchical_entity_child_with_http_info(app_id, version_id, h_entity_id, h_child_id, custom_headers:nil)
      delete_hierarchical_entity_child_async(app_id, version_id, h_entity_id, h_child_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a hierarchical entity extractor child in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param h_child_id The hierarchical entity extractor child ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_hierarchical_entity_child_async(app_id, version_id, h_entity_id, h_child_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?
      fail ArgumentError, 'h_child_id is nil' if h_child_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id,'hChildId' => h_child_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates a single child in an existing composite entity model in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param composite_child_model_create_object [CompositeChildModelCreateObject]
    # A model object containing the name of the new composite child model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def add_composite_entity_child(app_id, version_id, c_entity_id, composite_child_model_create_object, custom_headers:nil)
      response = add_composite_entity_child_async(app_id, version_id, c_entity_id, composite_child_model_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates a single child in an existing composite entity model in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param composite_child_model_create_object [CompositeChildModelCreateObject]
    # A model object containing the name of the new composite child model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_composite_entity_child_with_http_info(app_id, version_id, c_entity_id, composite_child_model_create_object, custom_headers:nil)
      add_composite_entity_child_async(app_id, version_id, c_entity_id, composite_child_model_create_object, custom_headers:custom_headers).value!
    end

    #
    # Creates a single child in an existing composite entity model in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param composite_child_model_create_object [CompositeChildModelCreateObject]
    # A model object containing the name of the new composite child model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_composite_entity_child_async(app_id, version_id, c_entity_id, composite_child_model_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'c_entity_id is nil' if c_entity_id.nil?
      fail ArgumentError, 'composite_child_model_create_object is nil' if composite_child_model_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::CompositeChildModelCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  composite_child_model_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'cEntityId' => c_entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a composite entity extractor child from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param c_child_id The hierarchical entity extractor child ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_composite_entity_child(app_id, version_id, c_entity_id, c_child_id, custom_headers:nil)
      response = delete_composite_entity_child_async(app_id, version_id, c_entity_id, c_child_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a composite entity extractor child from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param c_child_id The hierarchical entity extractor child ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_composite_entity_child_with_http_info(app_id, version_id, c_entity_id, c_child_id, custom_headers:nil)
      delete_composite_entity_child_async(app_id, version_id, c_entity_id, c_child_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a composite entity extractor child from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param c_child_id The hierarchical entity extractor child ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_composite_entity_child_async(app_id, version_id, c_entity_id, c_child_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'c_entity_id is nil' if c_entity_id.nil?
      fail ArgumentError, 'c_child_id is nil' if c_child_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children/{cChildId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'cEntityId' => c_entity_id,'cChildId' => c_child_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about the regular expression entity models in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_regex_entity_infos(app_id, version_id, skip:0, take:100, custom_headers:nil)
      response = list_regex_entity_infos_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about the regular expression entity models in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_regex_entity_infos_with_http_info(app_id, version_id, skip:0, take:100, custom_headers:nil)
      list_regex_entity_infos_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
    end

    #
    # Gets information about the regular expression entity models in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_regex_entity_infos_async(app_id, version_id, skip:0, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, "'skip' should satisfy the constraint - 'InclusiveMinimum': '0'" if !skip.nil? && skip < 0
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/regexentities'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          query_params: {'skip' => skip,'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'RegexEntityExtractorElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'RegexEntityExtractor'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a regular expression entity model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_extractor_create_obj [RegexModelCreateObject] A model
    # object containing the name and regex pattern for the new regular expression
    # entity extractor.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def create_regex_entity_model(app_id, version_id, regex_entity_extractor_create_obj, custom_headers:nil)
      response = create_regex_entity_model_async(app_id, version_id, regex_entity_extractor_create_obj, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a regular expression entity model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_extractor_create_obj [RegexModelCreateObject] A model
    # object containing the name and regex pattern for the new regular expression
    # entity extractor.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_regex_entity_model_with_http_info(app_id, version_id, regex_entity_extractor_create_obj, custom_headers:nil)
      create_regex_entity_model_async(app_id, version_id, regex_entity_extractor_create_obj, custom_headers:custom_headers).value!
    end

    #
    # Adds a regular expression entity model to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_extractor_create_obj [RegexModelCreateObject] A model
    # object containing the name and regex pattern for the new regular expression
    # entity extractor.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_regex_entity_model_async(app_id, version_id, regex_entity_extractor_create_obj, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'regex_entity_extractor_create_obj is nil' if regex_entity_extractor_create_obj.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::RegexModelCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  regex_entity_extractor_create_obj)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/regexentities'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get information about the Pattern.Any entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_pattern_any_entity_infos(app_id, version_id, skip:0, take:100, custom_headers:nil)
      response = list_pattern_any_entity_infos_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get information about the Pattern.Any entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_pattern_any_entity_infos_with_http_info(app_id, version_id, skip:0, take:100, custom_headers:nil)
      list_pattern_any_entity_infos_async(app_id, version_id, skip:skip, take:take, custom_headers:custom_headers).value!
    end

    #
    # Get information about the Pattern.Any entity models in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param skip [Integer] The number of entries to skip. Default value is 0.
    # @param take [Integer] The number of entries to return. Maximum page size is
    # 500. Default is 100.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_pattern_any_entity_infos_async(app_id, version_id, skip:0, take:100, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, "'skip' should satisfy the constraint - 'InclusiveMinimum': '0'" if !skip.nil? && skip < 0
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMaximum': '500'" if !take.nil? && take > 500
      fail ArgumentError, "'take' should satisfy the constraint - 'InclusiveMinimum': '0'" if !take.nil? && take < 0


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          query_params: {'skip' => skip,'take' => take},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'PatternAnyEntityExtractorElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'PatternAnyEntityExtractor'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a pattern.any entity extractor to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param extractor_create_object [PatternAnyModelCreateObject] A model object
    # containing the name and explicit list for the new Pattern.Any entity
    # extractor.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def create_pattern_any_entity_model(app_id, version_id, extractor_create_object, custom_headers:nil)
      response = create_pattern_any_entity_model_async(app_id, version_id, extractor_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a pattern.any entity extractor to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param extractor_create_object [PatternAnyModelCreateObject] A model object
    # containing the name and explicit list for the new Pattern.Any entity
    # extractor.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_pattern_any_entity_model_with_http_info(app_id, version_id, extractor_create_object, custom_headers:nil)
      create_pattern_any_entity_model_async(app_id, version_id, extractor_create_object, custom_headers:custom_headers).value!
    end

    #
    # Adds a pattern.any entity extractor to a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param extractor_create_object [PatternAnyModelCreateObject] A model object
    # containing the name and explicit list for the new Pattern.Any entity
    # extractor.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_pattern_any_entity_model_async(app_id, version_id, extractor_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'extractor_create_object is nil' if extractor_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::PatternAnyModelCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  extractor_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get all roles for an entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_entity_roles(app_id, version_id, entity_id, custom_headers:nil)
      response = list_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get all roles for an entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_entity_roles_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      list_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Get all roles for an entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_entity_roles_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'EntityRoleElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'EntityRole'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create an entity role in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def create_entity_role(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      response = create_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create an entity role in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_entity_role_with_http_info(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      create_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
    end

    #
    # Create an entity role in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'entity_role_create_object is nil' if entity_role_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get a prebuilt entity's roles in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_prebuilt_entity_roles(app_id, version_id, entity_id, custom_headers:nil)
      response = list_prebuilt_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get a prebuilt entity's roles in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_prebuilt_entity_roles_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      list_prebuilt_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Get a prebuilt entity's roles in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_prebuilt_entity_roles_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'EntityRoleElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'EntityRole'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create a role for a prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def create_prebuilt_entity_role(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      response = create_prebuilt_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create a role for a prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_prebuilt_entity_role_with_http_info(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      create_prebuilt_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
    end

    #
    # Create a role for a prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_prebuilt_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'entity_role_create_object is nil' if entity_role_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get all roles for a list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_closed_list_entity_roles(app_id, version_id, entity_id, custom_headers:nil)
      response = list_closed_list_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get all roles for a list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_closed_list_entity_roles_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      list_closed_list_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Get all roles for a list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_closed_list_entity_roles_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'EntityRoleElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'EntityRole'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create a role for a list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def create_closed_list_entity_role(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      response = create_closed_list_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create a role for a list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_closed_list_entity_role_with_http_info(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      create_closed_list_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
    end

    #
    # Create a role for a list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_closed_list_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'entity_role_create_object is nil' if entity_role_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get all roles for a regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_regex_entity_roles(app_id, version_id, entity_id, custom_headers:nil)
      response = list_regex_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get all roles for a regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_regex_entity_roles_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      list_regex_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Get all roles for a regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_regex_entity_roles_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'EntityRoleElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'EntityRole'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create a role for an regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def create_regex_entity_role(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      response = create_regex_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create a role for an regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_regex_entity_role_with_http_info(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      create_regex_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
    end

    #
    # Create a role for an regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_regex_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'entity_role_create_object is nil' if entity_role_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get all roles for a composite entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_composite_entity_roles(app_id, version_id, c_entity_id, custom_headers:nil)
      response = list_composite_entity_roles_async(app_id, version_id, c_entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get all roles for a composite entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_composite_entity_roles_with_http_info(app_id, version_id, c_entity_id, custom_headers:nil)
      list_composite_entity_roles_async(app_id, version_id, c_entity_id, custom_headers:custom_headers).value!
    end

    #
    # Get all roles for a composite entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_composite_entity_roles_async(app_id, version_id, c_entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'c_entity_id is nil' if c_entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'cEntityId' => c_entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'EntityRoleElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'EntityRole'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create a role for a composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def create_composite_entity_role(app_id, version_id, c_entity_id, entity_role_create_object, custom_headers:nil)
      response = create_composite_entity_role_async(app_id, version_id, c_entity_id, entity_role_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create a role for a composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_composite_entity_role_with_http_info(app_id, version_id, c_entity_id, entity_role_create_object, custom_headers:nil)
      create_composite_entity_role_async(app_id, version_id, c_entity_id, entity_role_create_object, custom_headers:custom_headers).value!
    end

    #
    # Create a role for a composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_composite_entity_role_async(app_id, version_id, c_entity_id, entity_role_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'c_entity_id is nil' if c_entity_id.nil?
      fail ArgumentError, 'entity_role_create_object is nil' if entity_role_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'cEntityId' => c_entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get all roles for a Pattern.any entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_pattern_any_entity_roles(app_id, version_id, entity_id, custom_headers:nil)
      response = list_pattern_any_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get all roles for a Pattern.any entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_pattern_any_entity_roles_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      list_pattern_any_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Get all roles for a Pattern.any entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_pattern_any_entity_roles_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'EntityRoleElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'EntityRole'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create a role for an Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def create_pattern_any_entity_role(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      response = create_pattern_any_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create a role for an Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_pattern_any_entity_role_with_http_info(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      create_pattern_any_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
    end

    #
    # Create a role for an Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_pattern_any_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'entity_role_create_object is nil' if entity_role_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get all roles for a hierarchical entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_hierarchical_entity_roles(app_id, version_id, h_entity_id, custom_headers:nil)
      response = list_hierarchical_entity_roles_async(app_id, version_id, h_entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get all roles for a hierarchical entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_hierarchical_entity_roles_with_http_info(app_id, version_id, h_entity_id, custom_headers:nil)
      list_hierarchical_entity_roles_async(app_id, version_id, h_entity_id, custom_headers:custom_headers).value!
    end

    #
    # Get all roles for a hierarchical entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_hierarchical_entity_roles_async(app_id, version_id, h_entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'EntityRoleElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'EntityRole'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create a role for an hierarchical entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def create_hierarchical_entity_role(app_id, version_id, h_entity_id, entity_role_create_object, custom_headers:nil)
      response = create_hierarchical_entity_role_async(app_id, version_id, h_entity_id, entity_role_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create a role for an hierarchical entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_hierarchical_entity_role_with_http_info(app_id, version_id, h_entity_id, entity_role_create_object, custom_headers:nil)
      create_hierarchical_entity_role_async(app_id, version_id, h_entity_id, entity_role_create_object, custom_headers:custom_headers).value!
    end

    #
    # Create a role for an hierarchical entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_hierarchical_entity_role_async(app_id, version_id, h_entity_id, entity_role_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?
      fail ArgumentError, 'entity_role_create_object is nil' if entity_role_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get all roles for a prebuilt entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_custom_prebuilt_entity_roles(app_id, version_id, entity_id, custom_headers:nil)
      response = list_custom_prebuilt_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get all roles for a prebuilt entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_custom_prebuilt_entity_roles_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      list_custom_prebuilt_entity_roles_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Get all roles for a prebuilt entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity Id
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_custom_prebuilt_entity_roles_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'EntityRoleElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'EntityRole'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create a role for a prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Uuid] operation results.
    #
    def create_custom_prebuilt_entity_role(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      response = create_custom_prebuilt_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create a role for a prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_custom_prebuilt_entity_role_with_http_info(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      create_custom_prebuilt_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:custom_headers).value!
    end

    #
    # Create a role for a prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity model ID.
    # @param entity_role_create_object [EntityRoleCreateObject] An entity role
    # object containing the name of role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_custom_prebuilt_entity_role_async(app_id, version_id, entity_id, entity_role_create_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'entity_role_create_object is nil' if entity_role_create_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_create_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'String'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get the explicit (exception) list of the pattern.any entity in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_explicit_list(app_id, version_id, entity_id, custom_headers:nil)
      response = get_explicit_list_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get the explicit (exception) list of the pattern.any entity in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_explicit_list_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      get_explicit_list_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Get the explicit (exception) list of the pattern.any entity in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_explicit_list_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'ExplicitListItemElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'ExplicitListItem'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Add a new exception to the explicit list for the Pattern.Any entity in a
    # version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param item [ExplicitListItemCreateObject] The new explicit list item.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Number] operation results.
    #
    def add_explicit_list_item(app_id, version_id, entity_id, item, custom_headers:nil)
      response = add_explicit_list_item_async(app_id, version_id, entity_id, item, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Add a new exception to the explicit list for the Pattern.Any entity in a
    # version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param item [ExplicitListItemCreateObject] The new explicit list item.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_explicit_list_item_with_http_info(app_id, version_id, entity_id, item, custom_headers:nil)
      add_explicit_list_item_async(app_id, version_id, entity_id, item, custom_headers:custom_headers).value!
    end

    #
    # Add a new exception to the explicit list for the Pattern.Any entity in a
    # version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param item [ExplicitListItemCreateObject] The new explicit list item.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_explicit_list_item_async(app_id, version_id, entity_id, item, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'item is nil' if item.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ExplicitListItemCreateObject.mapper()
      request_content = @client.serialize(request_mapper,  item)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Number'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about a regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_id The regular expression entity model ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RegexEntityExtractor] operation results.
    #
    def get_regex_entity_entity_info(app_id, version_id, regex_entity_id, custom_headers:nil)
      response = get_regex_entity_entity_info_async(app_id, version_id, regex_entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about a regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_id The regular expression entity model ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_regex_entity_entity_info_with_http_info(app_id, version_id, regex_entity_id, custom_headers:nil)
      get_regex_entity_entity_info_async(app_id, version_id, regex_entity_id, custom_headers:custom_headers).value!
    end

    #
    # Gets information about a regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_id The regular expression entity model ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_regex_entity_entity_info_async(app_id, version_id, regex_entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'regex_entity_id is nil' if regex_entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'regexEntityId' => regex_entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::RegexEntityExtractor.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the regular expression entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_id The regular expression entity extractor ID.
    # @param regex_entity_update_object [RegexModelUpdateObject] An object
    # containing the new entity name and regex pattern.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_regex_entity_model(app_id, version_id, regex_entity_id, regex_entity_update_object, custom_headers:nil)
      response = update_regex_entity_model_async(app_id, version_id, regex_entity_id, regex_entity_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates the regular expression entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_id The regular expression entity extractor ID.
    # @param regex_entity_update_object [RegexModelUpdateObject] An object
    # containing the new entity name and regex pattern.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_regex_entity_model_with_http_info(app_id, version_id, regex_entity_id, regex_entity_update_object, custom_headers:nil)
      update_regex_entity_model_async(app_id, version_id, regex_entity_id, regex_entity_update_object, custom_headers:custom_headers).value!
    end

    #
    # Updates the regular expression entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_id The regular expression entity extractor ID.
    # @param regex_entity_update_object [RegexModelUpdateObject] An object
    # containing the new entity name and regex pattern.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_regex_entity_model_async(app_id, version_id, regex_entity_id, regex_entity_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'regex_entity_id is nil' if regex_entity_id.nil?
      fail ArgumentError, 'regex_entity_update_object is nil' if regex_entity_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::RegexModelUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  regex_entity_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'regexEntityId' => regex_entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a regular expression entity from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_id The regular expression entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_regex_entity_model(app_id, version_id, regex_entity_id, custom_headers:nil)
      response = delete_regex_entity_model_async(app_id, version_id, regex_entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a regular expression entity from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_id The regular expression entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_regex_entity_model_with_http_info(app_id, version_id, regex_entity_id, custom_headers:nil)
      delete_regex_entity_model_async(app_id, version_id, regex_entity_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a regular expression entity from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param regex_entity_id The regular expression entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_regex_entity_model_async(app_id, version_id, regex_entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'regex_entity_id is nil' if regex_entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'regexEntityId' => regex_entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about the Pattern.Any model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PatternAnyEntityExtractor] operation results.
    #
    def get_pattern_any_entity_info(app_id, version_id, entity_id, custom_headers:nil)
      response = get_pattern_any_entity_info_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about the Pattern.Any model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_pattern_any_entity_info_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      get_pattern_any_entity_info_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Gets information about the Pattern.Any model in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_pattern_any_entity_info_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::PatternAnyEntityExtractor.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the name and explicit (exception) list of a Pattern.Any entity model
    # in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param pattern_any_update_object [PatternAnyModelUpdateObject] An object
    # containing the explicit list of the Pattern.Any entity.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_pattern_any_entity_model(app_id, version_id, entity_id, pattern_any_update_object, custom_headers:nil)
      response = update_pattern_any_entity_model_async(app_id, version_id, entity_id, pattern_any_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates the name and explicit (exception) list of a Pattern.Any entity model
    # in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param pattern_any_update_object [PatternAnyModelUpdateObject] An object
    # containing the explicit list of the Pattern.Any entity.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_pattern_any_entity_model_with_http_info(app_id, version_id, entity_id, pattern_any_update_object, custom_headers:nil)
      update_pattern_any_entity_model_async(app_id, version_id, entity_id, pattern_any_update_object, custom_headers:custom_headers).value!
    end

    #
    # Updates the name and explicit (exception) list of a Pattern.Any entity model
    # in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param pattern_any_update_object [PatternAnyModelUpdateObject] An object
    # containing the explicit list of the Pattern.Any entity.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_pattern_any_entity_model_async(app_id, version_id, entity_id, pattern_any_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'pattern_any_update_object is nil' if pattern_any_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::PatternAnyModelUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  pattern_any_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a Pattern.Any entity extractor from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_pattern_any_entity_model(app_id, version_id, entity_id, custom_headers:nil)
      response = delete_pattern_any_entity_model_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a Pattern.Any entity extractor from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_pattern_any_entity_model_with_http_info(app_id, version_id, entity_id, custom_headers:nil)
      delete_pattern_any_entity_model_async(app_id, version_id, entity_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a Pattern.Any entity extractor from a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_pattern_any_entity_model_async(app_id, version_id, entity_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get one role for a given entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EntityRole] operation results.
    #
    def get_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = get_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get one role for a given entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      get_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Get one role for a given entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRole.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update a role for a given entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_entity_role(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      response = update_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update a role for a given entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_entity_role_with_http_info(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      update_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
    end

    #
    # Update a role for a given entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?
      fail ArgumentError, 'entity_role_update_object is nil' if entity_role_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete an entity role in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = delete_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete an entity role in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      delete_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Delete an entity role in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get one role for a given prebuilt entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EntityRole] operation results.
    #
    def get_prebuilt_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = get_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get one role for a given prebuilt entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_prebuilt_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      get_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Get one role for a given prebuilt entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRole.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update a role for a given prebuilt entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_prebuilt_entity_role(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      response = update_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update a role for a given prebuilt entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_prebuilt_entity_role_with_http_info(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      update_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
    end

    #
    # Update a role for a given prebuilt entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?
      fail ArgumentError, 'entity_role_update_object is nil' if entity_role_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete a role in a prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_prebuilt_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = delete_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete a role in a prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_prebuilt_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      delete_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Delete a role in a prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get one role for a given list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EntityRole] operation results.
    #
    def get_closed_list_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = get_closed_list_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get one role for a given list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_closed_list_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      get_closed_list_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Get one role for a given list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_closed_list_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRole.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update a role for a given list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_closed_list_entity_role(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      response = update_closed_list_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update a role for a given list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_closed_list_entity_role_with_http_info(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      update_closed_list_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
    end

    #
    # Update a role for a given list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_closed_list_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?
      fail ArgumentError, 'entity_role_update_object is nil' if entity_role_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete a role for a given list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_closed_list_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = delete_closed_list_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete a role for a given list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_closed_list_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      delete_closed_list_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Delete a role for a given list entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_closed_list_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get one role for a given regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EntityRole] operation results.
    #
    def get_regex_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = get_regex_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get one role for a given regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_regex_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      get_regex_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Get one role for a given regular expression entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_regex_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRole.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update a role for a given regular expression entity in a version of the
    # application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_regex_entity_role(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      response = update_regex_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update a role for a given regular expression entity in a version of the
    # application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_regex_entity_role_with_http_info(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      update_regex_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
    end

    #
    # Update a role for a given regular expression entity in a version of the
    # application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_regex_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?
      fail ArgumentError, 'entity_role_update_object is nil' if entity_role_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete a role for a given regular expression in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_regex_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = delete_regex_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete a role for a given regular expression in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_regex_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      delete_regex_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Delete a role for a given regular expression in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_regex_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get one role for a given composite entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EntityRole] operation results.
    #
    def get_composite_entity_role(app_id, version_id, c_entity_id, role_id, custom_headers:nil)
      response = get_composite_entity_role_async(app_id, version_id, c_entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get one role for a given composite entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_composite_entity_role_with_http_info(app_id, version_id, c_entity_id, role_id, custom_headers:nil)
      get_composite_entity_role_async(app_id, version_id, c_entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Get one role for a given composite entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param role_id entity role ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_composite_entity_role_async(app_id, version_id, c_entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'c_entity_id is nil' if c_entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'cEntityId' => c_entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRole.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update a role for a given composite entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_composite_entity_role(app_id, version_id, c_entity_id, role_id, entity_role_update_object, custom_headers:nil)
      response = update_composite_entity_role_async(app_id, version_id, c_entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update a role for a given composite entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_composite_entity_role_with_http_info(app_id, version_id, c_entity_id, role_id, entity_role_update_object, custom_headers:nil)
      update_composite_entity_role_async(app_id, version_id, c_entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
    end

    #
    # Update a role for a given composite entity in a version of the application
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_composite_entity_role_async(app_id, version_id, c_entity_id, role_id, entity_role_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'c_entity_id is nil' if c_entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?
      fail ArgumentError, 'entity_role_update_object is nil' if entity_role_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'cEntityId' => c_entity_id,'roleId' => role_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete a role for a given composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_composite_entity_role(app_id, version_id, c_entity_id, role_id, custom_headers:nil)
      response = delete_composite_entity_role_async(app_id, version_id, c_entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete a role for a given composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_composite_entity_role_with_http_info(app_id, version_id, c_entity_id, role_id, custom_headers:nil)
      delete_composite_entity_role_async(app_id, version_id, c_entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Delete a role for a given composite entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param c_entity_id The composite entity extractor ID.
    # @param role_id The entity role Id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_composite_entity_role_async(app_id, version_id, c_entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'c_entity_id is nil' if c_entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'cEntityId' => c_entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get one role for a given Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EntityRole] operation results.
    #
    def get_pattern_any_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = get_pattern_any_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get one role for a given Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_pattern_any_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      get_pattern_any_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Get one role for a given Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_pattern_any_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRole.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update a role for a given Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_pattern_any_entity_role(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      response = update_pattern_any_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update a role for a given Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_pattern_any_entity_role_with_http_info(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      update_pattern_any_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
    end

    #
    # Update a role for a given Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_pattern_any_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?
      fail ArgumentError, 'entity_role_update_object is nil' if entity_role_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete a role for a given Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_pattern_any_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = delete_pattern_any_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete a role for a given Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_pattern_any_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      delete_pattern_any_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Delete a role for a given Pattern.any entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_pattern_any_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get one role for a given hierarchical entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EntityRole] operation results.
    #
    def get_hierarchical_entity_role(app_id, version_id, h_entity_id, role_id, custom_headers:nil)
      response = get_hierarchical_entity_role_async(app_id, version_id, h_entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get one role for a given hierarchical entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_hierarchical_entity_role_with_http_info(app_id, version_id, h_entity_id, role_id, custom_headers:nil)
      get_hierarchical_entity_role_async(app_id, version_id, h_entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Get one role for a given hierarchical entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param role_id entity role ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_hierarchical_entity_role_async(app_id, version_id, h_entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRole.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update a role for a given hierarchical entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_hierarchical_entity_role(app_id, version_id, h_entity_id, role_id, entity_role_update_object, custom_headers:nil)
      response = update_hierarchical_entity_role_async(app_id, version_id, h_entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update a role for a given hierarchical entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_hierarchical_entity_role_with_http_info(app_id, version_id, h_entity_id, role_id, entity_role_update_object, custom_headers:nil)
      update_hierarchical_entity_role_async(app_id, version_id, h_entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
    end

    #
    # Update a role for a given hierarchical entity in a version of the
    # application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_hierarchical_entity_role_async(app_id, version_id, h_entity_id, role_id, entity_role_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?
      fail ArgumentError, 'entity_role_update_object is nil' if entity_role_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id,'roleId' => role_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete a role for a given hierarchical role in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_hierarchical_entity_role(app_id, version_id, h_entity_id, role_id, custom_headers:nil)
      response = delete_hierarchical_entity_role_async(app_id, version_id, h_entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete a role for a given hierarchical role in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_hierarchical_entity_role_with_http_info(app_id, version_id, h_entity_id, role_id, custom_headers:nil)
      delete_hierarchical_entity_role_async(app_id, version_id, h_entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Delete a role for a given hierarchical role in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param h_entity_id The hierarchical entity extractor ID.
    # @param role_id The entity role Id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_hierarchical_entity_role_async(app_id, version_id, h_entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'h_entity_id is nil' if h_entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'hEntityId' => h_entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get one role for a given prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EntityRole] operation results.
    #
    def get_custom_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = get_custom_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get one role for a given prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_custom_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      get_custom_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Get one role for a given prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id entity ID.
    # @param role_id entity role ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_custom_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRole.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update a role for a given prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_custom_prebuilt_entity_role(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      response = update_custom_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update a role for a given prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_custom_prebuilt_entity_role_with_http_info(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      update_custom_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:custom_headers).value!
    end

    #
    # Update a role for a given prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role ID.
    # @param entity_role_update_object [EntityRoleUpdateObject] The new entity
    # role.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_custom_prebuilt_entity_role_async(app_id, version_id, entity_id, role_id, entity_role_update_object, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?
      fail ArgumentError, 'entity_role_update_object is nil' if entity_role_update_object.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::EntityRoleUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  entity_role_update_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete a role for a given prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_custom_entity_role(app_id, version_id, entity_id, role_id, custom_headers:nil)
      response = delete_custom_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete a role for a given prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_custom_entity_role_with_http_info(app_id, version_id, entity_id, role_id, custom_headers:nil)
      delete_custom_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:custom_headers).value!
    end

    #
    # Delete a role for a given prebuilt entity in a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The entity ID.
    # @param role_id The entity role Id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_custom_entity_role_async(app_id, version_id, entity_id, role_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'role_id is nil' if role_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'roleId' => role_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get the explicit (exception) list of the pattern.any entity in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity Id.
    # @param item_id [Integer] The explicit list item Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ExplicitListItem] operation results.
    #
    def get_explicit_list_item(app_id, version_id, entity_id, item_id, custom_headers:nil)
      response = get_explicit_list_item_async(app_id, version_id, entity_id, item_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get the explicit (exception) list of the pattern.any entity in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity Id.
    # @param item_id [Integer] The explicit list item Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_explicit_list_item_with_http_info(app_id, version_id, entity_id, item_id, custom_headers:nil)
      get_explicit_list_item_async(app_id, version_id, entity_id, item_id, custom_headers:custom_headers).value!
    end

    #
    # Get the explicit (exception) list of the pattern.any entity in a version of
    # the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity Id.
    # @param item_id [Integer] The explicit list item Id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_explicit_list_item_async(app_id, version_id, entity_id, item_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'item_id is nil' if item_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'itemId' => item_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ExplicitListItem.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates an explicit (exception) list item for a Pattern.Any entity in a
    # version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param item_id [Integer] The explicit list item ID.
    # @param item [ExplicitListItemUpdateObject] The new explicit list item.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def update_explicit_list_item(app_id, version_id, entity_id, item_id, item, custom_headers:nil)
      response = update_explicit_list_item_async(app_id, version_id, entity_id, item_id, item, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates an explicit (exception) list item for a Pattern.Any entity in a
    # version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param item_id [Integer] The explicit list item ID.
    # @param item [ExplicitListItemUpdateObject] The new explicit list item.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_explicit_list_item_with_http_info(app_id, version_id, entity_id, item_id, item, custom_headers:nil)
      update_explicit_list_item_async(app_id, version_id, entity_id, item_id, item, custom_headers:custom_headers).value!
    end

    #
    # Updates an explicit (exception) list item for a Pattern.Any entity in a
    # version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The Pattern.Any entity extractor ID.
    # @param item_id [Integer] The explicit list item ID.
    # @param item [ExplicitListItemUpdateObject] The new explicit list item.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_explicit_list_item_async(app_id, version_id, entity_id, item_id, item, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'item_id is nil' if item_id.nil?
      fail ArgumentError, 'item is nil' if item.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::ExplicitListItemUpdateObject.mapper()
      request_content = @client.serialize(request_mapper,  item)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'itemId' => item_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete an item from the explicit (exception) list for a Pattern.any entity in
    # a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The pattern.any entity id.
    # @param item_id [Integer] The explicit list item which will be deleted.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationStatus] operation results.
    #
    def delete_explicit_list_item(app_id, version_id, entity_id, item_id, custom_headers:nil)
      response = delete_explicit_list_item_async(app_id, version_id, entity_id, item_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete an item from the explicit (exception) list for a Pattern.any entity in
    # a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The pattern.any entity id.
    # @param item_id [Integer] The explicit list item which will be deleted.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_explicit_list_item_with_http_info(app_id, version_id, entity_id, item_id, custom_headers:nil)
      delete_explicit_list_item_async(app_id, version_id, entity_id, item_id, custom_headers:custom_headers).value!
    end

    #
    # Delete an item from the explicit (exception) list for a Pattern.any entity in
    # a version of the application.
    #
    # @param app_id The application ID.
    # @param version_id [String] The version ID.
    # @param entity_id The pattern.any entity id.
    # @param item_id [Integer] The explicit list item which will be deleted.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_explicit_list_item_async(app_id, version_id, entity_id, item_id, custom_headers:nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'app_id is nil' if app_id.nil?
      fail ArgumentError, 'version_id is nil' if version_id.nil?
      fail ArgumentError, 'entity_id is nil' if entity_id.nil?
      fail ArgumentError, 'item_id is nil' if item_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'appId' => app_id,'versionId' => version_id,'entityId' => entity_id,'itemId' => item_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::LuisAuthoring::V3_0_preview::Models::OperationStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end
