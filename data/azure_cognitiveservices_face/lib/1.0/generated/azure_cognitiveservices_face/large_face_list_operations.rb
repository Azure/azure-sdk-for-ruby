# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::CognitiveServices::Face::V1_0
  #
  # An API for face detection, verification, and identification.
  #
  class LargeFaceListOperations
    include MsRestAzure

    #
    # Creates and initializes a new instance of the LargeFaceListOperations class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [FaceClient] reference to the FaceClient
    attr_reader :client

    #
    # Create an empty large face list with user-specified largeFaceListId, name, an
    # optional userData and recognitionModel.
    # <br /> Large face list is a list of faces, up to 1,000,000 faces, and used by
    # [Face - Find
    # Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
    # <br /> After creation, user should use [LargeFaceList Face -
    # Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3)
    # to import the faces and [LargeFaceList -
    # Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1)
    # to make it ready for [Face -
    # FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
    # Faces are stored on server until [LargeFaceList -
    # Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd)
    # is called.
    # <br /> Find Similar is used for scenario like finding celebrity-like faces,
    # similar face filtering, or as a light way face identification. But if the
    # actual use is to identify person, please use
    # [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)
    # /
    # [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)
    # and [Face -
    # Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
    # <br />
    # * Free-tier subscription quota: 64 large face lists.
    # * S0-tier subscription quota: 1,000,000 large face lists.
    # <br />
    # 'recognitionModel' should be specified to associate with this large face
    # list. The default value for 'recognitionModel' is 'recognition_01', if the
    # latest model needed, please explicitly specify the model you need in this
    # parameter. New faces that are added to an existing large face list will use
    # the recognition model that's already associated with the collection. Existing
    # face features in a large face list can't be updated to features extracted by
    # another version of recognition model.
    #
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param name [String] User defined name, maximum length is 128.
    # @param user_data [String] User specified data. Length should not exceed 16KB.
    # @param recognition_model [RecognitionModel] Possible values include:
    # 'recognition_01', 'recognition_02'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def create(large_face_list_id, name = nil, user_data = nil, recognition_model = nil, custom_headers = nil)
      response = create_async(large_face_list_id, name, user_data, recognition_model, custom_headers).value!
      nil
    end

    #
    # Create an empty large face list with user-specified largeFaceListId, name, an
    # optional userData and recognitionModel.
    # <br /> Large face list is a list of faces, up to 1,000,000 faces, and used by
    # [Face - Find
    # Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
    # <br /> After creation, user should use [LargeFaceList Face -
    # Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3)
    # to import the faces and [LargeFaceList -
    # Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1)
    # to make it ready for [Face -
    # FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
    # Faces are stored on server until [LargeFaceList -
    # Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd)
    # is called.
    # <br /> Find Similar is used for scenario like finding celebrity-like faces,
    # similar face filtering, or as a light way face identification. But if the
    # actual use is to identify person, please use
    # [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)
    # /
    # [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)
    # and [Face -
    # Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
    # <br />
    # * Free-tier subscription quota: 64 large face lists.
    # * S0-tier subscription quota: 1,000,000 large face lists.
    # <br />
    # 'recognitionModel' should be specified to associate with this large face
    # list. The default value for 'recognitionModel' is 'recognition_01', if the
    # latest model needed, please explicitly specify the model you need in this
    # parameter. New faces that are added to an existing large face list will use
    # the recognition model that's already associated with the collection. Existing
    # face features in a large face list can't be updated to features extracted by
    # another version of recognition model.
    #
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param name [String] User defined name, maximum length is 128.
    # @param user_data [String] User specified data. Length should not exceed 16KB.
    # @param recognition_model [RecognitionModel] Possible values include:
    # 'recognition_01', 'recognition_02'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_with_http_info(large_face_list_id, name = nil, user_data = nil, recognition_model = nil, custom_headers = nil)
      create_async(large_face_list_id, name, user_data, recognition_model, custom_headers).value!
    end

    #
    # Create an empty large face list with user-specified largeFaceListId, name, an
    # optional userData and recognitionModel.
    # <br /> Large face list is a list of faces, up to 1,000,000 faces, and used by
    # [Face - Find
    # Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
    # <br /> After creation, user should use [LargeFaceList Face -
    # Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3)
    # to import the faces and [LargeFaceList -
    # Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1)
    # to make it ready for [Face -
    # FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
    # Faces are stored on server until [LargeFaceList -
    # Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd)
    # is called.
    # <br /> Find Similar is used for scenario like finding celebrity-like faces,
    # similar face filtering, or as a light way face identification. But if the
    # actual use is to identify person, please use
    # [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)
    # /
    # [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)
    # and [Face -
    # Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
    # <br />
    # * Free-tier subscription quota: 64 large face lists.
    # * S0-tier subscription quota: 1,000,000 large face lists.
    # <br />
    # 'recognitionModel' should be specified to associate with this large face
    # list. The default value for 'recognitionModel' is 'recognition_01', if the
    # latest model needed, please explicitly specify the model you need in this
    # parameter. New faces that are added to an existing large face list will use
    # the recognition model that's already associated with the collection. Existing
    # face features in a large face list can't be updated to features extracted by
    # another version of recognition model.
    #
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param name [String] User defined name, maximum length is 128.
    # @param user_data [String] User specified data. Length should not exceed 16KB.
    # @param recognition_model [RecognitionModel] Possible values include:
    # 'recognition_01', 'recognition_02'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_async(large_face_list_id, name = nil, user_data = nil, recognition_model = nil, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?

      body = MetaDataContract.new
      unless name.nil? && user_data.nil? && recognition_model.nil?
        body.name = name
        body.user_data = user_data
        body.recognition_model = recognition_model
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::CognitiveServices::Face::V1_0::Models::MetaDataContract.mapper()
      request_content = @client.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'largefacelists/{largeFaceListId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Retrieve a large face list’s largeFaceListId, name, userData and
    # recognitionModel.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param return_recognition_model [Boolean] Whether to return the
    # 'RecognitionModel' required for the current operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [LargeFaceList] operation results.
    #
    def get(large_face_list_id, return_recognition_model = false, custom_headers = nil)
      response = get_async(large_face_list_id, return_recognition_model, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieve a large face list’s largeFaceListId, name, userData and
    # recognitionModel.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param return_recognition_model [Boolean] Whether to return the
    # 'RecognitionModel' required for the current operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(large_face_list_id, return_recognition_model = false, custom_headers = nil)
      get_async(large_face_list_id, return_recognition_model, custom_headers).value!
    end

    #
    # Retrieve a large face list’s largeFaceListId, name, userData and
    # recognitionModel.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param return_recognition_model [Boolean] Whether to return the
    # 'RecognitionModel' required for the current operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(large_face_list_id, return_recognition_model = false, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'largefacelists/{largeFaceListId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id},
          query_params: {'returnRecognitionModel' => return_recognition_model},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::Face::V1_0::Models::LargeFaceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update information of a large face list.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param name [String] User defined name, maximum length is 128.
    # @param user_data [String] User specified data. Length should not exceed 16KB.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def update(large_face_list_id, name = nil, user_data = nil, custom_headers = nil)
      response = update_async(large_face_list_id, name, user_data, custom_headers).value!
      nil
    end

    #
    # Update information of a large face list.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param name [String] User defined name, maximum length is 128.
    # @param user_data [String] User specified data. Length should not exceed 16KB.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_with_http_info(large_face_list_id, name = nil, user_data = nil, custom_headers = nil)
      update_async(large_face_list_id, name, user_data, custom_headers).value!
    end

    #
    # Update information of a large face list.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param name [String] User defined name, maximum length is 128.
    # @param user_data [String] User specified data. Length should not exceed 16KB.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_async(large_face_list_id, name = nil, user_data = nil, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?

      body = NameAndUserDataContract.new
      unless name.nil? && user_data.nil?
        body.name = name
        body.user_data = user_data
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::CognitiveServices::Face::V1_0::Models::NameAndUserDataContract.mapper()
      request_content = @client.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'largefacelists/{largeFaceListId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Delete an existing large face list according to faceListId. Persisted face
    # images in the large face list will also be deleted.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete(large_face_list_id, custom_headers = nil)
      response = delete_async(large_face_list_id, custom_headers).value!
      nil
    end

    #
    # Delete an existing large face list according to faceListId. Persisted face
    # images in the large face list will also be deleted.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(large_face_list_id, custom_headers = nil)
      delete_async(large_face_list_id, custom_headers).value!
    end

    #
    # Delete an existing large face list according to faceListId. Persisted face
    # images in the large face list will also be deleted.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(large_face_list_id, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'largefacelists/{largeFaceListId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Retrieve the training status of a large face list (completed or ongoing).
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [TrainingStatus] operation results.
    #
    def get_training_status(large_face_list_id, custom_headers = nil)
      response = get_training_status_async(large_face_list_id, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieve the training status of a large face list (completed or ongoing).
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_training_status_with_http_info(large_face_list_id, custom_headers = nil)
      get_training_status_async(large_face_list_id, custom_headers).value!
    end

    #
    # Retrieve the training status of a large face list (completed or ongoing).
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_training_status_async(large_face_list_id, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'largefacelists/{largeFaceListId}/training'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::Face::V1_0::Models::TrainingStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # List large face lists’ information of largeFaceListId, name, userData and
    # recognitionModel. <br />
    # To get face information inside largeFaceList use [LargeFaceList Face -
    # Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)<br
    # />
    # * Large face lists are stored in alphabetical order of largeFaceListId.
    # * "start" parameter (string, optional) is a user-provided largeFaceListId
    # value that returned entries have larger ids by string comparison. "start" set
    # to empty to indicate return from the first item.
    # * "top" parameter (int, optional) specifies the number of entries to return.
    # A maximal of 1000 entries can be returned in one call. To fetch more, you can
    # specify "start" with the last retuned entry’s Id of the current call.
    # <br />
    # For example, total 5 large person lists: "list1", ..., "list5".
    # <br /> "start=&top=" will return all 5 lists.
    # <br /> "start=&top=2" will return "list1", "list2".
    # <br /> "start=list2&top=3" will return "list3", "list4", "list5".
    #
    #
    # @param return_recognition_model [Boolean] Whether to return the
    # 'RecognitionModel' required for the current operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list(return_recognition_model = false, custom_headers = nil)
      response = list_async(return_recognition_model, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # List large face lists’ information of largeFaceListId, name, userData and
    # recognitionModel. <br />
    # To get face information inside largeFaceList use [LargeFaceList Face -
    # Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)<br
    # />
    # * Large face lists are stored in alphabetical order of largeFaceListId.
    # * "start" parameter (string, optional) is a user-provided largeFaceListId
    # value that returned entries have larger ids by string comparison. "start" set
    # to empty to indicate return from the first item.
    # * "top" parameter (int, optional) specifies the number of entries to return.
    # A maximal of 1000 entries can be returned in one call. To fetch more, you can
    # specify "start" with the last retuned entry’s Id of the current call.
    # <br />
    # For example, total 5 large person lists: "list1", ..., "list5".
    # <br /> "start=&top=" will return all 5 lists.
    # <br /> "start=&top=2" will return "list1", "list2".
    # <br /> "start=list2&top=3" will return "list3", "list4", "list5".
    #
    #
    # @param return_recognition_model [Boolean] Whether to return the
    # 'RecognitionModel' required for the current operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(return_recognition_model = false, custom_headers = nil)
      list_async(return_recognition_model, custom_headers).value!
    end

    #
    # List large face lists’ information of largeFaceListId, name, userData and
    # recognitionModel. <br />
    # To get face information inside largeFaceList use [LargeFaceList Face -
    # Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)<br
    # />
    # * Large face lists are stored in alphabetical order of largeFaceListId.
    # * "start" parameter (string, optional) is a user-provided largeFaceListId
    # value that returned entries have larger ids by string comparison. "start" set
    # to empty to indicate return from the first item.
    # * "top" parameter (int, optional) specifies the number of entries to return.
    # A maximal of 1000 entries can be returned in one call. To fetch more, you can
    # specify "start" with the last retuned entry’s Id of the current call.
    # <br />
    # For example, total 5 large person lists: "list1", ..., "list5".
    # <br /> "start=&top=" will return all 5 lists.
    # <br /> "start=&top=2" will return "list1", "list2".
    # <br /> "start=list2&top=3" will return "list3", "list4", "list5".
    #
    #
    # @param return_recognition_model [Boolean] Whether to return the
    # 'RecognitionModel' required for the current operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(return_recognition_model = false, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'largefacelists'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'returnRecognitionModel' => return_recognition_model},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'LargeFaceListElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'LargeFaceList'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Queue a large face list training task, the training task may not be started
    # immediately.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def train(large_face_list_id, custom_headers = nil)
      response = train_async(large_face_list_id, custom_headers).value!
      nil
    end

    #
    # Queue a large face list training task, the training task may not be started
    # immediately.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def train_with_http_info(large_face_list_id, custom_headers = nil)
      train_async(large_face_list_id, custom_headers).value!
    end

    #
    # Queue a large face list training task, the training task may not be started
    # immediately.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def train_async(large_face_list_id, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'largefacelists/{largeFaceListId}/train'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Delete an existing face from a large face list (given by a persistedFaceId
    # and a largeFaceListId). Persisted image related to the face will also be
    # deleted.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param persisted_face_id Id referencing a particular persistedFaceId of an
    # existing face.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete_face(large_face_list_id, persisted_face_id, custom_headers = nil)
      response = delete_face_async(large_face_list_id, persisted_face_id, custom_headers).value!
      nil
    end

    #
    # Delete an existing face from a large face list (given by a persistedFaceId
    # and a largeFaceListId). Persisted image related to the face will also be
    # deleted.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param persisted_face_id Id referencing a particular persistedFaceId of an
    # existing face.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_face_with_http_info(large_face_list_id, persisted_face_id, custom_headers = nil)
      delete_face_async(large_face_list_id, persisted_face_id, custom_headers).value!
    end

    #
    # Delete an existing face from a large face list (given by a persistedFaceId
    # and a largeFaceListId). Persisted image related to the face will also be
    # deleted.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param persisted_face_id Id referencing a particular persistedFaceId of an
    # existing face.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_face_async(large_face_list_id, persisted_face_id, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?
      fail ArgumentError, 'persisted_face_id is nil' if persisted_face_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id,'persistedFaceId' => persisted_face_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Retrieve information about a persisted face (specified by persistedFaceId and
    # its belonging largeFaceListId).
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param persisted_face_id Id referencing a particular persistedFaceId of an
    # existing face.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PersistedFace] operation results.
    #
    def get_face(large_face_list_id, persisted_face_id, custom_headers = nil)
      response = get_face_async(large_face_list_id, persisted_face_id, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieve information about a persisted face (specified by persistedFaceId and
    # its belonging largeFaceListId).
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param persisted_face_id Id referencing a particular persistedFaceId of an
    # existing face.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_face_with_http_info(large_face_list_id, persisted_face_id, custom_headers = nil)
      get_face_async(large_face_list_id, persisted_face_id, custom_headers).value!
    end

    #
    # Retrieve information about a persisted face (specified by persistedFaceId and
    # its belonging largeFaceListId).
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param persisted_face_id Id referencing a particular persistedFaceId of an
    # existing face.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_face_async(large_face_list_id, persisted_face_id, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?
      fail ArgumentError, 'persisted_face_id is nil' if persisted_face_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id,'persistedFaceId' => persisted_face_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::Face::V1_0::Models::PersistedFace.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update a persisted face's userData field.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param persisted_face_id Id referencing a particular persistedFaceId of an
    # existing face.
    # @param user_data [String] User-provided data attached to the face. The size
    # limit is 1KB.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def update_face(large_face_list_id, persisted_face_id, user_data = nil, custom_headers = nil)
      response = update_face_async(large_face_list_id, persisted_face_id, user_data, custom_headers).value!
      nil
    end

    #
    # Update a persisted face's userData field.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param persisted_face_id Id referencing a particular persistedFaceId of an
    # existing face.
    # @param user_data [String] User-provided data attached to the face. The size
    # limit is 1KB.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_face_with_http_info(large_face_list_id, persisted_face_id, user_data = nil, custom_headers = nil)
      update_face_async(large_face_list_id, persisted_face_id, user_data, custom_headers).value!
    end

    #
    # Update a persisted face's userData field.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param persisted_face_id Id referencing a particular persistedFaceId of an
    # existing face.
    # @param user_data [String] User-provided data attached to the face. The size
    # limit is 1KB.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_face_async(large_face_list_id, persisted_face_id, user_data = nil, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?
      fail ArgumentError, 'persisted_face_id is nil' if persisted_face_id.nil?

      body = UpdateFaceRequest.new
      unless user_data.nil?
        body.user_data = user_data
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::CognitiveServices::Face::V1_0::Models::UpdateFaceRequest.mapper()
      request_content = @client.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id,'persistedFaceId' => persisted_face_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Add a face to a large face list. The input face is specified as an image with
    # a targetFace rectangle. It returns a persistedFaceId representing the added
    # face, and persistedFaceId will not expire.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param url [String] Publicly reachable URL of an image
    # @param user_data [String] User-specified data about the face for any purpose.
    # The maximum length is 1KB.
    # @param target_face [Array<Integer>] A face rectangle to specify the target
    # face to be added to a person in the format of
    # "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there
    # is more than one face in the image, targetFace is required to specify which
    # face to add. No targetFace means there is only one face detected in the
    # entire image.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PersistedFace] operation results.
    #
    def add_face_from_url(large_face_list_id, url, user_data = nil, target_face = nil, custom_headers = nil)
      response = add_face_from_url_async(large_face_list_id, url, user_data, target_face, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Add a face to a large face list. The input face is specified as an image with
    # a targetFace rectangle. It returns a persistedFaceId representing the added
    # face, and persistedFaceId will not expire.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param url [String] Publicly reachable URL of an image
    # @param user_data [String] User-specified data about the face for any purpose.
    # The maximum length is 1KB.
    # @param target_face [Array<Integer>] A face rectangle to specify the target
    # face to be added to a person in the format of
    # "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there
    # is more than one face in the image, targetFace is required to specify which
    # face to add. No targetFace means there is only one face detected in the
    # entire image.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_face_from_url_with_http_info(large_face_list_id, url, user_data = nil, target_face = nil, custom_headers = nil)
      add_face_from_url_async(large_face_list_id, url, user_data, target_face, custom_headers).value!
    end

    #
    # Add a face to a large face list. The input face is specified as an image with
    # a targetFace rectangle. It returns a persistedFaceId representing the added
    # face, and persistedFaceId will not expire.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param url [String] Publicly reachable URL of an image
    # @param user_data [String] User-specified data about the face for any purpose.
    # The maximum length is 1KB.
    # @param target_face [Array<Integer>] A face rectangle to specify the target
    # face to be added to a person in the format of
    # "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there
    # is more than one face in the image, targetFace is required to specify which
    # face to add. No targetFace means there is only one face detected in the
    # entire image.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_face_from_url_async(large_face_list_id, url, user_data = nil, target_face = nil, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?
      fail ArgumentError, 'url is nil' if url.nil?

      image_url = ImageUrl.new
      unless url.nil?
        image_url.url = url
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::CognitiveServices::Face::V1_0::Models::ImageUrl.mapper()
      request_content = @client.serialize(request_mapper,  image_url)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'largefacelists/{largeFaceListId}/persistedfaces'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id},
          query_params: {'userData' => user_data,'targetFace' => target_face.nil? ? nil : target_face.join(',')},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::Face::V1_0::Models::PersistedFace.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # List all faces in a large face list, and retrieve face information (including
    # userData and persistedFaceIds of registered faces of the face).
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param start [String] Starting face id to return (used to list a range of
    # faces).
    # @param top [Integer] Number of faces to return starting with the face id
    # indicated by the 'start' parameter.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_faces(large_face_list_id, start = nil, top = nil, custom_headers = nil)
      response = list_faces_async(large_face_list_id, start, top, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # List all faces in a large face list, and retrieve face information (including
    # userData and persistedFaceIds of registered faces of the face).
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param start [String] Starting face id to return (used to list a range of
    # faces).
    # @param top [Integer] Number of faces to return starting with the face id
    # indicated by the 'start' parameter.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_faces_with_http_info(large_face_list_id, start = nil, top = nil, custom_headers = nil)
      list_faces_async(large_face_list_id, start, top, custom_headers).value!
    end

    #
    # List all faces in a large face list, and retrieve face information (including
    # userData and persistedFaceIds of registered faces of the face).
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param start [String] Starting face id to return (used to list a range of
    # faces).
    # @param top [Integer] Number of faces to return starting with the face id
    # indicated by the 'start' parameter.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_faces_async(large_face_list_id, start = nil, top = nil, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'largefacelists/{largeFaceListId}/persistedfaces'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id},
          query_params: {'start' => start,'top' => top},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'PersistedFaceElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'PersistedFace'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Add a face to a large face list. The input face is specified as an image with
    # a targetFace rectangle. It returns a persistedFaceId representing the added
    # face, and persistedFaceId will not expire.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param image An image stream.
    # @param user_data [String] User-specified data about the face for any purpose.
    # The maximum length is 1KB.
    # @param target_face [Array<Integer>] A face rectangle to specify the target
    # face to be added to a person in the format of
    # "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there
    # is more than one face in the image, targetFace is required to specify which
    # face to add. No targetFace means there is only one face detected in the
    # entire image.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PersistedFace] operation results.
    #
    def add_face_from_stream(large_face_list_id, image, user_data = nil, target_face = nil, custom_headers = nil)
      response = add_face_from_stream_async(large_face_list_id, image, user_data, target_face, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Add a face to a large face list. The input face is specified as an image with
    # a targetFace rectangle. It returns a persistedFaceId representing the added
    # face, and persistedFaceId will not expire.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param image An image stream.
    # @param user_data [String] User-specified data about the face for any purpose.
    # The maximum length is 1KB.
    # @param target_face [Array<Integer>] A face rectangle to specify the target
    # face to be added to a person in the format of
    # "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there
    # is more than one face in the image, targetFace is required to specify which
    # face to add. No targetFace means there is only one face detected in the
    # entire image.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_face_from_stream_with_http_info(large_face_list_id, image, user_data = nil, target_face = nil, custom_headers = nil)
      add_face_from_stream_async(large_face_list_id, image, user_data, target_face, custom_headers).value!
    end

    #
    # Add a face to a large face list. The input face is specified as an image with
    # a targetFace rectangle. It returns a persistedFaceId representing the added
    # face, and persistedFaceId will not expire.
    #
    # @param large_face_list_id [String] Id referencing a particular large face
    # list.
    # @param image An image stream.
    # @param user_data [String] User-specified data about the face for any purpose.
    # The maximum length is 1KB.
    # @param target_face [Array<Integer>] A face rectangle to specify the target
    # face to be added to a person in the format of
    # "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there
    # is more than one face in the image, targetFace is required to specify which
    # face to add. No targetFace means there is only one face detected in the
    # entire image.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_face_from_stream_async(large_face_list_id, image, user_data = nil, target_face = nil, custom_headers = nil)
      fail ArgumentError, '@client.endpoint is nil' if @client.endpoint.nil?
      fail ArgumentError, 'large_face_list_id is nil' if large_face_list_id.nil?
      fail ArgumentError, 'image is nil' if image.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/octet-stream'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'Image',
        type: {
          name: 'Stream'
        }
      }
      request_content = @client.serialize(request_mapper,  image)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'largefacelists/{largeFaceListId}/persistedfaces'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{Endpoint}', @client.endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'largeFaceListId' => large_face_list_id},
          query_params: {'userData' => user_data,'targetFace' => target_face.nil? ? nil : target_face.join(',')},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::Face::V1_0::Models::PersistedFace.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end
