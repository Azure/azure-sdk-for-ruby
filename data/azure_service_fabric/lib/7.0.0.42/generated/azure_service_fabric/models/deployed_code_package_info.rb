# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ServiceFabric::V7_0_0_42
  module Models
    #
    # Information about code package deployed on a Service Fabric node.
    #
    class DeployedCodePackageInfo

      include MsRestAzure

      # @return [String] The name of the code package.
      attr_accessor :name

      # @return [String] The version of the code package specified in service
      # manifest.
      attr_accessor :version

      # @return [String] The name of service manifest that specified this code
      # package.
      attr_accessor :service_manifest_name

      # @return [String] The ActivationId of a deployed service package. If
      # ServicePackageActivationMode specified at the time of creating the
      # service
      # is 'SharedProcess' (or if it is not specified, in which case it
      # defaults to 'SharedProcess'), then value of ServicePackageActivationId
      # is always an empty string.
      attr_accessor :service_package_activation_id

      # @return [HostType] Specifies the type of host for main entry point of a
      # code package as specified in service manifest. Possible values include:
      # 'Invalid', 'ExeHost', 'ContainerHost'
      attr_accessor :host_type

      # @return [HostIsolationMode] Specifies the isolation mode of main entry
      # point of a code package when it's host type is ContainerHost. This is
      # specified as part of container host policies in application manifest
      # while importing service manifest. Possible values include: 'None',
      # 'Process', 'HyperV'
      attr_accessor :host_isolation_mode

      # @return [DeploymentStatus] Specifies the status of a deployed
      # application or service package on a Service Fabric node. Possible
      # values include: 'Invalid', 'Downloading', 'Activating', 'Active',
      # 'Upgrading', 'Deactivating', 'RanToCompletion', 'Failed'
      attr_accessor :status

      # @return [String] The interval at which code package is run. This is
      # used for periodic code package.
      attr_accessor :run_frequency_interval

      # @return [CodePackageEntryPoint] Information about setup or main entry
      # point of a code package deployed on a Service Fabric node.
      attr_accessor :setup_entry_point

      # @return [CodePackageEntryPoint] Information about setup or main entry
      # point of a code package deployed on a Service Fabric node.
      attr_accessor :main_entry_point


      #
      # Mapper for DeployedCodePackageInfo class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'DeployedCodePackageInfo',
          type: {
            name: 'Composite',
            class_name: 'DeployedCodePackageInfo',
            model_properties: {
              name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'Name',
                type: {
                  name: 'String'
                }
              },
              version: {
                client_side_validation: true,
                required: false,
                serialized_name: 'Version',
                type: {
                  name: 'String'
                }
              },
              service_manifest_name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'ServiceManifestName',
                type: {
                  name: 'String'
                }
              },
              service_package_activation_id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'ServicePackageActivationId',
                type: {
                  name: 'String'
                }
              },
              host_type: {
                client_side_validation: true,
                required: false,
                serialized_name: 'HostType',
                type: {
                  name: 'String'
                }
              },
              host_isolation_mode: {
                client_side_validation: true,
                required: false,
                serialized_name: 'HostIsolationMode',
                type: {
                  name: 'String'
                }
              },
              status: {
                client_side_validation: true,
                required: false,
                serialized_name: 'Status',
                type: {
                  name: 'String'
                }
              },
              run_frequency_interval: {
                client_side_validation: true,
                required: false,
                serialized_name: 'RunFrequencyInterval',
                type: {
                  name: 'String'
                }
              },
              setup_entry_point: {
                client_side_validation: true,
                required: false,
                serialized_name: 'SetupEntryPoint',
                type: {
                  name: 'Composite',
                  class_name: 'CodePackageEntryPoint'
                }
              },
              main_entry_point: {
                client_side_validation: true,
                required: false,
                serialized_name: 'MainEntryPoint',
                type: {
                  name: 'Composite',
                  class_name: 'CodePackageEntryPoint'
                }
              }
            }
          }
        }
      end
    end
  end
end
