# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ServiceFabric::V7_0_0_42
  module Models
    #
    # Describes an environment variable for the container.
    #
    class EnvironmentVariable

      include MsRestAzure

      # @return [EnvironmentVariableType] The type of the environment variable
      # being given in value. Possible values include: 'ClearText',
      # 'KeyVaultReference', 'SecretValueReference'. Default value: 'ClearText'
      # .
      attr_accessor :type

      # @return [String] The name of the environment variable.
      attr_accessor :name

      # @return [String] The value of the environment variable, will be
      # processed based on the type provided.
      attr_accessor :value


      #
      # Mapper for EnvironmentVariable class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'EnvironmentVariable',
          type: {
            name: 'Composite',
            class_name: 'EnvironmentVariable',
            model_properties: {
              type: {
                client_side_validation: true,
                required: false,
                serialized_name: 'type',
                default_value: 'ClearText',
                type: {
                  name: 'String'
                }
              },
              name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              },
              value: {
                client_side_validation: true,
                required: false,
                serialized_name: 'value',
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
