# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ServiceFabric::V6_2_0_9
  module Models
    #
    # Load Information about a Service Fabric application.
    #
    class ApplicationLoadInfo

      include MsRestAzure

      # @return [String] The identity of the application. This is an encoded
      # representation of the application name. This is used in the REST APIs
      # to identify the application resource.
      # Starting in version 6.0, hierarchical names are delimited with the "\~"
      # character. For example, if the application name is
      # "fabric:/myapp/app1",
      # the application identity would be "myapp\~app1" in 6.0+ and
      # "myapp/app1" in previous versions.
      attr_accessor :id

      # @return [Integer] The minimum number of nodes for this application.
      # It is the number of nodes where Service Fabric will reserve Capacity in
      # the cluster which equals to ReservedLoad * MinimumNodes for this
      # Application instance.
      # For applications that do not have application capacity defined this
      # value will be zero.
      attr_accessor :minimum_nodes

      # @return [Integer] The maximum number of nodes where this application
      # can be instantiated.
      # It is the number of nodes this application is allowed to span.
      # For applications that do not have application capacity defined this
      # value will be zero.
      attr_accessor :maximum_nodes

      # @return [Integer] The number of nodes on which this application is
      # instantiated.
      # For applications that do not have application capacity defined this
      # value will be zero.
      attr_accessor :node_count

      # @return [Array<ApplicationMetricDescription>] List of application
      # capacity metric description.
      attr_accessor :application_load_metric_information


      #
      # Mapper for ApplicationLoadInfo class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'ApplicationLoadInfo',
          type: {
            name: 'Composite',
            class_name: 'ApplicationLoadInfo',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'Id',
                type: {
                  name: 'String'
                }
              },
              minimum_nodes: {
                client_side_validation: true,
                required: false,
                serialized_name: 'MinimumNodes',
                type: {
                  name: 'Number'
                }
              },
              maximum_nodes: {
                client_side_validation: true,
                required: false,
                serialized_name: 'MaximumNodes',
                type: {
                  name: 'Number'
                }
              },
              node_count: {
                client_side_validation: true,
                required: false,
                serialized_name: 'NodeCount',
                type: {
                  name: 'Number'
                }
              },
              application_load_metric_information: {
                client_side_validation: true,
                required: false,
                serialized_name: 'ApplicationLoadMetricInformation',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ApplicationMetricDescriptionElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ApplicationMetricDescription'
                      }
                  }
                }
              }
            }
          }
        }
      end
    end
  end
end
