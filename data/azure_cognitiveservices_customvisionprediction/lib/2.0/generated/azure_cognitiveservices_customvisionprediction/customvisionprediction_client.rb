# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::CognitiveServices::Customvisionprediction::V2_0
  #
  # A service client - single point of access to the REST API.
  #
  class CustomvisionpredictionClient < MsRestAzure::AzureServiceClient
    include MsRestAzure
    include MsRestAzure::Serialization

    # @return [String] the base URI of the service.
    attr_reader :base_url

    # @return Credentials needed for the client to connect to Azure.
    attr_reader :credentials

    # @return [String]
    attr_accessor :api_key

    # @return [String] Supported Cognitive Services endpoints
    attr_accessor :endpoint

    # @return [String] The preferred language for the response.
    attr_accessor :accept_language

    # @return [Integer] The retry timeout in seconds for Long Running
    # Operations. Default value is 30.
    attr_accessor :long_running_operation_retry_timeout

    # @return [Boolean] Whether a unique x-ms-client-request-id should be
    # generated. When set to true a unique x-ms-client-request-id value is
    # generated and included in each request. Default is true.
    attr_accessor :generate_client_request_id

    #
    # Creates initializes a new instance of the CustomvisionpredictionClient class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials = nil, options = nil)
      super(credentials, options)
      @base_url = '{Endpoint}/customvision/v2.0/Prediction'

      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @credentials = credentials

      @accept_language = 'en-US'
      @long_running_operation_retry_timeout = 30
      @generate_client_request_id = true
      add_telemetry
    end

    #
    # Makes a request and returns the body of the response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    #
    # Makes a request and returns the operation response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [MsRestAzure::AzureOperationResponse] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    #
    # Makes a request asynchronously.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      request_url = options[:base_url] || @base_url
      if(!options[:headers].nil? && !options[:headers]['Content-Type'].nil?)
        @request_headers['Content-Type'] = options[:headers]['Content-Type']
      end

      request_headers = @request_headers
      request_headers.merge!({'accept-language' => @accept_language}) unless @accept_language.nil?
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @credentials}) unless @credentials.nil?

      super(request_url, method, path, options)
    end

    #
    # Predict an image url and saves the result
    #
    # @param project_id The project id
    # @param image_url [ImageUrl] An {Iris.Web.Api.Models.ImageUrl} that contains
    # the url of the image to be evaluated
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ImagePrediction] operation results.
    #
    def predict_image_url(project_id, image_url, iteration_id:nil, application:nil, custom_headers:nil)
      response = predict_image_url_async(project_id, image_url, iteration_id:iteration_id, application:application, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Predict an image url and saves the result
    #
    # @param project_id The project id
    # @param image_url [ImageUrl] An {Iris.Web.Api.Models.ImageUrl} that contains
    # the url of the image to be evaluated
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def predict_image_url_with_http_info(project_id, image_url, iteration_id:nil, application:nil, custom_headers:nil)
      predict_image_url_async(project_id, image_url, iteration_id:iteration_id, application:application, custom_headers:custom_headers).value!
    end

    #
    # Predict an image url and saves the result
    #
    # @param project_id The project id
    # @param image_url [ImageUrl] An {Iris.Web.Api.Models.ImageUrl} that contains
    # the url of the image to be evaluated
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def predict_image_url_async(project_id, image_url, iteration_id:nil, application:nil, custom_headers:nil)
      fail ArgumentError, 'endpoint is nil' if endpoint.nil?
      fail ArgumentError, 'project_id is nil' if project_id.nil?
      fail ArgumentError, 'image_url is nil' if image_url.nil?
      fail ArgumentError, 'api_key is nil' if api_key.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['Prediction-Key'] = api_key unless api_key.nil?
      request_headers['accept-language'] = accept_language unless accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::Customvisionprediction::V2_0::Models::ImageUrl.mapper()
      request_content = self.serialize(request_mapper,  image_url)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '{projectId}/url'

      request_url = @base_url || self.base_url
    request_url = request_url.gsub('{Endpoint}', endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'projectId' => project_id},
          query_params: {'iterationId' => iteration_id,'application' => application},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::Customvisionprediction::V2_0::Models::ImagePrediction.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Predict an image and saves the result
    #
    # @param project_id The project id
    # @param image_data
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ImagePrediction] operation results.
    #
    def predict_image(project_id, image_data, iteration_id:nil, application:nil, custom_headers:nil)
      response = predict_image_async(project_id, image_data, iteration_id:iteration_id, application:application, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Predict an image and saves the result
    #
    # @param project_id The project id
    # @param image_data
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def predict_image_with_http_info(project_id, image_data, iteration_id:nil, application:nil, custom_headers:nil)
      predict_image_async(project_id, image_data, iteration_id:iteration_id, application:application, custom_headers:custom_headers).value!
    end

    #
    # Predict an image and saves the result
    #
    # @param project_id The project id
    # @param image_data
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def predict_image_async(project_id, image_data, iteration_id:nil, application:nil, custom_headers:nil)
      fail ArgumentError, 'endpoint is nil' if endpoint.nil?
      fail ArgumentError, 'project_id is nil' if project_id.nil?
      fail ArgumentError, 'image_data is nil' if image_data.nil?
      fail ArgumentError, 'api_key is nil' if api_key.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'multipart/form-data'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['Prediction-Key'] = api_key unless api_key.nil?
      request_headers['accept-language'] = accept_language unless accept_language.nil?

      # Set Form Data
      form_data = {}
      form_data['imageData'] = image_data.to_s unless image_data.to_s.nil?

      path_template = '{projectId}/image'

      request_url = @base_url || self.base_url
    request_url = request_url.gsub('{Endpoint}', endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'projectId' => project_id},
          query_params: {'iterationId' => iteration_id,'application' => application},
          headers: request_headers.merge(custom_headers || {}),
          body: URI.encode_www_form(form_data),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::Customvisionprediction::V2_0::Models::ImagePrediction.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Predict an image url without saving the result
    #
    # @param project_id The project id
    # @param image_url [ImageUrl] An {Iris.Web.Api.Models.ImageUrl} that contains
    # the url of the image to be evaluated
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ImagePrediction] operation results.
    #
    def predict_image_url_with_no_store(project_id, image_url, iteration_id:nil, application:nil, custom_headers:nil)
      response = predict_image_url_with_no_store_async(project_id, image_url, iteration_id:iteration_id, application:application, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Predict an image url without saving the result
    #
    # @param project_id The project id
    # @param image_url [ImageUrl] An {Iris.Web.Api.Models.ImageUrl} that contains
    # the url of the image to be evaluated
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def predict_image_url_with_no_store_with_http_info(project_id, image_url, iteration_id:nil, application:nil, custom_headers:nil)
      predict_image_url_with_no_store_async(project_id, image_url, iteration_id:iteration_id, application:application, custom_headers:custom_headers).value!
    end

    #
    # Predict an image url without saving the result
    #
    # @param project_id The project id
    # @param image_url [ImageUrl] An {Iris.Web.Api.Models.ImageUrl} that contains
    # the url of the image to be evaluated
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def predict_image_url_with_no_store_async(project_id, image_url, iteration_id:nil, application:nil, custom_headers:nil)
      fail ArgumentError, 'endpoint is nil' if endpoint.nil?
      fail ArgumentError, 'project_id is nil' if project_id.nil?
      fail ArgumentError, 'image_url is nil' if image_url.nil?
      fail ArgumentError, 'api_key is nil' if api_key.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['Prediction-Key'] = api_key unless api_key.nil?
      request_headers['accept-language'] = accept_language unless accept_language.nil?

      # Serialize Request
      request_mapper = Azure::CognitiveServices::Customvisionprediction::V2_0::Models::ImageUrl.mapper()
      request_content = self.serialize(request_mapper,  image_url)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '{projectId}/url/nostore'

      request_url = @base_url || self.base_url
    request_url = request_url.gsub('{Endpoint}', endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'projectId' => project_id},
          query_params: {'iterationId' => iteration_id,'application' => application},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::Customvisionprediction::V2_0::Models::ImagePrediction.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Predict an image without saving the result
    #
    # @param project_id The project id
    # @param image_data
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ImagePrediction] operation results.
    #
    def predict_image_with_no_store(project_id, image_data, iteration_id:nil, application:nil, custom_headers:nil)
      response = predict_image_with_no_store_async(project_id, image_data, iteration_id:iteration_id, application:application, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Predict an image without saving the result
    #
    # @param project_id The project id
    # @param image_data
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def predict_image_with_no_store_with_http_info(project_id, image_data, iteration_id:nil, application:nil, custom_headers:nil)
      predict_image_with_no_store_async(project_id, image_data, iteration_id:iteration_id, application:application, custom_headers:custom_headers).value!
    end

    #
    # Predict an image without saving the result
    #
    # @param project_id The project id
    # @param image_data
    # @param iteration_id Optional. Specifies the id of a particular iteration to
    # evaluate against.
    # The default iteration for the project will be used when not specified
    # @param application [String] Optional. Specifies the name of application using
    # the endpoint
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def predict_image_with_no_store_async(project_id, image_data, iteration_id:nil, application:nil, custom_headers:nil)
      fail ArgumentError, 'endpoint is nil' if endpoint.nil?
      fail ArgumentError, 'project_id is nil' if project_id.nil?
      fail ArgumentError, 'image_data is nil' if image_data.nil?
      fail ArgumentError, 'api_key is nil' if api_key.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'multipart/form-data'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['Prediction-Key'] = api_key unless api_key.nil?
      request_headers['accept-language'] = accept_language unless accept_language.nil?

      # Set Form Data
      form_data = {}
      form_data['imageData'] = image_data.to_s unless image_data.to_s.nil?

      path_template = '{projectId}/image/nostore'

      request_url = @base_url || self.base_url
    request_url = request_url.gsub('{Endpoint}', endpoint)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'projectId' => project_id},
          query_params: {'iterationId' => iteration_id,'application' => application},
          headers: request_headers.merge(custom_headers || {}),
          body: URI.encode_www_form(form_data),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::CognitiveServices::Customvisionprediction::V2_0::Models::ImagePrediction.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end


    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = 'azure_cognitiveservices_customvisionprediction'
        sdk_information = "#{sdk_information}/0.17.3"
        add_user_agent_information(sdk_information)
    end
  end
end
