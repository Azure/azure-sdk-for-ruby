# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2019_06_01_9_0
  #
  # A client for issuing REST requests to the Azure Batch service.
  #
  class Job
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Job class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [BatchServiceClient] reference to the BatchServiceClient
    attr_reader :client

    #
    # Gets lifetime summary statistics for all of the Jobs in the specified
    # Account.
    #
    # Statistics are aggregated across all Jobs that have ever existed in the
    # Account, from Account creation to the last update time of the statistics. The
    # statistics may not be immediately available. The Batch service performs
    # periodic roll-up of statistics. The typical delay is about 30 minutes.
    #
    # @param job_get_all_lifetime_statistics_options
    # [JobGetAllLifetimeStatisticsOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobStatistics] operation results.
    #
    def get_all_lifetime_statistics(job_get_all_lifetime_statistics_options:nil, custom_headers:nil)
      response = get_all_lifetime_statistics_async(job_get_all_lifetime_statistics_options:job_get_all_lifetime_statistics_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets lifetime summary statistics for all of the Jobs in the specified
    # Account.
    #
    # Statistics are aggregated across all Jobs that have ever existed in the
    # Account, from Account creation to the last update time of the statistics. The
    # statistics may not be immediately available. The Batch service performs
    # periodic roll-up of statistics. The typical delay is about 30 minutes.
    #
    # @param job_get_all_lifetime_statistics_options
    # [JobGetAllLifetimeStatisticsOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_all_lifetime_statistics_with_http_info(job_get_all_lifetime_statistics_options:nil, custom_headers:nil)
      get_all_lifetime_statistics_async(job_get_all_lifetime_statistics_options:job_get_all_lifetime_statistics_options, custom_headers:custom_headers).value!
    end

    #
    # Gets lifetime summary statistics for all of the Jobs in the specified
    # Account.
    #
    # Statistics are aggregated across all Jobs that have ever existed in the
    # Account, from Account creation to the last update time of the statistics. The
    # statistics may not be immediately available. The Batch service performs
    # periodic roll-up of statistics. The typical delay is about 30 minutes.
    #
    # @param job_get_all_lifetime_statistics_options
    # [JobGetAllLifetimeStatisticsOptions] Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_all_lifetime_statistics_async(job_get_all_lifetime_statistics_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_get_all_lifetime_statistics_options.nil?
        timeout = job_get_all_lifetime_statistics_options.timeout
      end
      unless job_get_all_lifetime_statistics_options.nil?
        client_request_id = job_get_all_lifetime_statistics_options.client_request_id
      end
      unless job_get_all_lifetime_statistics_options.nil?
        return_client_request_id = job_get_all_lifetime_statistics_options.return_client_request_id
      end
      unless job_get_all_lifetime_statistics_options.nil?
        ocp_date = job_get_all_lifetime_statistics_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'lifetimejobstats'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::JobStatistics.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a Job.
    #
    # Deleting a Job also deletes all Tasks that are part of that Job, and all Job
    # statistics. This also overrides the retention period for Task data; that is,
    # if the Job contains Tasks which are still retained on Compute Nodes, the
    # Batch services deletes those Tasks' working directories and all their
    # contents.  When a Delete Job request is received, the Batch service sets the
    # Job to the deleting state. All update operations on a Job that is in deleting
    # state will fail with status code 409 (Conflict), with additional information
    # indicating that the Job is being deleted.
    #
    # @param job_id [String] The ID of the Job to delete.
    # @param job_delete_options [JobDeleteOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete(job_id, job_delete_options:nil, custom_headers:nil)
      response = delete_async(job_id, job_delete_options:job_delete_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes a Job.
    #
    # Deleting a Job also deletes all Tasks that are part of that Job, and all Job
    # statistics. This also overrides the retention period for Task data; that is,
    # if the Job contains Tasks which are still retained on Compute Nodes, the
    # Batch services deletes those Tasks' working directories and all their
    # contents.  When a Delete Job request is received, the Batch service sets the
    # Job to the deleting state. All update operations on a Job that is in deleting
    # state will fail with status code 409 (Conflict), with additional information
    # indicating that the Job is being deleted.
    #
    # @param job_id [String] The ID of the Job to delete.
    # @param job_delete_options [JobDeleteOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(job_id, job_delete_options:nil, custom_headers:nil)
      delete_async(job_id, job_delete_options:job_delete_options, custom_headers:custom_headers).value!
    end

    #
    # Deletes a Job.
    #
    # Deleting a Job also deletes all Tasks that are part of that Job, and all Job
    # statistics. This also overrides the retention period for Task data; that is,
    # if the Job contains Tasks which are still retained on Compute Nodes, the
    # Batch services deletes those Tasks' working directories and all their
    # contents.  When a Delete Job request is received, the Batch service sets the
    # Job to the deleting state. All update operations on a Job that is in deleting
    # state will fail with status code 409 (Conflict), with additional information
    # indicating that the Job is being deleted.
    #
    # @param job_id [String] The ID of the Job to delete.
    # @param job_delete_options [JobDeleteOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(job_id, job_delete_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_delete_options.nil?
        timeout = job_delete_options.timeout
      end
      unless job_delete_options.nil?
        client_request_id = job_delete_options.client_request_id
      end
      unless job_delete_options.nil?
        return_client_request_id = job_delete_options.return_client_request_id
      end
      unless job_delete_options.nil?
        ocp_date = job_delete_options.ocp_date
      end
      unless job_delete_options.nil?
        if_match = job_delete_options.if_match
      end
      unless job_delete_options.nil?
        if_none_match = job_delete_options.if_none_match
      end
      unless job_delete_options.nil?
        if_modified_since = job_delete_options.if_modified_since
      end
      unless job_delete_options.nil?
        if_unmodified_since = job_delete_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Gets information about the specified Job.
    #
    # @param job_id [String] The ID of the Job.
    # @param job_get_options [JobGetOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudJob] operation results.
    #
    def get(job_id, job_get_options:nil, custom_headers:nil)
      response = get_async(job_id, job_get_options:job_get_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about the specified Job.
    #
    # @param job_id [String] The ID of the Job.
    # @param job_get_options [JobGetOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(job_id, job_get_options:nil, custom_headers:nil)
      get_async(job_id, job_get_options:job_get_options, custom_headers:custom_headers).value!
    end

    #
    # Gets information about the specified Job.
    #
    # @param job_id [String] The ID of the Job.
    # @param job_get_options [JobGetOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(job_id, job_get_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      select = nil
      expand = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_get_options.nil?
        select = job_get_options.select
      end
      unless job_get_options.nil?
        expand = job_get_options.expand
      end
      unless job_get_options.nil?
        timeout = job_get_options.timeout
      end
      unless job_get_options.nil?
        client_request_id = job_get_options.client_request_id
      end
      unless job_get_options.nil?
        return_client_request_id = job_get_options.return_client_request_id
      end
      unless job_get_options.nil?
        ocp_date = job_get_options.ocp_date
      end
      unless job_get_options.nil?
        if_match = job_get_options.if_match
      end
      unless job_get_options.nil?
        if_none_match = job_get_options.if_none_match
      end
      unless job_get_options.nil?
        if_modified_since = job_get_options.if_modified_since
      end
      unless job_get_options.nil?
        if_unmodified_since = job_get_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'$select' => select,'$expand' => expand,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::CloudJob.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the properties of the specified Job.
    #
    # This replaces only the Job properties specified in the request. For example,
    # if the Job has constraints, and a request does not specify the constraints
    # element, then the Job keeps the existing constraints.
    #
    # @param job_id [String] The ID of the Job whose properties you want to update.
    # @param job_patch_parameter [JobPatchParameter] The parameters for the
    # request.
    # @param job_patch_options [JobPatchOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def patch(job_id, job_patch_parameter, job_patch_options:nil, custom_headers:nil)
      response = patch_async(job_id, job_patch_parameter, job_patch_options:job_patch_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Updates the properties of the specified Job.
    #
    # This replaces only the Job properties specified in the request. For example,
    # if the Job has constraints, and a request does not specify the constraints
    # element, then the Job keeps the existing constraints.
    #
    # @param job_id [String] The ID of the Job whose properties you want to update.
    # @param job_patch_parameter [JobPatchParameter] The parameters for the
    # request.
    # @param job_patch_options [JobPatchOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def patch_with_http_info(job_id, job_patch_parameter, job_patch_options:nil, custom_headers:nil)
      patch_async(job_id, job_patch_parameter, job_patch_options:job_patch_options, custom_headers:custom_headers).value!
    end

    #
    # Updates the properties of the specified Job.
    #
    # This replaces only the Job properties specified in the request. For example,
    # if the Job has constraints, and a request does not specify the constraints
    # element, then the Job keeps the existing constraints.
    #
    # @param job_id [String] The ID of the Job whose properties you want to update.
    # @param job_patch_parameter [JobPatchParameter] The parameters for the
    # request.
    # @param job_patch_options [JobPatchOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch_async(job_id, job_patch_parameter, job_patch_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'job_patch_parameter is nil' if job_patch_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_patch_options.nil?
        timeout = job_patch_options.timeout
      end
      unless job_patch_options.nil?
        client_request_id = job_patch_options.client_request_id
      end
      unless job_patch_options.nil?
        return_client_request_id = job_patch_options.return_client_request_id
      end
      unless job_patch_options.nil?
        ocp_date = job_patch_options.ocp_date
      end
      unless job_patch_options.nil?
        if_match = job_patch_options.if_match
      end
      unless job_patch_options.nil?
        if_none_match = job_patch_options.if_none_match
      end
      unless job_patch_options.nil?
        if_modified_since = job_patch_options.if_modified_since
      end
      unless job_patch_options.nil?
        if_unmodified_since = job_patch_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2019_06_01_9_0::Models::JobPatchParameter.mapper()
      request_content = @client.serialize(request_mapper,  job_patch_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobs/{jobId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Updates the properties of the specified Job.
    #
    # This fully replaces all the updatable properties of the Job. For example, if
    # the Job has constraints associated with it and if constraints is not
    # specified with this request, then the Batch service will remove the existing
    # constraints.
    #
    # @param job_id [String] The ID of the Job whose properties you want to update.
    # @param job_update_parameter [JobUpdateParameter] The parameters for the
    # request.
    # @param job_update_options [JobUpdateOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def update(job_id, job_update_parameter, job_update_options:nil, custom_headers:nil)
      response = update_async(job_id, job_update_parameter, job_update_options:job_update_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Updates the properties of the specified Job.
    #
    # This fully replaces all the updatable properties of the Job. For example, if
    # the Job has constraints associated with it and if constraints is not
    # specified with this request, then the Batch service will remove the existing
    # constraints.
    #
    # @param job_id [String] The ID of the Job whose properties you want to update.
    # @param job_update_parameter [JobUpdateParameter] The parameters for the
    # request.
    # @param job_update_options [JobUpdateOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_with_http_info(job_id, job_update_parameter, job_update_options:nil, custom_headers:nil)
      update_async(job_id, job_update_parameter, job_update_options:job_update_options, custom_headers:custom_headers).value!
    end

    #
    # Updates the properties of the specified Job.
    #
    # This fully replaces all the updatable properties of the Job. For example, if
    # the Job has constraints associated with it and if constraints is not
    # specified with this request, then the Batch service will remove the existing
    # constraints.
    #
    # @param job_id [String] The ID of the Job whose properties you want to update.
    # @param job_update_parameter [JobUpdateParameter] The parameters for the
    # request.
    # @param job_update_options [JobUpdateOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_async(job_id, job_update_parameter, job_update_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'job_update_parameter is nil' if job_update_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_update_options.nil?
        timeout = job_update_options.timeout
      end
      unless job_update_options.nil?
        client_request_id = job_update_options.client_request_id
      end
      unless job_update_options.nil?
        return_client_request_id = job_update_options.return_client_request_id
      end
      unless job_update_options.nil?
        ocp_date = job_update_options.ocp_date
      end
      unless job_update_options.nil?
        if_match = job_update_options.if_match
      end
      unless job_update_options.nil?
        if_none_match = job_update_options.if_none_match
      end
      unless job_update_options.nil?
        if_modified_since = job_update_options.if_modified_since
      end
      unless job_update_options.nil?
        if_unmodified_since = job_update_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2019_06_01_9_0::Models::JobUpdateParameter.mapper()
      request_content = @client.serialize(request_mapper,  job_update_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobs/{jobId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Disables the specified Job, preventing new Tasks from running.
    #
    # The Batch Service immediately moves the Job to the disabling state. Batch
    # then uses the disableTasks parameter to determine what to do with the
    # currently running Tasks of the Job. The Job remains in the disabling state
    # until the disable operation is completed and all Tasks have been dealt with
    # according to the disableTasks option; the Job then moves to the disabled
    # state. No new Tasks are started under the Job until it moves back to active
    # state. If you try to disable a Job that is in any state other than active,
    # disabling, or disabled, the request fails with status code 409.
    #
    # @param job_id [String] The ID of the Job to disable.
    # @param job_disable_parameter [JobDisableParameter] The parameters for the
    # request.
    # @param job_disable_options [JobDisableOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def disable(job_id, job_disable_parameter, job_disable_options:nil, custom_headers:nil)
      response = disable_async(job_id, job_disable_parameter, job_disable_options:job_disable_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Disables the specified Job, preventing new Tasks from running.
    #
    # The Batch Service immediately moves the Job to the disabling state. Batch
    # then uses the disableTasks parameter to determine what to do with the
    # currently running Tasks of the Job. The Job remains in the disabling state
    # until the disable operation is completed and all Tasks have been dealt with
    # according to the disableTasks option; the Job then moves to the disabled
    # state. No new Tasks are started under the Job until it moves back to active
    # state. If you try to disable a Job that is in any state other than active,
    # disabling, or disabled, the request fails with status code 409.
    #
    # @param job_id [String] The ID of the Job to disable.
    # @param job_disable_parameter [JobDisableParameter] The parameters for the
    # request.
    # @param job_disable_options [JobDisableOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def disable_with_http_info(job_id, job_disable_parameter, job_disable_options:nil, custom_headers:nil)
      disable_async(job_id, job_disable_parameter, job_disable_options:job_disable_options, custom_headers:custom_headers).value!
    end

    #
    # Disables the specified Job, preventing new Tasks from running.
    #
    # The Batch Service immediately moves the Job to the disabling state. Batch
    # then uses the disableTasks parameter to determine what to do with the
    # currently running Tasks of the Job. The Job remains in the disabling state
    # until the disable operation is completed and all Tasks have been dealt with
    # according to the disableTasks option; the Job then moves to the disabled
    # state. No new Tasks are started under the Job until it moves back to active
    # state. If you try to disable a Job that is in any state other than active,
    # disabling, or disabled, the request fails with status code 409.
    #
    # @param job_id [String] The ID of the Job to disable.
    # @param job_disable_parameter [JobDisableParameter] The parameters for the
    # request.
    # @param job_disable_options [JobDisableOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def disable_async(job_id, job_disable_parameter, job_disable_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'job_disable_parameter is nil' if job_disable_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_disable_options.nil?
        timeout = job_disable_options.timeout
      end
      unless job_disable_options.nil?
        client_request_id = job_disable_options.client_request_id
      end
      unless job_disable_options.nil?
        return_client_request_id = job_disable_options.return_client_request_id
      end
      unless job_disable_options.nil?
        ocp_date = job_disable_options.ocp_date
      end
      unless job_disable_options.nil?
        if_match = job_disable_options.if_match
      end
      unless job_disable_options.nil?
        if_none_match = job_disable_options.if_none_match
      end
      unless job_disable_options.nil?
        if_modified_since = job_disable_options.if_modified_since
      end
      unless job_disable_options.nil?
        if_unmodified_since = job_disable_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2019_06_01_9_0::Models::JobDisableParameter.mapper()
      request_content = @client.serialize(request_mapper,  job_disable_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobs/{jobId}/disable'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Enables the specified Job, allowing new Tasks to run.
    #
    # When you call this API, the Batch service sets a disabled Job to the enabling
    # state. After the this operation is completed, the Job moves to the active
    # state, and scheduling of new Tasks under the Job resumes. The Batch service
    # does not allow a Task to remain in the active state for more than 180 days.
    # Therefore, if you enable a Job containing active Tasks which were added more
    # than 180 days ago, those Tasks will not run.
    #
    # @param job_id [String] The ID of the Job to enable.
    # @param job_enable_options [JobEnableOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def enable(job_id, job_enable_options:nil, custom_headers:nil)
      response = enable_async(job_id, job_enable_options:job_enable_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Enables the specified Job, allowing new Tasks to run.
    #
    # When you call this API, the Batch service sets a disabled Job to the enabling
    # state. After the this operation is completed, the Job moves to the active
    # state, and scheduling of new Tasks under the Job resumes. The Batch service
    # does not allow a Task to remain in the active state for more than 180 days.
    # Therefore, if you enable a Job containing active Tasks which were added more
    # than 180 days ago, those Tasks will not run.
    #
    # @param job_id [String] The ID of the Job to enable.
    # @param job_enable_options [JobEnableOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def enable_with_http_info(job_id, job_enable_options:nil, custom_headers:nil)
      enable_async(job_id, job_enable_options:job_enable_options, custom_headers:custom_headers).value!
    end

    #
    # Enables the specified Job, allowing new Tasks to run.
    #
    # When you call this API, the Batch service sets a disabled Job to the enabling
    # state. After the this operation is completed, the Job moves to the active
    # state, and scheduling of new Tasks under the Job resumes. The Batch service
    # does not allow a Task to remain in the active state for more than 180 days.
    # Therefore, if you enable a Job containing active Tasks which were added more
    # than 180 days ago, those Tasks will not run.
    #
    # @param job_id [String] The ID of the Job to enable.
    # @param job_enable_options [JobEnableOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def enable_async(job_id, job_enable_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_enable_options.nil?
        timeout = job_enable_options.timeout
      end
      unless job_enable_options.nil?
        client_request_id = job_enable_options.client_request_id
      end
      unless job_enable_options.nil?
        return_client_request_id = job_enable_options.return_client_request_id
      end
      unless job_enable_options.nil?
        ocp_date = job_enable_options.ocp_date
      end
      unless job_enable_options.nil?
        if_match = job_enable_options.if_match
      end
      unless job_enable_options.nil?
        if_none_match = job_enable_options.if_none_match
      end
      unless job_enable_options.nil?
        if_modified_since = job_enable_options.if_modified_since
      end
      unless job_enable_options.nil?
        if_unmodified_since = job_enable_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/enable'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Terminates the specified Job, marking it as completed.
    #
    # When a Terminate Job request is received, the Batch service sets the Job to
    # the terminating state. The Batch service then terminates any running Tasks
    # associated with the Job and runs any required Job release Tasks. Then the Job
    # moves into the completed state. If there are any Tasks in the Job in the
    # active state, they will remain in the active state. Once a Job is terminated,
    # new Tasks cannot be added and any remaining active Tasks will not be
    # scheduled.
    #
    # @param job_id [String] The ID of the Job to terminate.
    # @param job_terminate_parameter [JobTerminateParameter] The parameters for the
    # request.
    # @param job_terminate_options [JobTerminateOptions] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def terminate(job_id, job_terminate_parameter:nil, job_terminate_options:nil, custom_headers:nil)
      response = terminate_async(job_id, job_terminate_parameter:job_terminate_parameter, job_terminate_options:job_terminate_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Terminates the specified Job, marking it as completed.
    #
    # When a Terminate Job request is received, the Batch service sets the Job to
    # the terminating state. The Batch service then terminates any running Tasks
    # associated with the Job and runs any required Job release Tasks. Then the Job
    # moves into the completed state. If there are any Tasks in the Job in the
    # active state, they will remain in the active state. Once a Job is terminated,
    # new Tasks cannot be added and any remaining active Tasks will not be
    # scheduled.
    #
    # @param job_id [String] The ID of the Job to terminate.
    # @param job_terminate_parameter [JobTerminateParameter] The parameters for the
    # request.
    # @param job_terminate_options [JobTerminateOptions] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def terminate_with_http_info(job_id, job_terminate_parameter:nil, job_terminate_options:nil, custom_headers:nil)
      terminate_async(job_id, job_terminate_parameter:job_terminate_parameter, job_terminate_options:job_terminate_options, custom_headers:custom_headers).value!
    end

    #
    # Terminates the specified Job, marking it as completed.
    #
    # When a Terminate Job request is received, the Batch service sets the Job to
    # the terminating state. The Batch service then terminates any running Tasks
    # associated with the Job and runs any required Job release Tasks. Then the Job
    # moves into the completed state. If there are any Tasks in the Job in the
    # active state, they will remain in the active state. Once a Job is terminated,
    # new Tasks cannot be added and any remaining active Tasks will not be
    # scheduled.
    #
    # @param job_id [String] The ID of the Job to terminate.
    # @param job_terminate_parameter [JobTerminateParameter] The parameters for the
    # request.
    # @param job_terminate_options [JobTerminateOptions] Additional parameters for
    # the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def terminate_async(job_id, job_terminate_parameter:nil, job_terminate_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_terminate_options.nil?
        timeout = job_terminate_options.timeout
      end
      unless job_terminate_options.nil?
        client_request_id = job_terminate_options.client_request_id
      end
      unless job_terminate_options.nil?
        return_client_request_id = job_terminate_options.return_client_request_id
      end
      unless job_terminate_options.nil?
        ocp_date = job_terminate_options.ocp_date
      end
      unless job_terminate_options.nil?
        if_match = job_terminate_options.if_match
      end
      unless job_terminate_options.nil?
        if_none_match = job_terminate_options.if_none_match
      end
      unless job_terminate_options.nil?
        if_modified_since = job_terminate_options.if_modified_since
      end
      unless job_terminate_options.nil?
        if_unmodified_since = job_terminate_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2019_06_01_9_0::Models::JobTerminateParameter.mapper()
      request_content = @client.serialize(request_mapper,  job_terminate_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobs/{jobId}/terminate'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Adds a Job to the specified Account.
    #
    # The Batch service supports two ways to control the work done as part of a
    # Job. In the first approach, the user specifies a Job Manager Task. The Batch
    # service launches this Task when it is ready to start the Job. The Job Manager
    # Task controls all other Tasks that run under this Job, by using the Task
    # APIs. In the second approach, the user directly controls the execution of
    # Tasks under an active Job, by using the Task APIs. Also note: when naming
    # Jobs, avoid including sensitive information such as user names or secret
    # project names. This information may appear in telemetry logs accessible to
    # Microsoft Support engineers.
    #
    # @param job [JobAddParameter] The Job to be added.
    # @param job_add_options [JobAddOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def add(job, job_add_options:nil, custom_headers:nil)
      response = add_async(job, job_add_options:job_add_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Adds a Job to the specified Account.
    #
    # The Batch service supports two ways to control the work done as part of a
    # Job. In the first approach, the user specifies a Job Manager Task. The Batch
    # service launches this Task when it is ready to start the Job. The Job Manager
    # Task controls all other Tasks that run under this Job, by using the Task
    # APIs. In the second approach, the user directly controls the execution of
    # Tasks under an active Job, by using the Task APIs. Also note: when naming
    # Jobs, avoid including sensitive information such as user names or secret
    # project names. This information may appear in telemetry logs accessible to
    # Microsoft Support engineers.
    #
    # @param job [JobAddParameter] The Job to be added.
    # @param job_add_options [JobAddOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_with_http_info(job, job_add_options:nil, custom_headers:nil)
      add_async(job, job_add_options:job_add_options, custom_headers:custom_headers).value!
    end

    #
    # Adds a Job to the specified Account.
    #
    # The Batch service supports two ways to control the work done as part of a
    # Job. In the first approach, the user specifies a Job Manager Task. The Batch
    # service launches this Task when it is ready to start the Job. The Job Manager
    # Task controls all other Tasks that run under this Job, by using the Task
    # APIs. In the second approach, the user directly controls the execution of
    # Tasks under an active Job, by using the Task APIs. Also note: when naming
    # Jobs, avoid including sensitive information such as user names or secret
    # project names. This information may appear in telemetry logs accessible to
    # Microsoft Support engineers.
    #
    # @param job [JobAddParameter] The Job to be added.
    # @param job_add_options [JobAddOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_async(job, job_add_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job is nil' if job.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_add_options.nil?
        timeout = job_add_options.timeout
      end
      unless job_add_options.nil?
        client_request_id = job_add_options.client_request_id
      end
      unless job_add_options.nil?
        return_client_request_id = job_add_options.return_client_request_id
      end
      unless job_add_options.nil?
        ocp_date = job_add_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2019_06_01_9_0::Models::JobAddParameter.mapper()
      request_content = @client.serialize(request_mapper,  job)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobs'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Lists all of the Jobs in the specified Account.
    #
    # @param job_list_options [JobListOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<CloudJob>] operation results.
    #
    def list(job_list_options:nil, custom_headers:nil)
      first_page = list_as_lazy(job_list_options:job_list_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Lists all of the Jobs in the specified Account.
    #
    # @param job_list_options [JobListOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(job_list_options:nil, custom_headers:nil)
      list_async(job_list_options:job_list_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the Jobs in the specified Account.
    #
    # @param job_list_options [JobListOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(job_list_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      filter = nil
      select = nil
      expand = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_list_options.nil?
        filter = job_list_options.filter
      end
      unless job_list_options.nil?
        select = job_list_options.select
      end
      unless job_list_options.nil?
        expand = job_list_options.expand
      end
      unless job_list_options.nil?
        max_results = job_list_options.maxResults
      end
      unless job_list_options.nil?
        timeout = job_list_options.timeout
      end
      unless job_list_options.nil?
        client_request_id = job_list_options.client_request_id
      end
      unless job_list_options.nil?
        return_client_request_id = job_list_options.return_client_request_id
      end
      unless job_list_options.nil?
        ocp_date = job_list_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'$filter' => filter,'$select' => select,'$expand' => expand,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::CloudJobListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists the Jobs that have been created under the specified Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule from which you
    # want to get a list of Jobs.
    # @param job_list_from_job_schedule_options [JobListFromJobScheduleOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<CloudJob>] operation results.
    #
    def list_from_job_schedule(job_schedule_id, job_list_from_job_schedule_options:nil, custom_headers:nil)
      first_page = list_from_job_schedule_as_lazy(job_schedule_id, job_list_from_job_schedule_options:job_list_from_job_schedule_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Lists the Jobs that have been created under the specified Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule from which you
    # want to get a list of Jobs.
    # @param job_list_from_job_schedule_options [JobListFromJobScheduleOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_from_job_schedule_with_http_info(job_schedule_id, job_list_from_job_schedule_options:nil, custom_headers:nil)
      list_from_job_schedule_async(job_schedule_id, job_list_from_job_schedule_options:job_list_from_job_schedule_options, custom_headers:custom_headers).value!
    end

    #
    # Lists the Jobs that have been created under the specified Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule from which you
    # want to get a list of Jobs.
    # @param job_list_from_job_schedule_options [JobListFromJobScheduleOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_from_job_schedule_async(job_schedule_id, job_list_from_job_schedule_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_schedule_id is nil' if job_schedule_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      filter = nil
      select = nil
      expand = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_list_from_job_schedule_options.nil?
        filter = job_list_from_job_schedule_options.filter
      end
      unless job_list_from_job_schedule_options.nil?
        select = job_list_from_job_schedule_options.select
      end
      unless job_list_from_job_schedule_options.nil?
        expand = job_list_from_job_schedule_options.expand
      end
      unless job_list_from_job_schedule_options.nil?
        max_results = job_list_from_job_schedule_options.maxResults
      end
      unless job_list_from_job_schedule_options.nil?
        timeout = job_list_from_job_schedule_options.timeout
      end
      unless job_list_from_job_schedule_options.nil?
        client_request_id = job_list_from_job_schedule_options.client_request_id
      end
      unless job_list_from_job_schedule_options.nil?
        return_client_request_id = job_list_from_job_schedule_options.return_client_request_id
      end
      unless job_list_from_job_schedule_options.nil?
        ocp_date = job_list_from_job_schedule_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobschedules/{jobScheduleId}/jobs'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobScheduleId' => job_schedule_id},
          query_params: {'api-version' => @client.api_version,'$filter' => filter,'$select' => select,'$expand' => expand,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::CloudJobListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists the execution status of the Job Preparation and Job Release Task for
    # the specified Job across the Compute Nodes where the Job has run.
    #
    # This API returns the Job Preparation and Job Release Task status on all
    # Compute Nodes that have run the Job Preparation or Job Release Task. This
    # includes Compute Nodes which have since been removed from the Pool. If this
    # API is invoked on a Job which has no Job Preparation or Job Release Task, the
    # Batch service returns HTTP status code 409 (Conflict) with an error code of
    # JobPreparationTaskNotSpecified.
    #
    # @param job_id [String] The ID of the Job.
    # @param job_list_preparation_and_release_task_status_options
    # [JobListPreparationAndReleaseTaskStatusOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<JobPreparationAndReleaseTaskExecutionInformation>] operation
    # results.
    #
    def list_preparation_and_release_task_status(job_id, job_list_preparation_and_release_task_status_options:nil, custom_headers:nil)
      first_page = list_preparation_and_release_task_status_as_lazy(job_id, job_list_preparation_and_release_task_status_options:job_list_preparation_and_release_task_status_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Lists the execution status of the Job Preparation and Job Release Task for
    # the specified Job across the Compute Nodes where the Job has run.
    #
    # This API returns the Job Preparation and Job Release Task status on all
    # Compute Nodes that have run the Job Preparation or Job Release Task. This
    # includes Compute Nodes which have since been removed from the Pool. If this
    # API is invoked on a Job which has no Job Preparation or Job Release Task, the
    # Batch service returns HTTP status code 409 (Conflict) with an error code of
    # JobPreparationTaskNotSpecified.
    #
    # @param job_id [String] The ID of the Job.
    # @param job_list_preparation_and_release_task_status_options
    # [JobListPreparationAndReleaseTaskStatusOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_preparation_and_release_task_status_with_http_info(job_id, job_list_preparation_and_release_task_status_options:nil, custom_headers:nil)
      list_preparation_and_release_task_status_async(job_id, job_list_preparation_and_release_task_status_options:job_list_preparation_and_release_task_status_options, custom_headers:custom_headers).value!
    end

    #
    # Lists the execution status of the Job Preparation and Job Release Task for
    # the specified Job across the Compute Nodes where the Job has run.
    #
    # This API returns the Job Preparation and Job Release Task status on all
    # Compute Nodes that have run the Job Preparation or Job Release Task. This
    # includes Compute Nodes which have since been removed from the Pool. If this
    # API is invoked on a Job which has no Job Preparation or Job Release Task, the
    # Batch service returns HTTP status code 409 (Conflict) with an error code of
    # JobPreparationTaskNotSpecified.
    #
    # @param job_id [String] The ID of the Job.
    # @param job_list_preparation_and_release_task_status_options
    # [JobListPreparationAndReleaseTaskStatusOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_preparation_and_release_task_status_async(job_id, job_list_preparation_and_release_task_status_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      filter = nil
      select = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_list_preparation_and_release_task_status_options.nil?
        filter = job_list_preparation_and_release_task_status_options.filter
      end
      unless job_list_preparation_and_release_task_status_options.nil?
        select = job_list_preparation_and_release_task_status_options.select
      end
      unless job_list_preparation_and_release_task_status_options.nil?
        max_results = job_list_preparation_and_release_task_status_options.maxResults
      end
      unless job_list_preparation_and_release_task_status_options.nil?
        timeout = job_list_preparation_and_release_task_status_options.timeout
      end
      unless job_list_preparation_and_release_task_status_options.nil?
        client_request_id = job_list_preparation_and_release_task_status_options.client_request_id
      end
      unless job_list_preparation_and_release_task_status_options.nil?
        return_client_request_id = job_list_preparation_and_release_task_status_options.return_client_request_id
      end
      unless job_list_preparation_and_release_task_status_options.nil?
        ocp_date = job_list_preparation_and_release_task_status_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/jobpreparationandreleasetaskstatus'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'$filter' => filter,'$select' => select,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::CloudJobListPreparationAndReleaseTaskStatusResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the Task counts for the specified Job.
    #
    # Task counts provide a count of the Tasks by active, running or completed Task
    # state, and a count of Tasks which succeeded or failed. Tasks in the preparing
    # state are counted as running.
    #
    # @param job_id [String] The ID of the Job.
    # @param job_get_task_counts_options [JobGetTaskCountsOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [TaskCounts] operation results.
    #
    def get_task_counts(job_id, job_get_task_counts_options:nil, custom_headers:nil)
      response = get_task_counts_async(job_id, job_get_task_counts_options:job_get_task_counts_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the Task counts for the specified Job.
    #
    # Task counts provide a count of the Tasks by active, running or completed Task
    # state, and a count of Tasks which succeeded or failed. Tasks in the preparing
    # state are counted as running.
    #
    # @param job_id [String] The ID of the Job.
    # @param job_get_task_counts_options [JobGetTaskCountsOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_task_counts_with_http_info(job_id, job_get_task_counts_options:nil, custom_headers:nil)
      get_task_counts_async(job_id, job_get_task_counts_options:job_get_task_counts_options, custom_headers:custom_headers).value!
    end

    #
    # Gets the Task counts for the specified Job.
    #
    # Task counts provide a count of the Tasks by active, running or completed Task
    # state, and a count of Tasks which succeeded or failed. Tasks in the preparing
    # state are counted as running.
    #
    # @param job_id [String] The ID of the Job.
    # @param job_get_task_counts_options [JobGetTaskCountsOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_task_counts_async(job_id, job_get_task_counts_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_get_task_counts_options.nil?
        timeout = job_get_task_counts_options.timeout
      end
      unless job_get_task_counts_options.nil?
        client_request_id = job_get_task_counts_options.client_request_id
      end
      unless job_get_task_counts_options.nil?
        return_client_request_id = job_get_task_counts_options.return_client_request_id
      end
      unless job_get_task_counts_options.nil?
        ocp_date = job_get_task_counts_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/taskcounts'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::TaskCounts.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all of the Jobs in the specified Account.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_list_next_options [JobListNextOptions] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudJobListResult] operation results.
    #
    def list_next(next_page_link, job_list_next_options:nil, custom_headers:nil)
      response = list_next_async(next_page_link, job_list_next_options:job_list_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all of the Jobs in the specified Account.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_list_next_options [JobListNextOptions] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, job_list_next_options:nil, custom_headers:nil)
      list_next_async(next_page_link, job_list_next_options:job_list_next_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the Jobs in the specified Account.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_list_next_options [JobListNextOptions] Additional parameters for
    # the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, job_list_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_list_next_options.nil?
        client_request_id = job_list_next_options.client_request_id
      end
      unless job_list_next_options.nil?
        return_client_request_id = job_list_next_options.return_client_request_id
      end
      unless job_list_next_options.nil?
        ocp_date = job_list_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::CloudJobListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists the Jobs that have been created under the specified Job Schedule.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_list_from_job_schedule_next_options
    # [JobListFromJobScheduleNextOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudJobListResult] operation results.
    #
    def list_from_job_schedule_next(next_page_link, job_list_from_job_schedule_next_options:nil, custom_headers:nil)
      response = list_from_job_schedule_next_async(next_page_link, job_list_from_job_schedule_next_options:job_list_from_job_schedule_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists the Jobs that have been created under the specified Job Schedule.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_list_from_job_schedule_next_options
    # [JobListFromJobScheduleNextOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_from_job_schedule_next_with_http_info(next_page_link, job_list_from_job_schedule_next_options:nil, custom_headers:nil)
      list_from_job_schedule_next_async(next_page_link, job_list_from_job_schedule_next_options:job_list_from_job_schedule_next_options, custom_headers:custom_headers).value!
    end

    #
    # Lists the Jobs that have been created under the specified Job Schedule.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_list_from_job_schedule_next_options
    # [JobListFromJobScheduleNextOptions] Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_from_job_schedule_next_async(next_page_link, job_list_from_job_schedule_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_list_from_job_schedule_next_options.nil?
        client_request_id = job_list_from_job_schedule_next_options.client_request_id
      end
      unless job_list_from_job_schedule_next_options.nil?
        return_client_request_id = job_list_from_job_schedule_next_options.return_client_request_id
      end
      unless job_list_from_job_schedule_next_options.nil?
        ocp_date = job_list_from_job_schedule_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::CloudJobListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists the execution status of the Job Preparation and Job Release Task for
    # the specified Job across the Compute Nodes where the Job has run.
    #
    # This API returns the Job Preparation and Job Release Task status on all
    # Compute Nodes that have run the Job Preparation or Job Release Task. This
    # includes Compute Nodes which have since been removed from the Pool. If this
    # API is invoked on a Job which has no Job Preparation or Job Release Task, the
    # Batch service returns HTTP status code 409 (Conflict) with an error code of
    # JobPreparationTaskNotSpecified.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_list_preparation_and_release_task_status_next_options
    # [JobListPreparationAndReleaseTaskStatusNextOptions] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudJobListPreparationAndReleaseTaskStatusResult] operation
    # results.
    #
    def list_preparation_and_release_task_status_next(next_page_link, job_list_preparation_and_release_task_status_next_options:nil, custom_headers:nil)
      response = list_preparation_and_release_task_status_next_async(next_page_link, job_list_preparation_and_release_task_status_next_options:job_list_preparation_and_release_task_status_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists the execution status of the Job Preparation and Job Release Task for
    # the specified Job across the Compute Nodes where the Job has run.
    #
    # This API returns the Job Preparation and Job Release Task status on all
    # Compute Nodes that have run the Job Preparation or Job Release Task. This
    # includes Compute Nodes which have since been removed from the Pool. If this
    # API is invoked on a Job which has no Job Preparation or Job Release Task, the
    # Batch service returns HTTP status code 409 (Conflict) with an error code of
    # JobPreparationTaskNotSpecified.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_list_preparation_and_release_task_status_next_options
    # [JobListPreparationAndReleaseTaskStatusNextOptions] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_preparation_and_release_task_status_next_with_http_info(next_page_link, job_list_preparation_and_release_task_status_next_options:nil, custom_headers:nil)
      list_preparation_and_release_task_status_next_async(next_page_link, job_list_preparation_and_release_task_status_next_options:job_list_preparation_and_release_task_status_next_options, custom_headers:custom_headers).value!
    end

    #
    # Lists the execution status of the Job Preparation and Job Release Task for
    # the specified Job across the Compute Nodes where the Job has run.
    #
    # This API returns the Job Preparation and Job Release Task status on all
    # Compute Nodes that have run the Job Preparation or Job Release Task. This
    # includes Compute Nodes which have since been removed from the Pool. If this
    # API is invoked on a Job which has no Job Preparation or Job Release Task, the
    # Batch service returns HTTP status code 409 (Conflict) with an error code of
    # JobPreparationTaskNotSpecified.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_list_preparation_and_release_task_status_next_options
    # [JobListPreparationAndReleaseTaskStatusNextOptions] Additional parameters for
    # the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_preparation_and_release_task_status_next_async(next_page_link, job_list_preparation_and_release_task_status_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_list_preparation_and_release_task_status_next_options.nil?
        client_request_id = job_list_preparation_and_release_task_status_next_options.client_request_id
      end
      unless job_list_preparation_and_release_task_status_next_options.nil?
        return_client_request_id = job_list_preparation_and_release_task_status_next_options.return_client_request_id
      end
      unless job_list_preparation_and_release_task_status_next_options.nil?
        ocp_date = job_list_preparation_and_release_task_status_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::CloudJobListPreparationAndReleaseTaskStatusResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all of the Jobs in the specified Account.
    #
    # @param job_list_options [JobListOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudJobListResult] which provide lazy access to pages of the
    # response.
    #
    def list_as_lazy(job_list_options:nil, custom_headers:nil)
      response = list_async(job_list_options:job_list_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          job_list_next_options = job_list_options
          list_next_async(next_page_link, job_list_next_options:job_list_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

    #
    # Lists the Jobs that have been created under the specified Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule from which you
    # want to get a list of Jobs.
    # @param job_list_from_job_schedule_options [JobListFromJobScheduleOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudJobListResult] which provide lazy access to pages of the
    # response.
    #
    def list_from_job_schedule_as_lazy(job_schedule_id, job_list_from_job_schedule_options:nil, custom_headers:nil)
      response = list_from_job_schedule_async(job_schedule_id, job_list_from_job_schedule_options:job_list_from_job_schedule_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          job_list_from_job_schedule_next_options = job_list_from_job_schedule_options
          list_from_job_schedule_next_async(next_page_link, job_list_from_job_schedule_next_options:job_list_from_job_schedule_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

    #
    # Lists the execution status of the Job Preparation and Job Release Task for
    # the specified Job across the Compute Nodes where the Job has run.
    #
    # This API returns the Job Preparation and Job Release Task status on all
    # Compute Nodes that have run the Job Preparation or Job Release Task. This
    # includes Compute Nodes which have since been removed from the Pool. If this
    # API is invoked on a Job which has no Job Preparation or Job Release Task, the
    # Batch service returns HTTP status code 409 (Conflict) with an error code of
    # JobPreparationTaskNotSpecified.
    #
    # @param job_id [String] The ID of the Job.
    # @param job_list_preparation_and_release_task_status_options
    # [JobListPreparationAndReleaseTaskStatusOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudJobListPreparationAndReleaseTaskStatusResult] which provide
    # lazy access to pages of the response.
    #
    def list_preparation_and_release_task_status_as_lazy(job_id, job_list_preparation_and_release_task_status_options:nil, custom_headers:nil)
      response = list_preparation_and_release_task_status_async(job_id, job_list_preparation_and_release_task_status_options:job_list_preparation_and_release_task_status_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          job_list_preparation_and_release_task_status_next_options = job_list_preparation_and_release_task_status_options
          list_preparation_and_release_task_status_next_async(next_page_link, job_list_preparation_and_release_task_status_next_options:job_list_preparation_and_release_task_status_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
