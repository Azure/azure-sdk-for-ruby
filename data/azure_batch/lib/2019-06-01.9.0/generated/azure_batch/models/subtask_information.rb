# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2019_06_01_9_0
  module Models
    #
    # Information about an Azure Batch subtask.
    #
    #
    class SubtaskInformation

      include MsRestAzure

      # @return [Integer] The ID of the subtask.
      attr_accessor :id

      # @return [ComputeNodeInformation] Information about the Compute Node on
      # which the subtask ran.
      attr_accessor :node_info

      # @return [DateTime] The time at which the subtask started running. If
      # the subtask has been restarted or retried, this is the most recent time
      # at which the subtask started running.
      attr_accessor :start_time

      # @return [DateTime] The time at which the subtask completed. This
      # property is set only if the subtask is in the Completed state.
      attr_accessor :end_time

      # @return [Integer] The exit code of the program specified on the subtask
      # command line. This property is set only if the subtask is in the
      # completed state. In general, the exit code for a process reflects the
      # specific convention implemented by the application developer for that
      # process. If you use the exit code value to make decisions in your code,
      # be sure that you know the exit code convention used by the application
      # process. However, if the Batch service terminates the subtask (due to
      # timeout, or user termination via the API) you may see an operating
      # system-defined exit code.
      attr_accessor :exit_code

      # @return [TaskContainerExecutionInformation] Information about the
      # container under which the Task is executing. This property is set only
      # if the Task runs in a container context.
      attr_accessor :container_info

      # @return [TaskFailureInformation] Information describing the Task
      # failure, if any. This property is set only if the Task is in the
      # completed state and encountered a failure.
      attr_accessor :failure_info

      # @return [SubtaskState] The current state of the subtask. Possible
      # values include: 'preparing', 'running', 'completed'
      attr_accessor :state

      # @return [DateTime] The time at which the subtask entered its current
      # state.
      attr_accessor :state_transition_time

      # @return [SubtaskState] The previous state of the subtask. This property
      # is not set if the subtask is in its initial running state. Possible
      # values include: 'preparing', 'running', 'completed'
      attr_accessor :previous_state

      # @return [DateTime] The time at which the subtask entered its previous
      # state. This property is not set if the subtask is in its initial
      # running state.
      attr_accessor :previous_state_transition_time

      # @return [TaskExecutionResult] The result of the Task execution. If the
      # value is 'failed', then the details of the failure can be found in the
      # failureInfo property. Possible values include: 'success', 'failure'
      attr_accessor :result


      #
      # Mapper for SubtaskInformation class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'SubtaskInformation',
          type: {
            name: 'Composite',
            class_name: 'SubtaskInformation',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'id',
                type: {
                  name: 'Number'
                }
              },
              node_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'nodeInfo',
                type: {
                  name: 'Composite',
                  class_name: 'ComputeNodeInformation'
                }
              },
              start_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'startTime',
                type: {
                  name: 'DateTime'
                }
              },
              end_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'endTime',
                type: {
                  name: 'DateTime'
                }
              },
              exit_code: {
                client_side_validation: true,
                required: false,
                serialized_name: 'exitCode',
                type: {
                  name: 'Number'
                }
              },
              container_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'containerInfo',
                type: {
                  name: 'Composite',
                  class_name: 'TaskContainerExecutionInformation'
                }
              },
              failure_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'failureInfo',
                type: {
                  name: 'Composite',
                  class_name: 'TaskFailureInformation'
                }
              },
              state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'state',
                type: {
                  name: 'Enum',
                  module: 'SubtaskState'
                }
              },
              state_transition_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'stateTransitionTime',
                type: {
                  name: 'DateTime'
                }
              },
              previous_state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'previousState',
                type: {
                  name: 'Enum',
                  module: 'SubtaskState'
                }
              },
              previous_state_transition_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'previousStateTransitionTime',
                type: {
                  name: 'DateTime'
                }
              },
              result: {
                client_side_validation: true,
                required: false,
                serialized_name: 'result',
                type: {
                  name: 'Enum',
                  module: 'TaskExecutionResult'
                }
              }
            }
          }
        }
      end
    end
  end
end
