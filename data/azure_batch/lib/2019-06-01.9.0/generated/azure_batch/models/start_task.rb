# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2019_06_01_9_0
  module Models
    #
    # A Task which is run when a Node joins a Pool in the Azure Batch service,
    # or when the Compute Node is rebooted or reimaged.

    # Batch will retry Tasks when a recovery operation is triggered on a Node.
    # Examples of recovery operations include (but are not limited to) when an
    # unhealthy Node is rebooted or a Compute Node disappeared due to host
    # failure. Retries due to recovery operations are independent of and are
    # not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount
    # is 0, an internal retry due to a recovery operation may occur. Because of
    # this, all Tasks should be idempotent. This means Tasks need to tolerate
    # being interrupted and restarted without causing any corruption or
    # duplicate data. The best practice for long running Tasks is to use some
    # form of checkpointing. In some cases the start Task may be re-run even
    # though the Compute Node was not rebooted. Special care should be taken to
    # avoid start Tasks which create breakaway process or install/launch
    # services from the start Task working directory, as this will block Batch
    # from being able to re-run the start Task.
    #
    class StartTask

      include MsRestAzure

      # @return [String] The command line of the start Task. The command line
      # does not run under a shell, and therefore cannot take advantage of
      # shell features such as environment variable expansion. If you want to
      # take advantage of such features, you should invoke the shell in the
      # command line, for example using "cmd /c MyCommand" in Windows or
      # "/bin/sh -c MyCommand" in Linux. If the command line refers to file
      # paths, it should use a relative path (relative to the Task working
      # directory), or use the Batch provided environment variable
      # (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
      attr_accessor :command_line

      # @return [TaskContainerSettings] The settings for the container under
      # which the start Task runs. When this is specified, all directories
      # recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch
      # directories on the node) are mapped into the container, all Task
      # environment variables are mapped into the container, and the Task
      # command line is executed in the container. Files produced in the
      # container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to
      # the host disk, meaning that Batch file APIs will not be able to access
      # those files.
      attr_accessor :container_settings

      # @return [Array<ResourceFile>] A list of files that the Batch service
      # will download to the Compute Node before running the command line.
      # There is a maximum size for the list of resource files. When the max
      # size is exceeded, the request will fail and the response error code
      # will be RequestEntityTooLarge. If this occurs, the collection of
      # ResourceFiles must be reduced in size. This can be achieved using .zip
      # files, Application Packages, or Docker Containers. Files listed under
      # this element are located in the Task's working directory.
      attr_accessor :resource_files

      # @return [Array<EnvironmentSetting>] A list of environment variable
      # settings for the start Task.
      attr_accessor :environment_settings

      # @return [UserIdentity] The user identity under which the start Task
      # runs. If omitted, the Task runs as a non-administrative user unique to
      # the Task.
      attr_accessor :user_identity

      # @return [Integer] The maximum number of times the Task may be retried.
      # The Batch service retries a Task if its exit code is nonzero. Note that
      # this value specifically controls the number of retries. The Batch
      # service will try the Task once, and may then retry up to this limit.
      # For example, if the maximum retry count is 3, Batch tries the Task up
      # to 4 times (one initial try and 3 retries). If the maximum retry count
      # is 0, the Batch service does not retry the Task. If the maximum retry
      # count is -1, the Batch service retries the Task without limit.
      attr_accessor :max_task_retry_count

      # @return [Boolean] Whether the Batch service should wait for the start
      # Task to complete successfully (that is, to exit with exit code 0)
      # before scheduling any Tasks on the Compute Node. If true and the start
      # Task fails on a Node, the Batch service retries the start Task up to
      # its maximum retry count (maxTaskRetryCount). If the Task has still not
      # completed successfully after all retries, then the Batch service marks
      # the Node unusable, and will not schedule Tasks to it. This condition
      # can be detected via the Compute Node state and failure info details. If
      # false, the Batch service will not wait for the start Task to complete.
      # In this case, other Tasks can start executing on the Compute Node while
      # the start Task is still running; and even if the start Task fails, new
      # Tasks will continue to be scheduled on the Compute Node. The default is
      # false.
      attr_accessor :wait_for_success


      #
      # Mapper for StartTask class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'StartTask',
          type: {
            name: 'Composite',
            class_name: 'StartTask',
            model_properties: {
              command_line: {
                client_side_validation: true,
                required: true,
                serialized_name: 'commandLine',
                type: {
                  name: 'String'
                }
              },
              container_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'containerSettings',
                type: {
                  name: 'Composite',
                  class_name: 'TaskContainerSettings'
                }
              },
              resource_files: {
                client_side_validation: true,
                required: false,
                serialized_name: 'resourceFiles',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ResourceFileElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ResourceFile'
                      }
                  }
                }
              },
              environment_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'environmentSettings',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'EnvironmentSettingElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'EnvironmentSetting'
                      }
                  }
                }
              },
              user_identity: {
                client_side_validation: true,
                required: false,
                serialized_name: 'userIdentity',
                type: {
                  name: 'Composite',
                  class_name: 'UserIdentity'
                }
              },
              max_task_retry_count: {
                client_side_validation: true,
                required: false,
                serialized_name: 'maxTaskRetryCount',
                type: {
                  name: 'Number'
                }
              },
              wait_for_success: {
                client_side_validation: true,
                required: false,
                serialized_name: 'waitForSuccess',
                type: {
                  name: 'Boolean'
                }
              }
            }
          }
        }
      end
    end
  end
end
