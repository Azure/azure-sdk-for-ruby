# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2019_06_01_9_0
  module Models
    #
    # An Azure Batch Job to add.
    #
    #
    class JobAddParameter

      include MsRestAzure

      # @return [String] A string that uniquely identifies the Job within the
      # Account. The ID can contain any combination of alphanumeric characters
      # including hyphens and underscores, and cannot contain more than 64
      # characters. The ID is case-preserving and case-insensitive (that is,
      # you may not have two IDs within an Account that differ only by case).
      attr_accessor :id

      # @return [String] The display name for the Job. The display name need
      # not be unique and can contain any Unicode characters up to a maximum
      # length of 1024.
      attr_accessor :display_name

      # @return [Integer] The priority of the Job. Priority values can range
      # from -1000 to 1000, with -1000 being the lowest priority and 1000 being
      # the highest priority. The default value is 0.
      attr_accessor :priority

      # @return [JobConstraints] The execution constraints for the Job.
      attr_accessor :constraints

      # @return [JobManagerTask] Details of a Job Manager Task to be launched
      # when the Job is started. If the Job does not specify a Job Manager
      # Task, the user must explicitly add Tasks to the Job. If the Job does
      # specify a Job Manager Task, the Batch service creates the Job Manager
      # Task when the Job is created, and will try to schedule the Job Manager
      # Task before scheduling other Tasks in the Job. The Job Manager Task's
      # typical purpose is to control and/or monitor Job execution, for example
      # by deciding what additional Tasks to run, determining when the work is
      # complete, etc. (However, a Job Manager Task is not restricted to these
      # activities - it is a fully-fledged Task in the system and perform
      # whatever actions are required for the Job.) For example, a Job Manager
      # Task might download a file specified as a parameter, analyze the
      # contents of that file and submit additional Tasks based on those
      # contents.
      attr_accessor :job_manager_task

      # @return [JobPreparationTask] The Job Preparation Task. If a Job has a
      # Job Preparation Task, the Batch service will run the Job Preparation
      # Task on a Node before starting any Tasks of that Job on that Compute
      # Node.
      attr_accessor :job_preparation_task

      # @return [JobReleaseTask] The Job Release Task. A Job Release Task
      # cannot be specified without also specifying a Job Preparation Task for
      # the Job. The Batch service runs the Job Release Task on the Nodes that
      # have run the Job Preparation Task. The primary purpose of the Job
      # Release Task is to undo changes to Compute Nodes made by the Job
      # Preparation Task. Example activities include deleting local files, or
      # shutting down services that were started as part of Job preparation.
      attr_accessor :job_release_task

      # @return [Array<EnvironmentSetting>] The list of common environment
      # variable settings. These environment variables are set for all Tasks in
      # the Job (including the Job Manager, Job Preparation and Job Release
      # Tasks). Individual Tasks can override an environment setting specified
      # here by specifying the same setting name with a different value.
      attr_accessor :common_environment_settings

      # @return [PoolInformation] The Pool on which the Batch service runs the
      # Job's Tasks.
      attr_accessor :pool_info

      # @return [OnAllTasksComplete] The action the Batch service should take
      # when all Tasks in the Job are in the completed state. Note that if a
      # Job contains no Tasks, then all Tasks are considered complete. This
      # option is therefore most commonly used with a Job Manager task; if you
      # want to use automatic Job termination without a Job Manager, you should
      # initially set onAllTasksComplete to noaction and update the Job
      # properties to set onAllTasksComplete to terminatejob once you have
      # finished adding Tasks. The default is noaction. Possible values
      # include: 'noAction', 'terminateJob'
      attr_accessor :on_all_tasks_complete

      # @return [OnTaskFailure] The action the Batch service should take when
      # any Task in the Job fails. A Task is considered to have failed if has a
      # failureInfo. A failureInfo is set if the Task completes with a non-zero
      # exit code after exhausting its retry count, or if there was an error
      # starting the Task, for example due to a resource file download error.
      # The default is noaction. Possible values include: 'noAction',
      # 'performExitOptionsJobAction'
      attr_accessor :on_task_failure

      # @return [Array<MetadataItem>] A list of name-value pairs associated
      # with the Job as metadata. The Batch service does not assign any meaning
      # to metadata; it is solely for the use of user code.
      attr_accessor :metadata

      # @return [Boolean] Whether Tasks in the Job can define dependencies on
      # each other. The default is false.
      attr_accessor :uses_task_dependencies

      # @return [JobNetworkConfiguration] The network configuration for the
      # Job.
      attr_accessor :network_configuration


      #
      # Mapper for JobAddParameter class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'JobAddParameter',
          type: {
            name: 'Composite',
            class_name: 'JobAddParameter',
            model_properties: {
              id: {
                client_side_validation: true,
                required: true,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              display_name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'displayName',
                type: {
                  name: 'String'
                }
              },
              priority: {
                client_side_validation: true,
                required: false,
                serialized_name: 'priority',
                type: {
                  name: 'Number'
                }
              },
              constraints: {
                client_side_validation: true,
                required: false,
                serialized_name: 'constraints',
                type: {
                  name: 'Composite',
                  class_name: 'JobConstraints'
                }
              },
              job_manager_task: {
                client_side_validation: true,
                required: false,
                serialized_name: 'jobManagerTask',
                type: {
                  name: 'Composite',
                  class_name: 'JobManagerTask'
                }
              },
              job_preparation_task: {
                client_side_validation: true,
                required: false,
                serialized_name: 'jobPreparationTask',
                type: {
                  name: 'Composite',
                  class_name: 'JobPreparationTask'
                }
              },
              job_release_task: {
                client_side_validation: true,
                required: false,
                serialized_name: 'jobReleaseTask',
                type: {
                  name: 'Composite',
                  class_name: 'JobReleaseTask'
                }
              },
              common_environment_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'commonEnvironmentSettings',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'EnvironmentSettingElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'EnvironmentSetting'
                      }
                  }
                }
              },
              pool_info: {
                client_side_validation: true,
                required: true,
                serialized_name: 'poolInfo',
                default_value: {},
                type: {
                  name: 'Composite',
                  class_name: 'PoolInformation'
                }
              },
              on_all_tasks_complete: {
                client_side_validation: true,
                required: false,
                serialized_name: 'onAllTasksComplete',
                type: {
                  name: 'Enum',
                  module: 'OnAllTasksComplete'
                }
              },
              on_task_failure: {
                client_side_validation: true,
                required: false,
                serialized_name: 'onTaskFailure',
                type: {
                  name: 'Enum',
                  module: 'OnTaskFailure'
                }
              },
              metadata: {
                client_side_validation: true,
                required: false,
                serialized_name: 'metadata',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'MetadataItemElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'MetadataItem'
                      }
                  }
                }
              },
              uses_task_dependencies: {
                client_side_validation: true,
                required: false,
                serialized_name: 'usesTaskDependencies',
                type: {
                  name: 'Boolean'
                }
              },
              network_configuration: {
                client_side_validation: true,
                required: false,
                serialized_name: 'networkConfiguration',
                type: {
                  name: 'Composite',
                  class_name: 'JobNetworkConfiguration'
                }
              }
            }
          }
        }
      end
    end
  end
end
