# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2019_06_01_9_0
  #
  # A client for issuing REST requests to the Azure Batch service.
  #
  class JobSchedule
    include MsRestAzure

    #
    # Creates and initializes a new instance of the JobSchedule class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [BatchServiceClient] reference to the BatchServiceClient
    attr_reader :client

    #
    # Checks the specified Job Schedule exists.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule which you want to
    # check.
    # @param job_schedule_exists_options [JobScheduleExistsOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Boolean] operation results.
    #
    def exists(job_schedule_id, job_schedule_exists_options:nil, custom_headers:nil)
      response = exists_async(job_schedule_id, job_schedule_exists_options:job_schedule_exists_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Checks the specified Job Schedule exists.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule which you want to
    # check.
    # @param job_schedule_exists_options [JobScheduleExistsOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def exists_with_http_info(job_schedule_id, job_schedule_exists_options:nil, custom_headers:nil)
      exists_async(job_schedule_id, job_schedule_exists_options:job_schedule_exists_options, custom_headers:custom_headers).value!
    end

    #
    # Checks the specified Job Schedule exists.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule which you want to
    # check.
    # @param job_schedule_exists_options [JobScheduleExistsOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def exists_async(job_schedule_id, job_schedule_exists_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_schedule_id is nil' if job_schedule_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_schedule_exists_options.nil?
        timeout = job_schedule_exists_options.timeout
      end
      unless job_schedule_exists_options.nil?
        client_request_id = job_schedule_exists_options.client_request_id
      end
      unless job_schedule_exists_options.nil?
        return_client_request_id = job_schedule_exists_options.return_client_request_id
      end
      unless job_schedule_exists_options.nil?
        ocp_date = job_schedule_exists_options.ocp_date
      end
      unless job_schedule_exists_options.nil?
        if_match = job_schedule_exists_options.if_match
      end
      unless job_schedule_exists_options.nil?
        if_none_match = job_schedule_exists_options.if_none_match
      end
      unless job_schedule_exists_options.nil?
        if_modified_since = job_schedule_exists_options.if_modified_since
      end
      unless job_schedule_exists_options.nil?
        if_unmodified_since = job_schedule_exists_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobschedules/{jobScheduleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobScheduleId' => job_schedule_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.body = (status_code == 200)
        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Deletes a Job Schedule from the specified Account.
    #
    # When you delete a Job Schedule, this also deletes all Jobs and Tasks under
    # that schedule. When Tasks are deleted, all the files in their working
    # directories on the Compute Nodes are also deleted (the retention period is
    # ignored). The Job Schedule statistics are no longer accessible once the Job
    # Schedule is deleted, though they are still counted towards Account lifetime
    # statistics.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to delete.
    # @param job_schedule_delete_options [JobScheduleDeleteOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete(job_schedule_id, job_schedule_delete_options:nil, custom_headers:nil)
      response = delete_async(job_schedule_id, job_schedule_delete_options:job_schedule_delete_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes a Job Schedule from the specified Account.
    #
    # When you delete a Job Schedule, this also deletes all Jobs and Tasks under
    # that schedule. When Tasks are deleted, all the files in their working
    # directories on the Compute Nodes are also deleted (the retention period is
    # ignored). The Job Schedule statistics are no longer accessible once the Job
    # Schedule is deleted, though they are still counted towards Account lifetime
    # statistics.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to delete.
    # @param job_schedule_delete_options [JobScheduleDeleteOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(job_schedule_id, job_schedule_delete_options:nil, custom_headers:nil)
      delete_async(job_schedule_id, job_schedule_delete_options:job_schedule_delete_options, custom_headers:custom_headers).value!
    end

    #
    # Deletes a Job Schedule from the specified Account.
    #
    # When you delete a Job Schedule, this also deletes all Jobs and Tasks under
    # that schedule. When Tasks are deleted, all the files in their working
    # directories on the Compute Nodes are also deleted (the retention period is
    # ignored). The Job Schedule statistics are no longer accessible once the Job
    # Schedule is deleted, though they are still counted towards Account lifetime
    # statistics.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to delete.
    # @param job_schedule_delete_options [JobScheduleDeleteOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(job_schedule_id, job_schedule_delete_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_schedule_id is nil' if job_schedule_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_schedule_delete_options.nil?
        timeout = job_schedule_delete_options.timeout
      end
      unless job_schedule_delete_options.nil?
        client_request_id = job_schedule_delete_options.client_request_id
      end
      unless job_schedule_delete_options.nil?
        return_client_request_id = job_schedule_delete_options.return_client_request_id
      end
      unless job_schedule_delete_options.nil?
        ocp_date = job_schedule_delete_options.ocp_date
      end
      unless job_schedule_delete_options.nil?
        if_match = job_schedule_delete_options.if_match
      end
      unless job_schedule_delete_options.nil?
        if_none_match = job_schedule_delete_options.if_none_match
      end
      unless job_schedule_delete_options.nil?
        if_modified_since = job_schedule_delete_options.if_modified_since
      end
      unless job_schedule_delete_options.nil?
        if_unmodified_since = job_schedule_delete_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobschedules/{jobScheduleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobScheduleId' => job_schedule_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Gets information about the specified Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to get.
    # @param job_schedule_get_options [JobScheduleGetOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudJobSchedule] operation results.
    #
    def get(job_schedule_id, job_schedule_get_options:nil, custom_headers:nil)
      response = get_async(job_schedule_id, job_schedule_get_options:job_schedule_get_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about the specified Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to get.
    # @param job_schedule_get_options [JobScheduleGetOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(job_schedule_id, job_schedule_get_options:nil, custom_headers:nil)
      get_async(job_schedule_id, job_schedule_get_options:job_schedule_get_options, custom_headers:custom_headers).value!
    end

    #
    # Gets information about the specified Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to get.
    # @param job_schedule_get_options [JobScheduleGetOptions] Additional parameters
    # for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(job_schedule_id, job_schedule_get_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_schedule_id is nil' if job_schedule_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      select = nil
      expand = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_schedule_get_options.nil?
        select = job_schedule_get_options.select
      end
      unless job_schedule_get_options.nil?
        expand = job_schedule_get_options.expand
      end
      unless job_schedule_get_options.nil?
        timeout = job_schedule_get_options.timeout
      end
      unless job_schedule_get_options.nil?
        client_request_id = job_schedule_get_options.client_request_id
      end
      unless job_schedule_get_options.nil?
        return_client_request_id = job_schedule_get_options.return_client_request_id
      end
      unless job_schedule_get_options.nil?
        ocp_date = job_schedule_get_options.ocp_date
      end
      unless job_schedule_get_options.nil?
        if_match = job_schedule_get_options.if_match
      end
      unless job_schedule_get_options.nil?
        if_none_match = job_schedule_get_options.if_none_match
      end
      unless job_schedule_get_options.nil?
        if_modified_since = job_schedule_get_options.if_modified_since
      end
      unless job_schedule_get_options.nil?
        if_unmodified_since = job_schedule_get_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobschedules/{jobScheduleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobScheduleId' => job_schedule_id},
          query_params: {'api-version' => @client.api_version,'$select' => select,'$expand' => expand,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::CloudJobSchedule.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the properties of the specified Job Schedule.
    #
    # This replaces only the Job Schedule properties specified in the request. For
    # example, if the schedule property is not specified with this request, then
    # the Batch service will keep the existing schedule. Changes to a Job Schedule
    # only impact Jobs created by the schedule after the update has taken place;
    # currently running Jobs are unaffected.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to update.
    # @param job_schedule_patch_parameter [JobSchedulePatchParameter] The
    # parameters for the request.
    # @param job_schedule_patch_options [JobSchedulePatchOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def patch(job_schedule_id, job_schedule_patch_parameter, job_schedule_patch_options:nil, custom_headers:nil)
      response = patch_async(job_schedule_id, job_schedule_patch_parameter, job_schedule_patch_options:job_schedule_patch_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Updates the properties of the specified Job Schedule.
    #
    # This replaces only the Job Schedule properties specified in the request. For
    # example, if the schedule property is not specified with this request, then
    # the Batch service will keep the existing schedule. Changes to a Job Schedule
    # only impact Jobs created by the schedule after the update has taken place;
    # currently running Jobs are unaffected.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to update.
    # @param job_schedule_patch_parameter [JobSchedulePatchParameter] The
    # parameters for the request.
    # @param job_schedule_patch_options [JobSchedulePatchOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def patch_with_http_info(job_schedule_id, job_schedule_patch_parameter, job_schedule_patch_options:nil, custom_headers:nil)
      patch_async(job_schedule_id, job_schedule_patch_parameter, job_schedule_patch_options:job_schedule_patch_options, custom_headers:custom_headers).value!
    end

    #
    # Updates the properties of the specified Job Schedule.
    #
    # This replaces only the Job Schedule properties specified in the request. For
    # example, if the schedule property is not specified with this request, then
    # the Batch service will keep the existing schedule. Changes to a Job Schedule
    # only impact Jobs created by the schedule after the update has taken place;
    # currently running Jobs are unaffected.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to update.
    # @param job_schedule_patch_parameter [JobSchedulePatchParameter] The
    # parameters for the request.
    # @param job_schedule_patch_options [JobSchedulePatchOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch_async(job_schedule_id, job_schedule_patch_parameter, job_schedule_patch_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_schedule_id is nil' if job_schedule_id.nil?
      fail ArgumentError, 'job_schedule_patch_parameter is nil' if job_schedule_patch_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_schedule_patch_options.nil?
        timeout = job_schedule_patch_options.timeout
      end
      unless job_schedule_patch_options.nil?
        client_request_id = job_schedule_patch_options.client_request_id
      end
      unless job_schedule_patch_options.nil?
        return_client_request_id = job_schedule_patch_options.return_client_request_id
      end
      unless job_schedule_patch_options.nil?
        ocp_date = job_schedule_patch_options.ocp_date
      end
      unless job_schedule_patch_options.nil?
        if_match = job_schedule_patch_options.if_match
      end
      unless job_schedule_patch_options.nil?
        if_none_match = job_schedule_patch_options.if_none_match
      end
      unless job_schedule_patch_options.nil?
        if_modified_since = job_schedule_patch_options.if_modified_since
      end
      unless job_schedule_patch_options.nil?
        if_unmodified_since = job_schedule_patch_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2019_06_01_9_0::Models::JobSchedulePatchParameter.mapper()
      request_content = @client.serialize(request_mapper,  job_schedule_patch_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobschedules/{jobScheduleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobScheduleId' => job_schedule_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Updates the properties of the specified Job Schedule.
    #
    # This fully replaces all the updatable properties of the Job Schedule. For
    # example, if the schedule property is not specified with this request, then
    # the Batch service will remove the existing schedule. Changes to a Job
    # Schedule only impact Jobs created by the schedule after the update has taken
    # place; currently running Jobs are unaffected.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to update.
    # @param job_schedule_update_parameter [JobScheduleUpdateParameter] The
    # parameters for the request.
    # @param job_schedule_update_options [JobScheduleUpdateOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def update(job_schedule_id, job_schedule_update_parameter, job_schedule_update_options:nil, custom_headers:nil)
      response = update_async(job_schedule_id, job_schedule_update_parameter, job_schedule_update_options:job_schedule_update_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Updates the properties of the specified Job Schedule.
    #
    # This fully replaces all the updatable properties of the Job Schedule. For
    # example, if the schedule property is not specified with this request, then
    # the Batch service will remove the existing schedule. Changes to a Job
    # Schedule only impact Jobs created by the schedule after the update has taken
    # place; currently running Jobs are unaffected.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to update.
    # @param job_schedule_update_parameter [JobScheduleUpdateParameter] The
    # parameters for the request.
    # @param job_schedule_update_options [JobScheduleUpdateOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_with_http_info(job_schedule_id, job_schedule_update_parameter, job_schedule_update_options:nil, custom_headers:nil)
      update_async(job_schedule_id, job_schedule_update_parameter, job_schedule_update_options:job_schedule_update_options, custom_headers:custom_headers).value!
    end

    #
    # Updates the properties of the specified Job Schedule.
    #
    # This fully replaces all the updatable properties of the Job Schedule. For
    # example, if the schedule property is not specified with this request, then
    # the Batch service will remove the existing schedule. Changes to a Job
    # Schedule only impact Jobs created by the schedule after the update has taken
    # place; currently running Jobs are unaffected.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to update.
    # @param job_schedule_update_parameter [JobScheduleUpdateParameter] The
    # parameters for the request.
    # @param job_schedule_update_options [JobScheduleUpdateOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_async(job_schedule_id, job_schedule_update_parameter, job_schedule_update_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_schedule_id is nil' if job_schedule_id.nil?
      fail ArgumentError, 'job_schedule_update_parameter is nil' if job_schedule_update_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_schedule_update_options.nil?
        timeout = job_schedule_update_options.timeout
      end
      unless job_schedule_update_options.nil?
        client_request_id = job_schedule_update_options.client_request_id
      end
      unless job_schedule_update_options.nil?
        return_client_request_id = job_schedule_update_options.return_client_request_id
      end
      unless job_schedule_update_options.nil?
        ocp_date = job_schedule_update_options.ocp_date
      end
      unless job_schedule_update_options.nil?
        if_match = job_schedule_update_options.if_match
      end
      unless job_schedule_update_options.nil?
        if_none_match = job_schedule_update_options.if_none_match
      end
      unless job_schedule_update_options.nil?
        if_modified_since = job_schedule_update_options.if_modified_since
      end
      unless job_schedule_update_options.nil?
        if_unmodified_since = job_schedule_update_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2019_06_01_9_0::Models::JobScheduleUpdateParameter.mapper()
      request_content = @client.serialize(request_mapper,  job_schedule_update_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobschedules/{jobScheduleId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobScheduleId' => job_schedule_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Disables a Job Schedule.
    #
    # No new Jobs will be created until the Job Schedule is enabled again.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to disable.
    # @param job_schedule_disable_options [JobScheduleDisableOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def disable(job_schedule_id, job_schedule_disable_options:nil, custom_headers:nil)
      response = disable_async(job_schedule_id, job_schedule_disable_options:job_schedule_disable_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Disables a Job Schedule.
    #
    # No new Jobs will be created until the Job Schedule is enabled again.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to disable.
    # @param job_schedule_disable_options [JobScheduleDisableOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def disable_with_http_info(job_schedule_id, job_schedule_disable_options:nil, custom_headers:nil)
      disable_async(job_schedule_id, job_schedule_disable_options:job_schedule_disable_options, custom_headers:custom_headers).value!
    end

    #
    # Disables a Job Schedule.
    #
    # No new Jobs will be created until the Job Schedule is enabled again.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to disable.
    # @param job_schedule_disable_options [JobScheduleDisableOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def disable_async(job_schedule_id, job_schedule_disable_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_schedule_id is nil' if job_schedule_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_schedule_disable_options.nil?
        timeout = job_schedule_disable_options.timeout
      end
      unless job_schedule_disable_options.nil?
        client_request_id = job_schedule_disable_options.client_request_id
      end
      unless job_schedule_disable_options.nil?
        return_client_request_id = job_schedule_disable_options.return_client_request_id
      end
      unless job_schedule_disable_options.nil?
        ocp_date = job_schedule_disable_options.ocp_date
      end
      unless job_schedule_disable_options.nil?
        if_match = job_schedule_disable_options.if_match
      end
      unless job_schedule_disable_options.nil?
        if_none_match = job_schedule_disable_options.if_none_match
      end
      unless job_schedule_disable_options.nil?
        if_modified_since = job_schedule_disable_options.if_modified_since
      end
      unless job_schedule_disable_options.nil?
        if_unmodified_since = job_schedule_disable_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobschedules/{jobScheduleId}/disable'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobScheduleId' => job_schedule_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Enables a Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to enable.
    # @param job_schedule_enable_options [JobScheduleEnableOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def enable(job_schedule_id, job_schedule_enable_options:nil, custom_headers:nil)
      response = enable_async(job_schedule_id, job_schedule_enable_options:job_schedule_enable_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Enables a Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to enable.
    # @param job_schedule_enable_options [JobScheduleEnableOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def enable_with_http_info(job_schedule_id, job_schedule_enable_options:nil, custom_headers:nil)
      enable_async(job_schedule_id, job_schedule_enable_options:job_schedule_enable_options, custom_headers:custom_headers).value!
    end

    #
    # Enables a Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to enable.
    # @param job_schedule_enable_options [JobScheduleEnableOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def enable_async(job_schedule_id, job_schedule_enable_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_schedule_id is nil' if job_schedule_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_schedule_enable_options.nil?
        timeout = job_schedule_enable_options.timeout
      end
      unless job_schedule_enable_options.nil?
        client_request_id = job_schedule_enable_options.client_request_id
      end
      unless job_schedule_enable_options.nil?
        return_client_request_id = job_schedule_enable_options.return_client_request_id
      end
      unless job_schedule_enable_options.nil?
        ocp_date = job_schedule_enable_options.ocp_date
      end
      unless job_schedule_enable_options.nil?
        if_match = job_schedule_enable_options.if_match
      end
      unless job_schedule_enable_options.nil?
        if_none_match = job_schedule_enable_options.if_none_match
      end
      unless job_schedule_enable_options.nil?
        if_modified_since = job_schedule_enable_options.if_modified_since
      end
      unless job_schedule_enable_options.nil?
        if_unmodified_since = job_schedule_enable_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobschedules/{jobScheduleId}/enable'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobScheduleId' => job_schedule_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Terminates a Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to terminates.
    # @param job_schedule_terminate_options [JobScheduleTerminateOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def terminate(job_schedule_id, job_schedule_terminate_options:nil, custom_headers:nil)
      response = terminate_async(job_schedule_id, job_schedule_terminate_options:job_schedule_terminate_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Terminates a Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to terminates.
    # @param job_schedule_terminate_options [JobScheduleTerminateOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def terminate_with_http_info(job_schedule_id, job_schedule_terminate_options:nil, custom_headers:nil)
      terminate_async(job_schedule_id, job_schedule_terminate_options:job_schedule_terminate_options, custom_headers:custom_headers).value!
    end

    #
    # Terminates a Job Schedule.
    #
    # @param job_schedule_id [String] The ID of the Job Schedule to terminates.
    # @param job_schedule_terminate_options [JobScheduleTerminateOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def terminate_async(job_schedule_id, job_schedule_terminate_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_schedule_id is nil' if job_schedule_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless job_schedule_terminate_options.nil?
        timeout = job_schedule_terminate_options.timeout
      end
      unless job_schedule_terminate_options.nil?
        client_request_id = job_schedule_terminate_options.client_request_id
      end
      unless job_schedule_terminate_options.nil?
        return_client_request_id = job_schedule_terminate_options.return_client_request_id
      end
      unless job_schedule_terminate_options.nil?
        ocp_date = job_schedule_terminate_options.ocp_date
      end
      unless job_schedule_terminate_options.nil?
        if_match = job_schedule_terminate_options.if_match
      end
      unless job_schedule_terminate_options.nil?
        if_none_match = job_schedule_terminate_options.if_none_match
      end
      unless job_schedule_terminate_options.nil?
        if_modified_since = job_schedule_terminate_options.if_modified_since
      end
      unless job_schedule_terminate_options.nil?
        if_unmodified_since = job_schedule_terminate_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobschedules/{jobScheduleId}/terminate'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobScheduleId' => job_schedule_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Adds a Job Schedule to the specified Account.
    #
    # @param cloud_job_schedule [JobScheduleAddParameter] The Job Schedule to be
    # added.
    # @param job_schedule_add_options [JobScheduleAddOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def add(cloud_job_schedule, job_schedule_add_options:nil, custom_headers:nil)
      response = add_async(cloud_job_schedule, job_schedule_add_options:job_schedule_add_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Adds a Job Schedule to the specified Account.
    #
    # @param cloud_job_schedule [JobScheduleAddParameter] The Job Schedule to be
    # added.
    # @param job_schedule_add_options [JobScheduleAddOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_with_http_info(cloud_job_schedule, job_schedule_add_options:nil, custom_headers:nil)
      add_async(cloud_job_schedule, job_schedule_add_options:job_schedule_add_options, custom_headers:custom_headers).value!
    end

    #
    # Adds a Job Schedule to the specified Account.
    #
    # @param cloud_job_schedule [JobScheduleAddParameter] The Job Schedule to be
    # added.
    # @param job_schedule_add_options [JobScheduleAddOptions] Additional parameters
    # for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_async(cloud_job_schedule, job_schedule_add_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'cloud_job_schedule is nil' if cloud_job_schedule.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_schedule_add_options.nil?
        timeout = job_schedule_add_options.timeout
      end
      unless job_schedule_add_options.nil?
        client_request_id = job_schedule_add_options.client_request_id
      end
      unless job_schedule_add_options.nil?
        return_client_request_id = job_schedule_add_options.return_client_request_id
      end
      unless job_schedule_add_options.nil?
        ocp_date = job_schedule_add_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2019_06_01_9_0::Models::JobScheduleAddParameter.mapper()
      request_content = @client.serialize(request_mapper,  cloud_job_schedule)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobschedules'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Lists all of the Job Schedules in the specified Account.
    #
    # @param job_schedule_list_options [JobScheduleListOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<CloudJobSchedule>] operation results.
    #
    def list(job_schedule_list_options:nil, custom_headers:nil)
      first_page = list_as_lazy(job_schedule_list_options:job_schedule_list_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Lists all of the Job Schedules in the specified Account.
    #
    # @param job_schedule_list_options [JobScheduleListOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(job_schedule_list_options:nil, custom_headers:nil)
      list_async(job_schedule_list_options:job_schedule_list_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the Job Schedules in the specified Account.
    #
    # @param job_schedule_list_options [JobScheduleListOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(job_schedule_list_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      filter = nil
      select = nil
      expand = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_schedule_list_options.nil?
        filter = job_schedule_list_options.filter
      end
      unless job_schedule_list_options.nil?
        select = job_schedule_list_options.select
      end
      unless job_schedule_list_options.nil?
        expand = job_schedule_list_options.expand
      end
      unless job_schedule_list_options.nil?
        max_results = job_schedule_list_options.maxResults
      end
      unless job_schedule_list_options.nil?
        timeout = job_schedule_list_options.timeout
      end
      unless job_schedule_list_options.nil?
        client_request_id = job_schedule_list_options.client_request_id
      end
      unless job_schedule_list_options.nil?
        return_client_request_id = job_schedule_list_options.return_client_request_id
      end
      unless job_schedule_list_options.nil?
        ocp_date = job_schedule_list_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobschedules'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'$filter' => filter,'$select' => select,'$expand' => expand,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::CloudJobScheduleListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all of the Job Schedules in the specified Account.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_schedule_list_next_options [JobScheduleListNextOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudJobScheduleListResult] operation results.
    #
    def list_next(next_page_link, job_schedule_list_next_options:nil, custom_headers:nil)
      response = list_next_async(next_page_link, job_schedule_list_next_options:job_schedule_list_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all of the Job Schedules in the specified Account.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_schedule_list_next_options [JobScheduleListNextOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, job_schedule_list_next_options:nil, custom_headers:nil)
      list_next_async(next_page_link, job_schedule_list_next_options:job_schedule_list_next_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the Job Schedules in the specified Account.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param job_schedule_list_next_options [JobScheduleListNextOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, job_schedule_list_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless job_schedule_list_next_options.nil?
        client_request_id = job_schedule_list_next_options.client_request_id
      end
      unless job_schedule_list_next_options.nil?
        return_client_request_id = job_schedule_list_next_options.return_client_request_id
      end
      unless job_schedule_list_next_options.nil?
        ocp_date = job_schedule_list_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2019_06_01_9_0::Models::CloudJobScheduleListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all of the Job Schedules in the specified Account.
    #
    # @param job_schedule_list_options [JobScheduleListOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudJobScheduleListResult] which provide lazy access to pages of
    # the response.
    #
    def list_as_lazy(job_schedule_list_options:nil, custom_headers:nil)
      response = list_async(job_schedule_list_options:job_schedule_list_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          job_schedule_list_next_options = job_schedule_list_options
          list_next_async(next_page_link, job_schedule_list_next_options:job_schedule_list_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
