# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2018_12_01_8_0
  module Models
    #
    # A compute node in the Batch service.
    #
    #
    class ComputeNode

      include MsRestAzure

      # @return [String] The ID of the compute node. Every node that is added
      # to a pool is assigned a unique ID. Whenever a node is removed from a
      # pool, all of its local files are deleted, and the ID is reclaimed and
      # could be reused for new nodes.
      attr_accessor :id

      # @return [String] The URL of the compute node.
      attr_accessor :url

      # @return [ComputeNodeState] The current state of the compute node. The
      # low-priority node has been preempted. Tasks which were running on the
      # node when it was preempted will be rescheduled when another node
      # becomes available. Possible values include: 'idle', 'rebooting',
      # 'reimaging', 'running', 'unusable', 'creating', 'starting',
      # 'waitingForStartTask', 'startTaskFailed', 'unknown', 'leavingPool',
      # 'offline', 'preempted'
      attr_accessor :state

      # @return [SchedulingState] Whether the compute node is available for
      # task scheduling. Possible values include: 'enabled', 'disabled'
      attr_accessor :scheduling_state

      # @return [DateTime] The time at which the compute node entered its
      # current state.
      attr_accessor :state_transition_time

      # @return [DateTime] The last time at which the compute node was started.
      # This property may not be present if the node state is unusable.
      attr_accessor :last_boot_time

      # @return [DateTime] The time at which this compute node was allocated to
      # the pool. This is the time when the node was initially allocated and
      # doesn't change once set. It is not updated when the node is service
      # healed or preempted.
      attr_accessor :allocation_time

      # @return [String] The IP address that other compute nodes can use to
      # communicate with this compute node. Every node that is added to a pool
      # is assigned a unique IP address. Whenever a node is removed from a
      # pool, all of its local files are deleted, and the IP address is
      # reclaimed and could be reused for new nodes.
      attr_accessor :ip_address

      # @return [String] An identifier which can be passed when adding a task
      # to request that the task be scheduled on this node. Note that this is
      # just a soft affinity. If the target node is busy or unavailable at the
      # time the task is scheduled, then the task will be scheduled elsewhere.
      attr_accessor :affinity_id

      # @return [String] The size of the virtual machine hosting the compute
      # node. For information about available sizes of virtual machines in
      # pools, see Choose a VM size for compute nodes in an Azure Batch pool
      # (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
      attr_accessor :vm_size

      # @return [Integer] The total number of job tasks completed on the
      # compute node. This includes Job Manager tasks and normal tasks, but not
      # Job Preparation, Job Release or Start tasks.
      attr_accessor :total_tasks_run

      # @return [Integer] The total number of currently running job tasks on
      # the compute node. This includes Job Manager tasks and normal tasks, but
      # not Job Preparation, Job Release or Start tasks.
      attr_accessor :running_tasks_count

      # @return [Integer] The total number of job tasks which completed
      # successfully (with exitCode 0) on the compute node. This includes Job
      # Manager tasks and normal tasks, but not Job Preparation, Job Release or
      # Start tasks.
      attr_accessor :total_tasks_succeeded

      # @return [Array<TaskInformation>] A list of tasks whose state has
      # recently changed. This property is present only if at least one task
      # has run on this node since it was assigned to the pool.
      attr_accessor :recent_tasks

      # @return [StartTask] The task specified to run on the compute node as it
      # joins the pool.
      attr_accessor :start_task

      # @return [StartTaskInformation] Runtime information about the execution
      # of the start task on the compute node.
      attr_accessor :start_task_info

      # @return [Array<CertificateReference>] The list of certificates
      # installed on the compute node. For Windows compute nodes, the Batch
      # service installs the certificates to the specified certificate store
      # and location. For Linux compute nodes, the certificates are stored in a
      # directory inside the task working directory and an environment variable
      # AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this
      # location. For certificates with visibility of 'remoteUser', a 'certs'
      # directory is created in the user's home directory (e.g.,
      # /home/{user-name}/certs) and certificates are placed in that directory.
      attr_accessor :certificate_references

      # @return [Array<ComputeNodeError>] The list of errors that are currently
      # being encountered by the compute node.
      attr_accessor :errors

      # @return [Boolean] Whether this compute node is a dedicated node. If
      # false, the node is a low-priority node.
      attr_accessor :is_dedicated

      # @return [ComputeNodeEndpointConfiguration] The endpoint configuration
      # for the compute node.
      attr_accessor :endpoint_configuration

      # @return [NodeAgentInformation] Information about the node agent version
      # and the time the node upgraded to a new version.
      attr_accessor :node_agent_info


      #
      # Mapper for ComputeNode class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'ComputeNode',
          type: {
            name: 'Composite',
            class_name: 'ComputeNode',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              url: {
                client_side_validation: true,
                required: false,
                serialized_name: 'url',
                type: {
                  name: 'String'
                }
              },
              state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'state',
                type: {
                  name: 'Enum',
                  module: 'ComputeNodeState'
                }
              },
              scheduling_state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'schedulingState',
                type: {
                  name: 'Enum',
                  module: 'SchedulingState'
                }
              },
              state_transition_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'stateTransitionTime',
                type: {
                  name: 'DateTime'
                }
              },
              last_boot_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'lastBootTime',
                type: {
                  name: 'DateTime'
                }
              },
              allocation_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'allocationTime',
                type: {
                  name: 'DateTime'
                }
              },
              ip_address: {
                client_side_validation: true,
                required: false,
                serialized_name: 'ipAddress',
                type: {
                  name: 'String'
                }
              },
              affinity_id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'affinityId',
                type: {
                  name: 'String'
                }
              },
              vm_size: {
                client_side_validation: true,
                required: false,
                serialized_name: 'vmSize',
                type: {
                  name: 'String'
                }
              },
              total_tasks_run: {
                client_side_validation: true,
                required: false,
                serialized_name: 'totalTasksRun',
                type: {
                  name: 'Number'
                }
              },
              running_tasks_count: {
                client_side_validation: true,
                required: false,
                serialized_name: 'runningTasksCount',
                type: {
                  name: 'Number'
                }
              },
              total_tasks_succeeded: {
                client_side_validation: true,
                required: false,
                serialized_name: 'totalTasksSucceeded',
                type: {
                  name: 'Number'
                }
              },
              recent_tasks: {
                client_side_validation: true,
                required: false,
                serialized_name: 'recentTasks',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'TaskInformationElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'TaskInformation'
                      }
                  }
                }
              },
              start_task: {
                client_side_validation: true,
                required: false,
                serialized_name: 'startTask',
                type: {
                  name: 'Composite',
                  class_name: 'StartTask'
                }
              },
              start_task_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'startTaskInfo',
                type: {
                  name: 'Composite',
                  class_name: 'StartTaskInformation'
                }
              },
              certificate_references: {
                client_side_validation: true,
                required: false,
                serialized_name: 'certificateReferences',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'CertificateReferenceElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'CertificateReference'
                      }
                  }
                }
              },
              errors: {
                client_side_validation: true,
                required: false,
                serialized_name: 'errors',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ComputeNodeErrorElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ComputeNodeError'
                      }
                  }
                }
              },
              is_dedicated: {
                client_side_validation: true,
                required: false,
                serialized_name: 'isDedicated',
                type: {
                  name: 'Boolean'
                }
              },
              endpoint_configuration: {
                client_side_validation: true,
                required: false,
                serialized_name: 'endpointConfiguration',
                type: {
                  name: 'Composite',
                  class_name: 'ComputeNodeEndpointConfiguration'
                }
              },
              node_agent_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'nodeAgentInfo',
                type: {
                  name: 'Composite',
                  class_name: 'NodeAgentInformation'
                }
              }
            }
          }
        }
      end
    end
  end
end
