# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2018_12_01_8_0
  module Models
    #
    # Information about the execution of a task.
    #
    #
    class TaskExecutionInformation

      include MsRestAzure

      # @return [DateTime] The time at which the task started running.
      # 'Running' corresponds to the running state, so if the task specifies
      # resource files or application packages, then the start time reflects
      # the time at which the task started downloading or deploying these. If
      # the task has been restarted or retried, this is the most recent time at
      # which the task started running. This property is present only for tasks
      # that are in the running or completed state.
      attr_accessor :start_time

      # @return [DateTime] The time at which the task completed. This property
      # is set only if the task is in the Completed state.
      attr_accessor :end_time

      # @return [Integer] The exit code of the program specified on the task
      # command line. This property is set only if the task is in the completed
      # state. In general, the exit code for a process reflects the specific
      # convention implemented by the application developer for that process.
      # If you use the exit code value to make decisions in your code, be sure
      # that you know the exit code convention used by the application process.
      # However, if the Batch service terminates the task (due to timeout, or
      # user termination via the API) you may see an operating system-defined
      # exit code.
      attr_accessor :exit_code

      # @return [TaskContainerExecutionInformation] Information about the
      # container under which the task is executing. This property is set only
      # if the task runs in a container context.
      attr_accessor :container_info

      # @return [TaskFailureInformation] Information describing the task
      # failure, if any. This property is set only if the task is in the
      # completed state and encountered a failure.
      attr_accessor :failure_info

      # @return [Integer] The number of times the task has been retried by the
      # Batch service. Task application failures (non-zero exit code) are
      # retried, pre-processing errors (the task could not be run) and file
      # upload errors are not retried. The Batch service will retry the task up
      # to the limit specified by the constraints.
      attr_accessor :retry_count

      # @return [DateTime] The most recent time at which a retry of the task
      # started running. This element is present only if the task was retried
      # (i.e. retryCount is nonzero). If present, this is typically the same as
      # startTime, but may be different if the task has been restarted for
      # reasons other than retry; for example, if the compute node was rebooted
      # during a retry, then the startTime is updated but the lastRetryTime is
      # not.
      attr_accessor :last_retry_time

      # @return [Integer] The number of times the task has been requeued by the
      # Batch service as the result of a user request. When the user removes
      # nodes from a pool (by resizing/shrinking the pool) or when the job is
      # being disabled, the user can specify that running tasks on the nodes be
      # requeued for execution. This count tracks how many times the task has
      # been requeued for these reasons.
      attr_accessor :requeue_count

      # @return [DateTime] The most recent time at which the task has been
      # requeued by the Batch service as the result of a user request. This
      # property is set only if the requeueCount is nonzero.
      attr_accessor :last_requeue_time

      # @return [TaskExecutionResult] The result of the task execution. If the
      # value is 'failed', then the details of the failure can be found in the
      # failureInfo property. Possible values include: 'success', 'failure'
      attr_accessor :result


      #
      # Mapper for TaskExecutionInformation class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'TaskExecutionInformation',
          type: {
            name: 'Composite',
            class_name: 'TaskExecutionInformation',
            model_properties: {
              start_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'startTime',
                type: {
                  name: 'DateTime'
                }
              },
              end_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'endTime',
                type: {
                  name: 'DateTime'
                }
              },
              exit_code: {
                client_side_validation: true,
                required: false,
                serialized_name: 'exitCode',
                type: {
                  name: 'Number'
                }
              },
              container_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'containerInfo',
                type: {
                  name: 'Composite',
                  class_name: 'TaskContainerExecutionInformation'
                }
              },
              failure_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'failureInfo',
                type: {
                  name: 'Composite',
                  class_name: 'TaskFailureInformation'
                }
              },
              retry_count: {
                client_side_validation: true,
                required: true,
                serialized_name: 'retryCount',
                type: {
                  name: 'Number'
                }
              },
              last_retry_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'lastRetryTime',
                type: {
                  name: 'DateTime'
                }
              },
              requeue_count: {
                client_side_validation: true,
                required: true,
                serialized_name: 'requeueCount',
                type: {
                  name: 'Number'
                }
              },
              last_requeue_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'lastRequeueTime',
                type: {
                  name: 'DateTime'
                }
              },
              result: {
                client_side_validation: true,
                required: false,
                serialized_name: 'result',
                type: {
                  name: 'Enum',
                  module: 'TaskExecutionResult'
                }
              }
            }
          }
        }
      end
    end
  end
end
