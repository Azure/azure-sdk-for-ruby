# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2018_12_01_8_0
  #
  # A client for issuing REST requests to the Azure Batch service.
  #
  class Task
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Task class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [BatchServiceClient] reference to the BatchServiceClient
    attr_reader :client

    #
    # Adds a task to the specified job.
    #
    # The maximum lifetime of a task from addition to completion is 180 days. If a
    # task has not completed within 180 days of being added it will be terminated
    # by the Batch service and left in whatever state it was in at that time.
    #
    # @param job_id [String] The ID of the job to which the task is to be added.
    # @param task [TaskAddParameter] The task to be added.
    # @param task_add_options [TaskAddOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def add(job_id, task, task_add_options:nil, custom_headers:nil)
      response = add_async(job_id, task, task_add_options:task_add_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Adds a task to the specified job.
    #
    # The maximum lifetime of a task from addition to completion is 180 days. If a
    # task has not completed within 180 days of being added it will be terminated
    # by the Batch service and left in whatever state it was in at that time.
    #
    # @param job_id [String] The ID of the job to which the task is to be added.
    # @param task [TaskAddParameter] The task to be added.
    # @param task_add_options [TaskAddOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_with_http_info(job_id, task, task_add_options:nil, custom_headers:nil)
      add_async(job_id, task, task_add_options:task_add_options, custom_headers:custom_headers).value!
    end

    #
    # Adds a task to the specified job.
    #
    # The maximum lifetime of a task from addition to completion is 180 days. If a
    # task has not completed within 180 days of being added it will be terminated
    # by the Batch service and left in whatever state it was in at that time.
    #
    # @param job_id [String] The ID of the job to which the task is to be added.
    # @param task [TaskAddParameter] The task to be added.
    # @param task_add_options [TaskAddOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_async(job_id, task, task_add_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task is nil' if task.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless task_add_options.nil?
        timeout = task_add_options.timeout
      end
      unless task_add_options.nil?
        client_request_id = task_add_options.client_request_id
      end
      unless task_add_options.nil?
        return_client_request_id = task_add_options.return_client_request_id
      end
      unless task_add_options.nil?
        ocp_date = task_add_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2018_12_01_8_0::Models::TaskAddParameter.mapper()
      request_content = @client.serialize(request_mapper,  task)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobs/{jobId}/tasks'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Lists all of the tasks that are associated with the specified job.
    #
    # For multi-instance tasks, information such as affinityId, executionInfo and
    # nodeInfo refer to the primary task. Use the list subtasks API to retrieve
    # information about subtasks.
    #
    # @param job_id [String] The ID of the job.
    # @param task_list_options [TaskListOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<CloudTask>] operation results.
    #
    def list(job_id, task_list_options:nil, custom_headers:nil)
      first_page = list_as_lazy(job_id, task_list_options:task_list_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Lists all of the tasks that are associated with the specified job.
    #
    # For multi-instance tasks, information such as affinityId, executionInfo and
    # nodeInfo refer to the primary task. Use the list subtasks API to retrieve
    # information about subtasks.
    #
    # @param job_id [String] The ID of the job.
    # @param task_list_options [TaskListOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(job_id, task_list_options:nil, custom_headers:nil)
      list_async(job_id, task_list_options:task_list_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the tasks that are associated with the specified job.
    #
    # For multi-instance tasks, information such as affinityId, executionInfo and
    # nodeInfo refer to the primary task. Use the list subtasks API to retrieve
    # information about subtasks.
    #
    # @param job_id [String] The ID of the job.
    # @param task_list_options [TaskListOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(job_id, task_list_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      filter = nil
      select = nil
      expand = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless task_list_options.nil?
        filter = task_list_options.filter
      end
      unless task_list_options.nil?
        select = task_list_options.select
      end
      unless task_list_options.nil?
        expand = task_list_options.expand
      end
      unless task_list_options.nil?
        max_results = task_list_options.maxResults
      end
      unless task_list_options.nil?
        timeout = task_list_options.timeout
      end
      unless task_list_options.nil?
        client_request_id = task_list_options.client_request_id
      end
      unless task_list_options.nil?
        return_client_request_id = task_list_options.return_client_request_id
      end
      unless task_list_options.nil?
        ocp_date = task_list_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/tasks'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'$filter' => filter,'$select' => select,'$expand' => expand,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_12_01_8_0::Models::CloudTaskListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a collection of tasks to the specified job.
    #
    # Note that each task must have a unique ID. The Batch service may not return
    # the results for each task in the same order the tasks were submitted in this
    # request. If the server times out or the connection is closed during the
    # request, the request may have been partially or fully processed, or not at
    # all. In such cases, the user should re-issue the request. Note that it is up
    # to the user to correctly handle failures when re-issuing a request. For
    # example, you should use the same task IDs during a retry so that if the prior
    # operation succeeded, the retry will not create extra tasks unexpectedly. If
    # the response contains any tasks which failed to add, a client can retry the
    # request. In a retry, it is most efficient to resubmit only tasks that failed
    # to add, and to omit tasks that were successfully added on the first attempt.
    # The maximum lifetime of a task from addition to completion is 180 days. If a
    # task has not completed within 180 days of being added it will be terminated
    # by the Batch service and left in whatever state it was in at that time.
    #
    # @param job_id [String] The ID of the job to which the task collection is to
    # be added.
    # @param task_collection [TaskAddCollectionParameter] The tasks to be added.
    # @param task_add_collection_options [TaskAddCollectionOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [TaskAddCollectionResult] operation results.
    #
    def add_collection(job_id, task_collection, task_add_collection_options:nil, custom_headers:nil)
      response = add_collection_async(job_id, task_collection, task_add_collection_options:task_add_collection_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a collection of tasks to the specified job.
    #
    # Note that each task must have a unique ID. The Batch service may not return
    # the results for each task in the same order the tasks were submitted in this
    # request. If the server times out or the connection is closed during the
    # request, the request may have been partially or fully processed, or not at
    # all. In such cases, the user should re-issue the request. Note that it is up
    # to the user to correctly handle failures when re-issuing a request. For
    # example, you should use the same task IDs during a retry so that if the prior
    # operation succeeded, the retry will not create extra tasks unexpectedly. If
    # the response contains any tasks which failed to add, a client can retry the
    # request. In a retry, it is most efficient to resubmit only tasks that failed
    # to add, and to omit tasks that were successfully added on the first attempt.
    # The maximum lifetime of a task from addition to completion is 180 days. If a
    # task has not completed within 180 days of being added it will be terminated
    # by the Batch service and left in whatever state it was in at that time.
    #
    # @param job_id [String] The ID of the job to which the task collection is to
    # be added.
    # @param task_collection [TaskAddCollectionParameter] The tasks to be added.
    # @param task_add_collection_options [TaskAddCollectionOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_collection_with_http_info(job_id, task_collection, task_add_collection_options:nil, custom_headers:nil)
      add_collection_async(job_id, task_collection, task_add_collection_options:task_add_collection_options, custom_headers:custom_headers).value!
    end

    #
    # Adds a collection of tasks to the specified job.
    #
    # Note that each task must have a unique ID. The Batch service may not return
    # the results for each task in the same order the tasks were submitted in this
    # request. If the server times out or the connection is closed during the
    # request, the request may have been partially or fully processed, or not at
    # all. In such cases, the user should re-issue the request. Note that it is up
    # to the user to correctly handle failures when re-issuing a request. For
    # example, you should use the same task IDs during a retry so that if the prior
    # operation succeeded, the retry will not create extra tasks unexpectedly. If
    # the response contains any tasks which failed to add, a client can retry the
    # request. In a retry, it is most efficient to resubmit only tasks that failed
    # to add, and to omit tasks that were successfully added on the first attempt.
    # The maximum lifetime of a task from addition to completion is 180 days. If a
    # task has not completed within 180 days of being added it will be terminated
    # by the Batch service and left in whatever state it was in at that time.
    #
    # @param job_id [String] The ID of the job to which the task collection is to
    # be added.
    # @param task_collection [TaskAddCollectionParameter] The tasks to be added.
    # @param task_add_collection_options [TaskAddCollectionOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_collection_async(job_id, task_collection, task_add_collection_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_collection is nil' if task_collection.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless task_add_collection_options.nil?
        timeout = task_add_collection_options.timeout
      end
      unless task_add_collection_options.nil?
        client_request_id = task_add_collection_options.client_request_id
      end
      unless task_add_collection_options.nil?
        return_client_request_id = task_add_collection_options.return_client_request_id
      end
      unless task_add_collection_options.nil?
        ocp_date = task_add_collection_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2018_12_01_8_0::Models::TaskAddCollectionParameter.mapper()
      request_content = @client.serialize(request_mapper,  task_collection)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobs/{jobId}/addtaskcollection'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_12_01_8_0::Models::TaskAddCollectionResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a task from the specified job.
    #
    # When a task is deleted, all of the files in its directory on the compute node
    # where it ran are also deleted (regardless of the retention time). For
    # multi-instance tasks, the delete task operation applies synchronously to the
    # primary task; subtasks and their files are then deleted asynchronously in the
    # background.
    #
    # @param job_id [String] The ID of the job from which to delete the task.
    # @param task_id [String] The ID of the task to delete.
    # @param task_delete_options [TaskDeleteOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete(job_id, task_id, task_delete_options:nil, custom_headers:nil)
      response = delete_async(job_id, task_id, task_delete_options:task_delete_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes a task from the specified job.
    #
    # When a task is deleted, all of the files in its directory on the compute node
    # where it ran are also deleted (regardless of the retention time). For
    # multi-instance tasks, the delete task operation applies synchronously to the
    # primary task; subtasks and their files are then deleted asynchronously in the
    # background.
    #
    # @param job_id [String] The ID of the job from which to delete the task.
    # @param task_id [String] The ID of the task to delete.
    # @param task_delete_options [TaskDeleteOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(job_id, task_id, task_delete_options:nil, custom_headers:nil)
      delete_async(job_id, task_id, task_delete_options:task_delete_options, custom_headers:custom_headers).value!
    end

    #
    # Deletes a task from the specified job.
    #
    # When a task is deleted, all of the files in its directory on the compute node
    # where it ran are also deleted (regardless of the retention time). For
    # multi-instance tasks, the delete task operation applies synchronously to the
    # primary task; subtasks and their files are then deleted asynchronously in the
    # background.
    #
    # @param job_id [String] The ID of the job from which to delete the task.
    # @param task_id [String] The ID of the task to delete.
    # @param task_delete_options [TaskDeleteOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(job_id, task_id, task_delete_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_id is nil' if task_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless task_delete_options.nil?
        timeout = task_delete_options.timeout
      end
      unless task_delete_options.nil?
        client_request_id = task_delete_options.client_request_id
      end
      unless task_delete_options.nil?
        return_client_request_id = task_delete_options.return_client_request_id
      end
      unless task_delete_options.nil?
        ocp_date = task_delete_options.ocp_date
      end
      unless task_delete_options.nil?
        if_match = task_delete_options.if_match
      end
      unless task_delete_options.nil?
        if_none_match = task_delete_options.if_none_match
      end
      unless task_delete_options.nil?
        if_modified_since = task_delete_options.if_modified_since
      end
      unless task_delete_options.nil?
        if_unmodified_since = task_delete_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/tasks/{taskId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id,'taskId' => task_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Gets information about the specified task.
    #
    # For multi-instance tasks, information such as affinityId, executionInfo and
    # nodeInfo refer to the primary task. Use the list subtasks API to retrieve
    # information about subtasks.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task to get information about.
    # @param task_get_options [TaskGetOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudTask] operation results.
    #
    def get(job_id, task_id, task_get_options:nil, custom_headers:nil)
      response = get_async(job_id, task_id, task_get_options:task_get_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about the specified task.
    #
    # For multi-instance tasks, information such as affinityId, executionInfo and
    # nodeInfo refer to the primary task. Use the list subtasks API to retrieve
    # information about subtasks.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task to get information about.
    # @param task_get_options [TaskGetOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(job_id, task_id, task_get_options:nil, custom_headers:nil)
      get_async(job_id, task_id, task_get_options:task_get_options, custom_headers:custom_headers).value!
    end

    #
    # Gets information about the specified task.
    #
    # For multi-instance tasks, information such as affinityId, executionInfo and
    # nodeInfo refer to the primary task. Use the list subtasks API to retrieve
    # information about subtasks.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task to get information about.
    # @param task_get_options [TaskGetOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(job_id, task_id, task_get_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_id is nil' if task_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      select = nil
      expand = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless task_get_options.nil?
        select = task_get_options.select
      end
      unless task_get_options.nil?
        expand = task_get_options.expand
      end
      unless task_get_options.nil?
        timeout = task_get_options.timeout
      end
      unless task_get_options.nil?
        client_request_id = task_get_options.client_request_id
      end
      unless task_get_options.nil?
        return_client_request_id = task_get_options.return_client_request_id
      end
      unless task_get_options.nil?
        ocp_date = task_get_options.ocp_date
      end
      unless task_get_options.nil?
        if_match = task_get_options.if_match
      end
      unless task_get_options.nil?
        if_none_match = task_get_options.if_none_match
      end
      unless task_get_options.nil?
        if_modified_since = task_get_options.if_modified_since
      end
      unless task_get_options.nil?
        if_unmodified_since = task_get_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/tasks/{taskId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id,'taskId' => task_id},
          query_params: {'api-version' => @client.api_version,'$select' => select,'$expand' => expand,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_12_01_8_0::Models::CloudTask.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the properties of the specified task.
    #
    # @param job_id [String] The ID of the job containing the task.
    # @param task_id [String] The ID of the task to update.
    # @param task_update_parameter [TaskUpdateParameter] The parameters for the
    # request.
    # @param task_update_options [TaskUpdateOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def update(job_id, task_id, task_update_parameter, task_update_options:nil, custom_headers:nil)
      response = update_async(job_id, task_id, task_update_parameter, task_update_options:task_update_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Updates the properties of the specified task.
    #
    # @param job_id [String] The ID of the job containing the task.
    # @param task_id [String] The ID of the task to update.
    # @param task_update_parameter [TaskUpdateParameter] The parameters for the
    # request.
    # @param task_update_options [TaskUpdateOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_with_http_info(job_id, task_id, task_update_parameter, task_update_options:nil, custom_headers:nil)
      update_async(job_id, task_id, task_update_parameter, task_update_options:task_update_options, custom_headers:custom_headers).value!
    end

    #
    # Updates the properties of the specified task.
    #
    # @param job_id [String] The ID of the job containing the task.
    # @param task_id [String] The ID of the task to update.
    # @param task_update_parameter [TaskUpdateParameter] The parameters for the
    # request.
    # @param task_update_options [TaskUpdateOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_async(job_id, task_id, task_update_parameter, task_update_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_id is nil' if task_id.nil?
      fail ArgumentError, 'task_update_parameter is nil' if task_update_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless task_update_options.nil?
        timeout = task_update_options.timeout
      end
      unless task_update_options.nil?
        client_request_id = task_update_options.client_request_id
      end
      unless task_update_options.nil?
        return_client_request_id = task_update_options.return_client_request_id
      end
      unless task_update_options.nil?
        ocp_date = task_update_options.ocp_date
      end
      unless task_update_options.nil?
        if_match = task_update_options.if_match
      end
      unless task_update_options.nil?
        if_none_match = task_update_options.if_none_match
      end
      unless task_update_options.nil?
        if_modified_since = task_update_options.if_modified_since
      end
      unless task_update_options.nil?
        if_unmodified_since = task_update_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2018_12_01_8_0::Models::TaskUpdateParameter.mapper()
      request_content = @client.serialize(request_mapper,  task_update_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'jobs/{jobId}/tasks/{taskId}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id,'taskId' => task_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Lists all of the subtasks that are associated with the specified
    # multi-instance task.
    #
    # If the task is not a multi-instance task then this returns an empty
    # collection.
    #
    # @param job_id [String] The ID of the job.
    # @param task_id [String] The ID of the task.
    # @param task_list_subtasks_options [TaskListSubtasksOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudTaskListSubtasksResult] operation results.
    #
    def list_subtasks(job_id, task_id, task_list_subtasks_options:nil, custom_headers:nil)
      response = list_subtasks_async(job_id, task_id, task_list_subtasks_options:task_list_subtasks_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all of the subtasks that are associated with the specified
    # multi-instance task.
    #
    # If the task is not a multi-instance task then this returns an empty
    # collection.
    #
    # @param job_id [String] The ID of the job.
    # @param task_id [String] The ID of the task.
    # @param task_list_subtasks_options [TaskListSubtasksOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_subtasks_with_http_info(job_id, task_id, task_list_subtasks_options:nil, custom_headers:nil)
      list_subtasks_async(job_id, task_id, task_list_subtasks_options:task_list_subtasks_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the subtasks that are associated with the specified
    # multi-instance task.
    #
    # If the task is not a multi-instance task then this returns an empty
    # collection.
    #
    # @param job_id [String] The ID of the job.
    # @param task_id [String] The ID of the task.
    # @param task_list_subtasks_options [TaskListSubtasksOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_subtasks_async(job_id, task_id, task_list_subtasks_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_id is nil' if task_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      select = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless task_list_subtasks_options.nil?
        select = task_list_subtasks_options.select
      end
      unless task_list_subtasks_options.nil?
        timeout = task_list_subtasks_options.timeout
      end
      unless task_list_subtasks_options.nil?
        client_request_id = task_list_subtasks_options.client_request_id
      end
      unless task_list_subtasks_options.nil?
        return_client_request_id = task_list_subtasks_options.return_client_request_id
      end
      unless task_list_subtasks_options.nil?
        ocp_date = task_list_subtasks_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/tasks/{taskId}/subtasksinfo'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id,'taskId' => task_id},
          query_params: {'api-version' => @client.api_version,'$select' => select,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_12_01_8_0::Models::CloudTaskListSubtasksResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Terminates the specified task.
    #
    # When the task has been terminated, it moves to the completed state. For
    # multi-instance tasks, the terminate task operation applies synchronously to
    # the primary task; subtasks are then terminated asynchronously in the
    # background.
    #
    # @param job_id [String] The ID of the job containing the task.
    # @param task_id [String] The ID of the task to terminate.
    # @param task_terminate_options [TaskTerminateOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def terminate(job_id, task_id, task_terminate_options:nil, custom_headers:nil)
      response = terminate_async(job_id, task_id, task_terminate_options:task_terminate_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Terminates the specified task.
    #
    # When the task has been terminated, it moves to the completed state. For
    # multi-instance tasks, the terminate task operation applies synchronously to
    # the primary task; subtasks are then terminated asynchronously in the
    # background.
    #
    # @param job_id [String] The ID of the job containing the task.
    # @param task_id [String] The ID of the task to terminate.
    # @param task_terminate_options [TaskTerminateOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def terminate_with_http_info(job_id, task_id, task_terminate_options:nil, custom_headers:nil)
      terminate_async(job_id, task_id, task_terminate_options:task_terminate_options, custom_headers:custom_headers).value!
    end

    #
    # Terminates the specified task.
    #
    # When the task has been terminated, it moves to the completed state. For
    # multi-instance tasks, the terminate task operation applies synchronously to
    # the primary task; subtasks are then terminated asynchronously in the
    # background.
    #
    # @param job_id [String] The ID of the job containing the task.
    # @param task_id [String] The ID of the task to terminate.
    # @param task_terminate_options [TaskTerminateOptions] Additional parameters
    # for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def terminate_async(job_id, task_id, task_terminate_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_id is nil' if task_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless task_terminate_options.nil?
        timeout = task_terminate_options.timeout
      end
      unless task_terminate_options.nil?
        client_request_id = task_terminate_options.client_request_id
      end
      unless task_terminate_options.nil?
        return_client_request_id = task_terminate_options.return_client_request_id
      end
      unless task_terminate_options.nil?
        ocp_date = task_terminate_options.ocp_date
      end
      unless task_terminate_options.nil?
        if_match = task_terminate_options.if_match
      end
      unless task_terminate_options.nil?
        if_none_match = task_terminate_options.if_none_match
      end
      unless task_terminate_options.nil?
        if_modified_since = task_terminate_options.if_modified_since
      end
      unless task_terminate_options.nil?
        if_unmodified_since = task_terminate_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/tasks/{taskId}/terminate'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id,'taskId' => task_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Reactivates a task, allowing it to run again even if its retry count has been
    # exhausted.
    #
    # Reactivation makes a task eligible to be retried again up to its maximum
    # retry count. The task's state is changed to active. As the task is no longer
    # in the completed state, any previous exit code or failure information is no
    # longer available after reactivation. Each time a task is reactivated, its
    # retry count is reset to 0. Reactivation will fail for tasks that are not
    # completed or that previously completed successfully (with an exit code of 0).
    # Additionally, it will fail if the job has completed (or is terminating or
    # deleting).
    #
    # @param job_id [String] The ID of the job containing the task.
    # @param task_id [String] The ID of the task to reactivate.
    # @param task_reactivate_options [TaskReactivateOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def reactivate(job_id, task_id, task_reactivate_options:nil, custom_headers:nil)
      response = reactivate_async(job_id, task_id, task_reactivate_options:task_reactivate_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Reactivates a task, allowing it to run again even if its retry count has been
    # exhausted.
    #
    # Reactivation makes a task eligible to be retried again up to its maximum
    # retry count. The task's state is changed to active. As the task is no longer
    # in the completed state, any previous exit code or failure information is no
    # longer available after reactivation. Each time a task is reactivated, its
    # retry count is reset to 0. Reactivation will fail for tasks that are not
    # completed or that previously completed successfully (with an exit code of 0).
    # Additionally, it will fail if the job has completed (or is terminating or
    # deleting).
    #
    # @param job_id [String] The ID of the job containing the task.
    # @param task_id [String] The ID of the task to reactivate.
    # @param task_reactivate_options [TaskReactivateOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def reactivate_with_http_info(job_id, task_id, task_reactivate_options:nil, custom_headers:nil)
      reactivate_async(job_id, task_id, task_reactivate_options:task_reactivate_options, custom_headers:custom_headers).value!
    end

    #
    # Reactivates a task, allowing it to run again even if its retry count has been
    # exhausted.
    #
    # Reactivation makes a task eligible to be retried again up to its maximum
    # retry count. The task's state is changed to active. As the task is no longer
    # in the completed state, any previous exit code or failure information is no
    # longer available after reactivation. Each time a task is reactivated, its
    # retry count is reset to 0. Reactivation will fail for tasks that are not
    # completed or that previously completed successfully (with an exit code of 0).
    # Additionally, it will fail if the job has completed (or is terminating or
    # deleting).
    #
    # @param job_id [String] The ID of the job containing the task.
    # @param task_id [String] The ID of the task to reactivate.
    # @param task_reactivate_options [TaskReactivateOptions] Additional parameters
    # for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def reactivate_async(job_id, task_id, task_reactivate_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.batch_url is nil' if @client.batch_url.nil?
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_id is nil' if task_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless task_reactivate_options.nil?
        timeout = task_reactivate_options.timeout
      end
      unless task_reactivate_options.nil?
        client_request_id = task_reactivate_options.client_request_id
      end
      unless task_reactivate_options.nil?
        return_client_request_id = task_reactivate_options.return_client_request_id
      end
      unless task_reactivate_options.nil?
        ocp_date = task_reactivate_options.ocp_date
      end
      unless task_reactivate_options.nil?
        if_match = task_reactivate_options.if_match
      end
      unless task_reactivate_options.nil?
        if_none_match = task_reactivate_options.if_none_match
      end
      unless task_reactivate_options.nil?
        if_modified_since = task_reactivate_options.if_modified_since
      end
      unless task_reactivate_options.nil?
        if_unmodified_since = task_reactivate_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/tasks/{taskId}/reactivate'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{batchUrl}', @client.batch_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id,'taskId' => task_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Lists all of the tasks that are associated with the specified job.
    #
    # For multi-instance tasks, information such as affinityId, executionInfo and
    # nodeInfo refer to the primary task. Use the list subtasks API to retrieve
    # information about subtasks.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param task_list_next_options [TaskListNextOptions] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudTaskListResult] operation results.
    #
    def list_next(next_page_link, task_list_next_options:nil, custom_headers:nil)
      response = list_next_async(next_page_link, task_list_next_options:task_list_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all of the tasks that are associated with the specified job.
    #
    # For multi-instance tasks, information such as affinityId, executionInfo and
    # nodeInfo refer to the primary task. Use the list subtasks API to retrieve
    # information about subtasks.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param task_list_next_options [TaskListNextOptions] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, task_list_next_options:nil, custom_headers:nil)
      list_next_async(next_page_link, task_list_next_options:task_list_next_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the tasks that are associated with the specified job.
    #
    # For multi-instance tasks, information such as affinityId, executionInfo and
    # nodeInfo refer to the primary task. Use the list subtasks API to retrieve
    # information about subtasks.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param task_list_next_options [TaskListNextOptions] Additional parameters for
    # the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, task_list_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless task_list_next_options.nil?
        client_request_id = task_list_next_options.client_request_id
      end
      unless task_list_next_options.nil?
        return_client_request_id = task_list_next_options.return_client_request_id
      end
      unless task_list_next_options.nil?
        ocp_date = task_list_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_12_01_8_0::Models::CloudTaskListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all of the tasks that are associated with the specified job.
    #
    # For multi-instance tasks, information such as affinityId, executionInfo and
    # nodeInfo refer to the primary task. Use the list subtasks API to retrieve
    # information about subtasks.
    #
    # @param job_id [String] The ID of the job.
    # @param task_list_options [TaskListOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudTaskListResult] which provide lazy access to pages of the
    # response.
    #
    def list_as_lazy(job_id, task_list_options:nil, custom_headers:nil)
      response = list_async(job_id, task_list_options:task_list_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          task_list_next_options = task_list_options
          list_next_async(next_page_link, task_list_next_options:task_list_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
