# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2018_03_01_6_1
  module Models
    #
    # Usage metrics for a pool across an aggregation interval.
    #
    #
    class PoolUsageMetrics

      include MsRestAzure

      # @return [String] The ID of the pool whose metrics are aggregated in
      # this entry.
      attr_accessor :pool_id

      # @return [DateTime] The start time of the aggregation interval covered
      # by this entry.
      attr_accessor :start_time

      # @return [DateTime] The end time of the aggregation interval covered by
      # this entry.
      attr_accessor :end_time

      # @return [String] The size of virtual machines in the pool. All VMs in a
      # pool are the same size. For information about available sizes of
      # virtual machines in pools, see Choose a VM size for compute nodes in an
      # Azure Batch pool
      # (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes). Batch
      # supports all Cloud Services VM sizes except ExtraSmall, STANDARD_A1_V2
      # and STANDARD_A2_V2. For information about available VM sizes for pools
      # using images from the Virtual Machines Marketplace (pools created with
      # virtualMachineConfiguration) see Sizes for Virtual Machines (Linux)
      # (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
      # or Sizes for Virtual Machines (Windows)
      # (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
      # Batch supports all Azure VM sizes except STANDARD_A0 and those with
      # premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
      attr_accessor :vm_size

      # @return [Float] The total core hours used in the pool during this
      # aggregation interval.
      attr_accessor :total_core_hours

      # @return [Float] The cross data center network ingress to the pool
      # during this interval, in GiB.
      attr_accessor :data_ingress_gi_b

      # @return [Float] The cross data center network egress from the pool
      # during this interval, in GiB.
      attr_accessor :data_egress_gi_b


      #
      # Mapper for PoolUsageMetrics class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'PoolUsageMetrics',
          type: {
            name: 'Composite',
            class_name: 'PoolUsageMetrics',
            model_properties: {
              pool_id: {
                client_side_validation: true,
                required: true,
                serialized_name: 'poolId',
                type: {
                  name: 'String'
                }
              },
              start_time: {
                client_side_validation: true,
                required: true,
                serialized_name: 'startTime',
                type: {
                  name: 'DateTime'
                }
              },
              end_time: {
                client_side_validation: true,
                required: true,
                serialized_name: 'endTime',
                type: {
                  name: 'DateTime'
                }
              },
              vm_size: {
                client_side_validation: true,
                required: true,
                serialized_name: 'vmSize',
                type: {
                  name: 'String'
                }
              },
              total_core_hours: {
                client_side_validation: true,
                required: true,
                serialized_name: 'totalCoreHours',
                type: {
                  name: 'Double'
                }
              },
              data_ingress_gi_b: {
                client_side_validation: true,
                required: true,
                serialized_name: 'dataIngressGiB',
                type: {
                  name: 'Double'
                }
              },
              data_egress_gi_b: {
                client_side_validation: true,
                required: true,
                serialized_name: 'dataEgressGiB',
                type: {
                  name: 'Double'
                }
              }
            }
          }
        }
      end
    end
  end
end
