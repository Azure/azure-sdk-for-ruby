# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2018_03_01_6_1
  module Models
    #
    # An Azure Batch job.
    #
    #
    class CloudJob

      include MsRestAzure

      # @return [String] A string that uniquely identifies the job within the
      # account. The ID is case-preserving and case-insensitive (that is, you
      # may not have two IDs within an account that differ only by case).
      attr_accessor :id

      # @return [String] The display name for the job.
      attr_accessor :display_name

      # @return [Boolean] Whether tasks in the job can define dependencies on
      # each other. The default is false.
      attr_accessor :uses_task_dependencies

      # @return [String] The URL of the job.
      attr_accessor :url

      # @return [String] The ETag of the job. This is an opaque string. You can
      # use it to detect whether the job has changed between requests. In
      # particular, you can be pass the ETag when updating a job to specify
      # that your changes should take effect only if nobody else has modified
      # the job in the meantime.
      attr_accessor :e_tag

      # @return [DateTime] The last modified time of the job. This is the last
      # time at which the job level data, such as the job state or priority,
      # changed. It does not factor in task-level changes such as adding new
      # tasks or tasks changing state.
      attr_accessor :last_modified

      # @return [DateTime] The creation time of the job.
      attr_accessor :creation_time

      # @return [JobState] The current state of the job. Possible values
      # include: 'active', 'disabling', 'disabled', 'enabling', 'terminating',
      # 'completed', 'deleting'
      attr_accessor :state

      # @return [DateTime] The time at which the job entered its current state.
      attr_accessor :state_transition_time

      # @return [JobState] The previous state of the job. This property is not
      # set if the job is in its initial Active state. Possible values include:
      # 'active', 'disabling', 'disabled', 'enabling', 'terminating',
      # 'completed', 'deleting'
      attr_accessor :previous_state

      # @return [DateTime] The time at which the job entered its previous
      # state. This property is not set if the job is in its initial Active
      # state.
      attr_accessor :previous_state_transition_time

      # @return [Integer] The priority of the job. Priority values can range
      # from -1000 to 1000, with -1000 being the lowest priority and 1000 being
      # the highest priority. The default value is 0.
      attr_accessor :priority

      # @return [JobConstraints] The execution constraints for the job.
      attr_accessor :constraints

      # @return [JobManagerTask] Details of a Job Manager task to be launched
      # when the job is started.
      attr_accessor :job_manager_task

      # @return [JobPreparationTask] The Job Preparation task. The Job
      # Preparation task is a special task run on each node before any other
      # task of the job.
      attr_accessor :job_preparation_task

      # @return [JobReleaseTask] The Job Release task. The Job Release task is
      # a special task run at the end of the job on each node that has run any
      # other task of the job.
      attr_accessor :job_release_task

      # @return [Array<EnvironmentSetting>] The list of common environment
      # variable settings. These environment variables are set for all tasks in
      # the job (including the Job Manager, Job Preparation and Job Release
      # tasks). Individual tasks can override an environment setting specified
      # here by specifying the same setting name with a different value.
      attr_accessor :common_environment_settings

      # @return [PoolInformation] The pool settings associated with the job.
      attr_accessor :pool_info

      # @return [OnAllTasksComplete] The action the Batch service should take
      # when all tasks in the job are in the completed state. The default is
      # noaction. Possible values include: 'noAction', 'terminateJob'
      attr_accessor :on_all_tasks_complete

      # @return [OnTaskFailure] The action the Batch service should take when
      # any task in the job fails. A task is considered to have failed if has a
      # failureInfo. A failureInfo is set if the task completes with a non-zero
      # exit code after exhausting its retry count, or if there was an error
      # starting the task, for example due to a resource file download error.
      # The default is noaction. Possible values include: 'noAction',
      # 'performExitOptionsJobAction'
      attr_accessor :on_task_failure

      # @return [Array<MetadataItem>] A list of name-value pairs associated
      # with the job as metadata. The Batch service does not assign any meaning
      # to metadata; it is solely for the use of user code.
      attr_accessor :metadata

      # @return [JobExecutionInformation] The execution information for the
      # job.
      attr_accessor :execution_info

      # @return [JobStatistics] Resource usage statistics for the entire
      # lifetime of the job. The statistics may not be immediately available.
      # The Batch service performs periodic roll-up of statistics. The typical
      # delay is about 30 minutes.
      attr_accessor :stats


      #
      # Mapper for CloudJob class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'CloudJob',
          type: {
            name: 'Composite',
            class_name: 'CloudJob',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              display_name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'displayName',
                type: {
                  name: 'String'
                }
              },
              uses_task_dependencies: {
                client_side_validation: true,
                required: false,
                serialized_name: 'usesTaskDependencies',
                type: {
                  name: 'Boolean'
                }
              },
              url: {
                client_side_validation: true,
                required: false,
                serialized_name: 'url',
                type: {
                  name: 'String'
                }
              },
              e_tag: {
                client_side_validation: true,
                required: false,
                serialized_name: 'eTag',
                type: {
                  name: 'String'
                }
              },
              last_modified: {
                client_side_validation: true,
                required: false,
                serialized_name: 'lastModified',
                type: {
                  name: 'DateTime'
                }
              },
              creation_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'creationTime',
                type: {
                  name: 'DateTime'
                }
              },
              state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'state',
                type: {
                  name: 'Enum',
                  module: 'JobState'
                }
              },
              state_transition_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'stateTransitionTime',
                type: {
                  name: 'DateTime'
                }
              },
              previous_state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'previousState',
                type: {
                  name: 'Enum',
                  module: 'JobState'
                }
              },
              previous_state_transition_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'previousStateTransitionTime',
                type: {
                  name: 'DateTime'
                }
              },
              priority: {
                client_side_validation: true,
                required: false,
                serialized_name: 'priority',
                type: {
                  name: 'Number'
                }
              },
              constraints: {
                client_side_validation: true,
                required: false,
                serialized_name: 'constraints',
                type: {
                  name: 'Composite',
                  class_name: 'JobConstraints'
                }
              },
              job_manager_task: {
                client_side_validation: true,
                required: false,
                serialized_name: 'jobManagerTask',
                type: {
                  name: 'Composite',
                  class_name: 'JobManagerTask'
                }
              },
              job_preparation_task: {
                client_side_validation: true,
                required: false,
                serialized_name: 'jobPreparationTask',
                type: {
                  name: 'Composite',
                  class_name: 'JobPreparationTask'
                }
              },
              job_release_task: {
                client_side_validation: true,
                required: false,
                serialized_name: 'jobReleaseTask',
                type: {
                  name: 'Composite',
                  class_name: 'JobReleaseTask'
                }
              },
              common_environment_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'commonEnvironmentSettings',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'EnvironmentSettingElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'EnvironmentSetting'
                      }
                  }
                }
              },
              pool_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'poolInfo',
                type: {
                  name: 'Composite',
                  class_name: 'PoolInformation'
                }
              },
              on_all_tasks_complete: {
                client_side_validation: true,
                required: false,
                serialized_name: 'onAllTasksComplete',
                type: {
                  name: 'Enum',
                  module: 'OnAllTasksComplete'
                }
              },
              on_task_failure: {
                client_side_validation: true,
                required: false,
                serialized_name: 'onTaskFailure',
                type: {
                  name: 'Enum',
                  module: 'OnTaskFailure'
                }
              },
              metadata: {
                client_side_validation: true,
                required: false,
                serialized_name: 'metadata',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'MetadataItemElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'MetadataItem'
                      }
                  }
                }
              },
              execution_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'executionInfo',
                type: {
                  name: 'Composite',
                  class_name: 'JobExecutionInformation'
                }
              },
              stats: {
                client_side_validation: true,
                required: false,
                serialized_name: 'stats',
                type: {
                  name: 'Composite',
                  class_name: 'JobStatistics'
                }
              }
            }
          }
        }
      end
    end
  end
end
