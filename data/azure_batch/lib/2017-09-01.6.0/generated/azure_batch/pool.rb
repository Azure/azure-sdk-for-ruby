# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2017_09_01_6_0
  #
  # A client for issuing REST requests to the Azure Batch service.
  #
  class Pool
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Pool class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [BatchServiceClient] reference to the BatchServiceClient
    attr_reader :client

    #
    # Lists the usage metrics, aggregated by pool across individual time intervals,
    # for the specified account.
    #
    # If you do not specify a $filter clause including a poolId, the response
    # includes all pools that existed in the account in the time range of the
    # returned aggregation intervals. If you do not specify a $filter clause
    # including a startTime or endTime these filters default to the start and end
    # times of the last aggregation interval currently available; that is, only the
    # last aggregation interval is returned.
    #
    # @param pool_list_usage_metrics_options [PoolListUsageMetricsOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<PoolUsageMetrics>] operation results.
    #
    def list_usage_metrics(pool_list_usage_metrics_options:nil, custom_headers:nil)
      first_page = list_usage_metrics_as_lazy(pool_list_usage_metrics_options:pool_list_usage_metrics_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Lists the usage metrics, aggregated by pool across individual time intervals,
    # for the specified account.
    #
    # If you do not specify a $filter clause including a poolId, the response
    # includes all pools that existed in the account in the time range of the
    # returned aggregation intervals. If you do not specify a $filter clause
    # including a startTime or endTime these filters default to the start and end
    # times of the last aggregation interval currently available; that is, only the
    # last aggregation interval is returned.
    #
    # @param pool_list_usage_metrics_options [PoolListUsageMetricsOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_usage_metrics_with_http_info(pool_list_usage_metrics_options:nil, custom_headers:nil)
      list_usage_metrics_async(pool_list_usage_metrics_options:pool_list_usage_metrics_options, custom_headers:custom_headers).value!
    end

    #
    # Lists the usage metrics, aggregated by pool across individual time intervals,
    # for the specified account.
    #
    # If you do not specify a $filter clause including a poolId, the response
    # includes all pools that existed in the account in the time range of the
    # returned aggregation intervals. If you do not specify a $filter clause
    # including a startTime or endTime these filters default to the start and end
    # times of the last aggregation interval currently available; that is, only the
    # last aggregation interval is returned.
    #
    # @param pool_list_usage_metrics_options [PoolListUsageMetricsOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_usage_metrics_async(pool_list_usage_metrics_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      start_time = nil
      end_time = nil
      filter = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless pool_list_usage_metrics_options.nil?
        start_time = pool_list_usage_metrics_options.startTime
      end
      unless pool_list_usage_metrics_options.nil?
        end_time = pool_list_usage_metrics_options.endTime
      end
      unless pool_list_usage_metrics_options.nil?
        filter = pool_list_usage_metrics_options.filter
      end
      unless pool_list_usage_metrics_options.nil?
        max_results = pool_list_usage_metrics_options.maxResults
      end
      unless pool_list_usage_metrics_options.nil?
        timeout = pool_list_usage_metrics_options.timeout
      end
      unless pool_list_usage_metrics_options.nil?
        client_request_id = pool_list_usage_metrics_options.client_request_id
      end
      unless pool_list_usage_metrics_options.nil?
        return_client_request_id = pool_list_usage_metrics_options.return_client_request_id
      end
      unless pool_list_usage_metrics_options.nil?
        ocp_date = pool_list_usage_metrics_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'poolusagemetrics'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'starttime' => start_time,'endtime' => end_time,'$filter' => filter,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2017_09_01_6_0::Models::PoolListUsageMetricsResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets lifetime summary statistics for all of the pools in the specified
    # account.
    #
    # Statistics are aggregated across all pools that have ever existed in the
    # account, from account creation to the last update time of the statistics.
    #
    # @param pool_get_all_lifetime_statistics_options
    # [PoolGetAllLifetimeStatisticsOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PoolStatistics] operation results.
    #
    def get_all_lifetime_statistics(pool_get_all_lifetime_statistics_options:nil, custom_headers:nil)
      response = get_all_lifetime_statistics_async(pool_get_all_lifetime_statistics_options:pool_get_all_lifetime_statistics_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets lifetime summary statistics for all of the pools in the specified
    # account.
    #
    # Statistics are aggregated across all pools that have ever existed in the
    # account, from account creation to the last update time of the statistics.
    #
    # @param pool_get_all_lifetime_statistics_options
    # [PoolGetAllLifetimeStatisticsOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_all_lifetime_statistics_with_http_info(pool_get_all_lifetime_statistics_options:nil, custom_headers:nil)
      get_all_lifetime_statistics_async(pool_get_all_lifetime_statistics_options:pool_get_all_lifetime_statistics_options, custom_headers:custom_headers).value!
    end

    #
    # Gets lifetime summary statistics for all of the pools in the specified
    # account.
    #
    # Statistics are aggregated across all pools that have ever existed in the
    # account, from account creation to the last update time of the statistics.
    #
    # @param pool_get_all_lifetime_statistics_options
    # [PoolGetAllLifetimeStatisticsOptions] Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_all_lifetime_statistics_async(pool_get_all_lifetime_statistics_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless pool_get_all_lifetime_statistics_options.nil?
        timeout = pool_get_all_lifetime_statistics_options.timeout
      end
      unless pool_get_all_lifetime_statistics_options.nil?
        client_request_id = pool_get_all_lifetime_statistics_options.client_request_id
      end
      unless pool_get_all_lifetime_statistics_options.nil?
        return_client_request_id = pool_get_all_lifetime_statistics_options.return_client_request_id
      end
      unless pool_get_all_lifetime_statistics_options.nil?
        ocp_date = pool_get_all_lifetime_statistics_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'lifetimepoolstats'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2017_09_01_6_0::Models::PoolStatistics.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a pool to the specified account.
    #
    # When naming pools, avoid including sensitive information such as user names
    # or secret project names. This information may appear in telemetry logs
    # accessible to Microsoft Support engineers.
    #
    # @param pool [PoolAddParameter] The pool to be added.
    # @param pool_add_options [PoolAddOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def add(pool, pool_add_options:nil, custom_headers:nil)
      response = add_async(pool, pool_add_options:pool_add_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Adds a pool to the specified account.
    #
    # When naming pools, avoid including sensitive information such as user names
    # or secret project names. This information may appear in telemetry logs
    # accessible to Microsoft Support engineers.
    #
    # @param pool [PoolAddParameter] The pool to be added.
    # @param pool_add_options [PoolAddOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_with_http_info(pool, pool_add_options:nil, custom_headers:nil)
      add_async(pool, pool_add_options:pool_add_options, custom_headers:custom_headers).value!
    end

    #
    # Adds a pool to the specified account.
    #
    # When naming pools, avoid including sensitive information such as user names
    # or secret project names. This information may appear in telemetry logs
    # accessible to Microsoft Support engineers.
    #
    # @param pool [PoolAddParameter] The pool to be added.
    # @param pool_add_options [PoolAddOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_async(pool, pool_add_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool is nil' if pool.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless pool_add_options.nil?
        timeout = pool_add_options.timeout
      end
      unless pool_add_options.nil?
        client_request_id = pool_add_options.client_request_id
      end
      unless pool_add_options.nil?
        return_client_request_id = pool_add_options.return_client_request_id
      end
      unless pool_add_options.nil?
        ocp_date = pool_add_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2017_09_01_6_0::Models::PoolAddParameter.mapper()
      request_content = @client.serialize(request_mapper,  pool)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'pools'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Lists all of the pools in the specified account.
    #
    # @param pool_list_options [PoolListOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<CloudPool>] operation results.
    #
    def list(pool_list_options:nil, custom_headers:nil)
      first_page = list_as_lazy(pool_list_options:pool_list_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Lists all of the pools in the specified account.
    #
    # @param pool_list_options [PoolListOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(pool_list_options:nil, custom_headers:nil)
      list_async(pool_list_options:pool_list_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the pools in the specified account.
    #
    # @param pool_list_options [PoolListOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(pool_list_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      filter = nil
      select = nil
      expand = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless pool_list_options.nil?
        filter = pool_list_options.filter
      end
      unless pool_list_options.nil?
        select = pool_list_options.select
      end
      unless pool_list_options.nil?
        expand = pool_list_options.expand
      end
      unless pool_list_options.nil?
        max_results = pool_list_options.maxResults
      end
      unless pool_list_options.nil?
        timeout = pool_list_options.timeout
      end
      unless pool_list_options.nil?
        client_request_id = pool_list_options.client_request_id
      end
      unless pool_list_options.nil?
        return_client_request_id = pool_list_options.return_client_request_id
      end
      unless pool_list_options.nil?
        ocp_date = pool_list_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'pools'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'$filter' => filter,'$select' => select,'$expand' => expand,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2017_09_01_6_0::Models::CloudPoolListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a pool from the specified account.
    #
    # When you request that a pool be deleted, the following actions occur: the
    # pool state is set to deleting; any ongoing resize operation on the pool are
    # stopped; the Batch service starts resizing the pool to zero nodes; any tasks
    # running on existing nodes are terminated and requeued (as if a resize pool
    # operation had been requested with the default requeue option); finally, the
    # pool is removed from the system. Because running tasks are requeued, the user
    # can rerun these tasks by updating their job to target a different pool. The
    # tasks can then run on the new pool. If you want to override the requeue
    # behavior, then you should call resize pool explicitly to shrink the pool to
    # zero size before deleting the pool. If you call an Update, Patch or Delete
    # API on a pool in the deleting state, it will fail with HTTP status code 409
    # with error code PoolBeingDeleted.
    #
    # @param pool_id [String] The ID of the pool to delete.
    # @param pool_delete_options [PoolDeleteOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete(pool_id, pool_delete_options:nil, custom_headers:nil)
      response = delete_async(pool_id, pool_delete_options:pool_delete_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes a pool from the specified account.
    #
    # When you request that a pool be deleted, the following actions occur: the
    # pool state is set to deleting; any ongoing resize operation on the pool are
    # stopped; the Batch service starts resizing the pool to zero nodes; any tasks
    # running on existing nodes are terminated and requeued (as if a resize pool
    # operation had been requested with the default requeue option); finally, the
    # pool is removed from the system. Because running tasks are requeued, the user
    # can rerun these tasks by updating their job to target a different pool. The
    # tasks can then run on the new pool. If you want to override the requeue
    # behavior, then you should call resize pool explicitly to shrink the pool to
    # zero size before deleting the pool. If you call an Update, Patch or Delete
    # API on a pool in the deleting state, it will fail with HTTP status code 409
    # with error code PoolBeingDeleted.
    #
    # @param pool_id [String] The ID of the pool to delete.
    # @param pool_delete_options [PoolDeleteOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(pool_id, pool_delete_options:nil, custom_headers:nil)
      delete_async(pool_id, pool_delete_options:pool_delete_options, custom_headers:custom_headers).value!
    end

    #
    # Deletes a pool from the specified account.
    #
    # When you request that a pool be deleted, the following actions occur: the
    # pool state is set to deleting; any ongoing resize operation on the pool are
    # stopped; the Batch service starts resizing the pool to zero nodes; any tasks
    # running on existing nodes are terminated and requeued (as if a resize pool
    # operation had been requested with the default requeue option); finally, the
    # pool is removed from the system. Because running tasks are requeued, the user
    # can rerun these tasks by updating their job to target a different pool. The
    # tasks can then run on the new pool. If you want to override the requeue
    # behavior, then you should call resize pool explicitly to shrink the pool to
    # zero size before deleting the pool. If you call an Update, Patch or Delete
    # API on a pool in the deleting state, it will fail with HTTP status code 409
    # with error code PoolBeingDeleted.
    #
    # @param pool_id [String] The ID of the pool to delete.
    # @param pool_delete_options [PoolDeleteOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(pool_id, pool_delete_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless pool_delete_options.nil?
        timeout = pool_delete_options.timeout
      end
      unless pool_delete_options.nil?
        client_request_id = pool_delete_options.client_request_id
      end
      unless pool_delete_options.nil?
        return_client_request_id = pool_delete_options.return_client_request_id
      end
      unless pool_delete_options.nil?
        ocp_date = pool_delete_options.ocp_date
      end
      unless pool_delete_options.nil?
        if_match = pool_delete_options.if_match
      end
      unless pool_delete_options.nil?
        if_none_match = pool_delete_options.if_none_match
      end
      unless pool_delete_options.nil?
        if_modified_since = pool_delete_options.if_modified_since
      end
      unless pool_delete_options.nil?
        if_unmodified_since = pool_delete_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'pools/{poolId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Gets basic properties of a pool.
    #
    # @param pool_id [String] The ID of the pool to get.
    # @param pool_exists_options [PoolExistsOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Boolean] operation results.
    #
    def exists(pool_id, pool_exists_options:nil, custom_headers:nil)
      response = exists_async(pool_id, pool_exists_options:pool_exists_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets basic properties of a pool.
    #
    # @param pool_id [String] The ID of the pool to get.
    # @param pool_exists_options [PoolExistsOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def exists_with_http_info(pool_id, pool_exists_options:nil, custom_headers:nil)
      exists_async(pool_id, pool_exists_options:pool_exists_options, custom_headers:custom_headers).value!
    end

    #
    # Gets basic properties of a pool.
    #
    # @param pool_id [String] The ID of the pool to get.
    # @param pool_exists_options [PoolExistsOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def exists_async(pool_id, pool_exists_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless pool_exists_options.nil?
        timeout = pool_exists_options.timeout
      end
      unless pool_exists_options.nil?
        client_request_id = pool_exists_options.client_request_id
      end
      unless pool_exists_options.nil?
        return_client_request_id = pool_exists_options.return_client_request_id
      end
      unless pool_exists_options.nil?
        ocp_date = pool_exists_options.ocp_date
      end
      unless pool_exists_options.nil?
        if_match = pool_exists_options.if_match
      end
      unless pool_exists_options.nil?
        if_none_match = pool_exists_options.if_none_match
      end
      unless pool_exists_options.nil?
        if_modified_since = pool_exists_options.if_modified_since
      end
      unless pool_exists_options.nil?
        if_unmodified_since = pool_exists_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'pools/{poolId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.body = (status_code == 200)
        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Gets information about the specified pool.
    #
    # @param pool_id [String] The ID of the pool to get.
    # @param pool_get_options [PoolGetOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudPool] operation results.
    #
    def get(pool_id, pool_get_options:nil, custom_headers:nil)
      response = get_async(pool_id, pool_get_options:pool_get_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about the specified pool.
    #
    # @param pool_id [String] The ID of the pool to get.
    # @param pool_get_options [PoolGetOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(pool_id, pool_get_options:nil, custom_headers:nil)
      get_async(pool_id, pool_get_options:pool_get_options, custom_headers:custom_headers).value!
    end

    #
    # Gets information about the specified pool.
    #
    # @param pool_id [String] The ID of the pool to get.
    # @param pool_get_options [PoolGetOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(pool_id, pool_get_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      select = nil
      expand = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless pool_get_options.nil?
        select = pool_get_options.select
      end
      unless pool_get_options.nil?
        expand = pool_get_options.expand
      end
      unless pool_get_options.nil?
        timeout = pool_get_options.timeout
      end
      unless pool_get_options.nil?
        client_request_id = pool_get_options.client_request_id
      end
      unless pool_get_options.nil?
        return_client_request_id = pool_get_options.return_client_request_id
      end
      unless pool_get_options.nil?
        ocp_date = pool_get_options.ocp_date
      end
      unless pool_get_options.nil?
        if_match = pool_get_options.if_match
      end
      unless pool_get_options.nil?
        if_none_match = pool_get_options.if_none_match
      end
      unless pool_get_options.nil?
        if_modified_since = pool_get_options.if_modified_since
      end
      unless pool_get_options.nil?
        if_unmodified_since = pool_get_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'pools/{poolId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'$select' => select,'$expand' => expand,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2017_09_01_6_0::Models::CloudPool.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the properties of the specified pool.
    #
    # This only replaces the pool properties specified in the request. For example,
    # if the pool has a start task associated with it, and a request does not
    # specify a start task element, then the pool keeps the existing start task.
    #
    # @param pool_id [String] The ID of the pool to update.
    # @param pool_patch_parameter [PoolPatchParameter] The parameters for the
    # request.
    # @param pool_patch_options [PoolPatchOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def patch(pool_id, pool_patch_parameter, pool_patch_options:nil, custom_headers:nil)
      response = patch_async(pool_id, pool_patch_parameter, pool_patch_options:pool_patch_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Updates the properties of the specified pool.
    #
    # This only replaces the pool properties specified in the request. For example,
    # if the pool has a start task associated with it, and a request does not
    # specify a start task element, then the pool keeps the existing start task.
    #
    # @param pool_id [String] The ID of the pool to update.
    # @param pool_patch_parameter [PoolPatchParameter] The parameters for the
    # request.
    # @param pool_patch_options [PoolPatchOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def patch_with_http_info(pool_id, pool_patch_parameter, pool_patch_options:nil, custom_headers:nil)
      patch_async(pool_id, pool_patch_parameter, pool_patch_options:pool_patch_options, custom_headers:custom_headers).value!
    end

    #
    # Updates the properties of the specified pool.
    #
    # This only replaces the pool properties specified in the request. For example,
    # if the pool has a start task associated with it, and a request does not
    # specify a start task element, then the pool keeps the existing start task.
    #
    # @param pool_id [String] The ID of the pool to update.
    # @param pool_patch_parameter [PoolPatchParameter] The parameters for the
    # request.
    # @param pool_patch_options [PoolPatchOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch_async(pool_id, pool_patch_parameter, pool_patch_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'pool_patch_parameter is nil' if pool_patch_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless pool_patch_options.nil?
        timeout = pool_patch_options.timeout
      end
      unless pool_patch_options.nil?
        client_request_id = pool_patch_options.client_request_id
      end
      unless pool_patch_options.nil?
        return_client_request_id = pool_patch_options.return_client_request_id
      end
      unless pool_patch_options.nil?
        ocp_date = pool_patch_options.ocp_date
      end
      unless pool_patch_options.nil?
        if_match = pool_patch_options.if_match
      end
      unless pool_patch_options.nil?
        if_none_match = pool_patch_options.if_none_match
      end
      unless pool_patch_options.nil?
        if_modified_since = pool_patch_options.if_modified_since
      end
      unless pool_patch_options.nil?
        if_unmodified_since = pool_patch_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2017_09_01_6_0::Models::PoolPatchParameter.mapper()
      request_content = @client.serialize(request_mapper,  pool_patch_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'pools/{poolId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Disables automatic scaling for a pool.
    #
    # @param pool_id [String] The ID of the pool on which to disable automatic
    # scaling.
    # @param pool_disable_auto_scale_options [PoolDisableAutoScaleOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def disable_auto_scale(pool_id, pool_disable_auto_scale_options:nil, custom_headers:nil)
      response = disable_auto_scale_async(pool_id, pool_disable_auto_scale_options:pool_disable_auto_scale_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Disables automatic scaling for a pool.
    #
    # @param pool_id [String] The ID of the pool on which to disable automatic
    # scaling.
    # @param pool_disable_auto_scale_options [PoolDisableAutoScaleOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def disable_auto_scale_with_http_info(pool_id, pool_disable_auto_scale_options:nil, custom_headers:nil)
      disable_auto_scale_async(pool_id, pool_disable_auto_scale_options:pool_disable_auto_scale_options, custom_headers:custom_headers).value!
    end

    #
    # Disables automatic scaling for a pool.
    #
    # @param pool_id [String] The ID of the pool on which to disable automatic
    # scaling.
    # @param pool_disable_auto_scale_options [PoolDisableAutoScaleOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def disable_auto_scale_async(pool_id, pool_disable_auto_scale_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless pool_disable_auto_scale_options.nil?
        timeout = pool_disable_auto_scale_options.timeout
      end
      unless pool_disable_auto_scale_options.nil?
        client_request_id = pool_disable_auto_scale_options.client_request_id
      end
      unless pool_disable_auto_scale_options.nil?
        return_client_request_id = pool_disable_auto_scale_options.return_client_request_id
      end
      unless pool_disable_auto_scale_options.nil?
        ocp_date = pool_disable_auto_scale_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'pools/{poolId}/disableautoscale'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Enables automatic scaling for a pool.
    #
    # You cannot enable automatic scaling on a pool if a resize operation is in
    # progress on the pool. If automatic scaling of the pool is currently disabled,
    # you must specify a valid autoscale formula as part of the request. If
    # automatic scaling of the pool is already enabled, you may specify a new
    # autoscale formula and/or a new evaluation interval. You cannot call this API
    # for the same pool more than once every 30 seconds.
    #
    # @param pool_id [String] The ID of the pool on which to enable automatic
    # scaling.
    # @param pool_enable_auto_scale_parameter [PoolEnableAutoScaleParameter] The
    # parameters for the request.
    # @param pool_enable_auto_scale_options [PoolEnableAutoScaleOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def enable_auto_scale(pool_id, pool_enable_auto_scale_parameter, pool_enable_auto_scale_options:nil, custom_headers:nil)
      response = enable_auto_scale_async(pool_id, pool_enable_auto_scale_parameter, pool_enable_auto_scale_options:pool_enable_auto_scale_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Enables automatic scaling for a pool.
    #
    # You cannot enable automatic scaling on a pool if a resize operation is in
    # progress on the pool. If automatic scaling of the pool is currently disabled,
    # you must specify a valid autoscale formula as part of the request. If
    # automatic scaling of the pool is already enabled, you may specify a new
    # autoscale formula and/or a new evaluation interval. You cannot call this API
    # for the same pool more than once every 30 seconds.
    #
    # @param pool_id [String] The ID of the pool on which to enable automatic
    # scaling.
    # @param pool_enable_auto_scale_parameter [PoolEnableAutoScaleParameter] The
    # parameters for the request.
    # @param pool_enable_auto_scale_options [PoolEnableAutoScaleOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def enable_auto_scale_with_http_info(pool_id, pool_enable_auto_scale_parameter, pool_enable_auto_scale_options:nil, custom_headers:nil)
      enable_auto_scale_async(pool_id, pool_enable_auto_scale_parameter, pool_enable_auto_scale_options:pool_enable_auto_scale_options, custom_headers:custom_headers).value!
    end

    #
    # Enables automatic scaling for a pool.
    #
    # You cannot enable automatic scaling on a pool if a resize operation is in
    # progress on the pool. If automatic scaling of the pool is currently disabled,
    # you must specify a valid autoscale formula as part of the request. If
    # automatic scaling of the pool is already enabled, you may specify a new
    # autoscale formula and/or a new evaluation interval. You cannot call this API
    # for the same pool more than once every 30 seconds.
    #
    # @param pool_id [String] The ID of the pool on which to enable automatic
    # scaling.
    # @param pool_enable_auto_scale_parameter [PoolEnableAutoScaleParameter] The
    # parameters for the request.
    # @param pool_enable_auto_scale_options [PoolEnableAutoScaleOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def enable_auto_scale_async(pool_id, pool_enable_auto_scale_parameter, pool_enable_auto_scale_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'pool_enable_auto_scale_parameter is nil' if pool_enable_auto_scale_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless pool_enable_auto_scale_options.nil?
        timeout = pool_enable_auto_scale_options.timeout
      end
      unless pool_enable_auto_scale_options.nil?
        client_request_id = pool_enable_auto_scale_options.client_request_id
      end
      unless pool_enable_auto_scale_options.nil?
        return_client_request_id = pool_enable_auto_scale_options.return_client_request_id
      end
      unless pool_enable_auto_scale_options.nil?
        ocp_date = pool_enable_auto_scale_options.ocp_date
      end
      unless pool_enable_auto_scale_options.nil?
        if_match = pool_enable_auto_scale_options.if_match
      end
      unless pool_enable_auto_scale_options.nil?
        if_none_match = pool_enable_auto_scale_options.if_none_match
      end
      unless pool_enable_auto_scale_options.nil?
        if_modified_since = pool_enable_auto_scale_options.if_modified_since
      end
      unless pool_enable_auto_scale_options.nil?
        if_unmodified_since = pool_enable_auto_scale_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2017_09_01_6_0::Models::PoolEnableAutoScaleParameter.mapper()
      request_content = @client.serialize(request_mapper,  pool_enable_auto_scale_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'pools/{poolId}/enableautoscale'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Gets the result of evaluating an automatic scaling formula on the pool.
    #
    # This API is primarily for validating an autoscale formula, as it simply
    # returns the result without applying the formula to the pool. The pool must
    # have auto scaling enabled in order to evaluate a formula.
    #
    # @param pool_id [String] The ID of the pool on which to evaluate the automatic
    # scaling formula.
    # @param pool_evaluate_auto_scale_parameter [PoolEvaluateAutoScaleParameter]
    # The parameters for the request.
    # @param pool_evaluate_auto_scale_options [PoolEvaluateAutoScaleOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [AutoScaleRun] operation results.
    #
    def evaluate_auto_scale(pool_id, pool_evaluate_auto_scale_parameter, pool_evaluate_auto_scale_options:nil, custom_headers:nil)
      response = evaluate_auto_scale_async(pool_id, pool_evaluate_auto_scale_parameter, pool_evaluate_auto_scale_options:pool_evaluate_auto_scale_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the result of evaluating an automatic scaling formula on the pool.
    #
    # This API is primarily for validating an autoscale formula, as it simply
    # returns the result without applying the formula to the pool. The pool must
    # have auto scaling enabled in order to evaluate a formula.
    #
    # @param pool_id [String] The ID of the pool on which to evaluate the automatic
    # scaling formula.
    # @param pool_evaluate_auto_scale_parameter [PoolEvaluateAutoScaleParameter]
    # The parameters for the request.
    # @param pool_evaluate_auto_scale_options [PoolEvaluateAutoScaleOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def evaluate_auto_scale_with_http_info(pool_id, pool_evaluate_auto_scale_parameter, pool_evaluate_auto_scale_options:nil, custom_headers:nil)
      evaluate_auto_scale_async(pool_id, pool_evaluate_auto_scale_parameter, pool_evaluate_auto_scale_options:pool_evaluate_auto_scale_options, custom_headers:custom_headers).value!
    end

    #
    # Gets the result of evaluating an automatic scaling formula on the pool.
    #
    # This API is primarily for validating an autoscale formula, as it simply
    # returns the result without applying the formula to the pool. The pool must
    # have auto scaling enabled in order to evaluate a formula.
    #
    # @param pool_id [String] The ID of the pool on which to evaluate the automatic
    # scaling formula.
    # @param pool_evaluate_auto_scale_parameter [PoolEvaluateAutoScaleParameter]
    # The parameters for the request.
    # @param pool_evaluate_auto_scale_options [PoolEvaluateAutoScaleOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def evaluate_auto_scale_async(pool_id, pool_evaluate_auto_scale_parameter, pool_evaluate_auto_scale_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'pool_evaluate_auto_scale_parameter is nil' if pool_evaluate_auto_scale_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless pool_evaluate_auto_scale_options.nil?
        timeout = pool_evaluate_auto_scale_options.timeout
      end
      unless pool_evaluate_auto_scale_options.nil?
        client_request_id = pool_evaluate_auto_scale_options.client_request_id
      end
      unless pool_evaluate_auto_scale_options.nil?
        return_client_request_id = pool_evaluate_auto_scale_options.return_client_request_id
      end
      unless pool_evaluate_auto_scale_options.nil?
        ocp_date = pool_evaluate_auto_scale_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2017_09_01_6_0::Models::PoolEvaluateAutoScaleParameter.mapper()
      request_content = @client.serialize(request_mapper,  pool_evaluate_auto_scale_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'pools/{poolId}/evaluateautoscale'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2017_09_01_6_0::Models::AutoScaleRun.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Changes the number of compute nodes that are assigned to a pool.
    #
    # You can only resize a pool when its allocation state is steady. If the pool
    # is already resizing, the request fails with status code 409. When you resize
    # a pool, the pool's allocation state changes from steady to resizing. You
    # cannot resize pools which are configured for automatic scaling. If you try to
    # do this, the Batch service returns an error 409. If you resize a pool
    # downwards, the Batch service chooses which nodes to remove. To remove
    # specific nodes, use the pool remove nodes API instead.
    #
    # @param pool_id [String] The ID of the pool to resize.
    # @param pool_resize_parameter [PoolResizeParameter] The parameters for the
    # request.
    # @param pool_resize_options [PoolResizeOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def resize(pool_id, pool_resize_parameter, pool_resize_options:nil, custom_headers:nil)
      response = resize_async(pool_id, pool_resize_parameter, pool_resize_options:pool_resize_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Changes the number of compute nodes that are assigned to a pool.
    #
    # You can only resize a pool when its allocation state is steady. If the pool
    # is already resizing, the request fails with status code 409. When you resize
    # a pool, the pool's allocation state changes from steady to resizing. You
    # cannot resize pools which are configured for automatic scaling. If you try to
    # do this, the Batch service returns an error 409. If you resize a pool
    # downwards, the Batch service chooses which nodes to remove. To remove
    # specific nodes, use the pool remove nodes API instead.
    #
    # @param pool_id [String] The ID of the pool to resize.
    # @param pool_resize_parameter [PoolResizeParameter] The parameters for the
    # request.
    # @param pool_resize_options [PoolResizeOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def resize_with_http_info(pool_id, pool_resize_parameter, pool_resize_options:nil, custom_headers:nil)
      resize_async(pool_id, pool_resize_parameter, pool_resize_options:pool_resize_options, custom_headers:custom_headers).value!
    end

    #
    # Changes the number of compute nodes that are assigned to a pool.
    #
    # You can only resize a pool when its allocation state is steady. If the pool
    # is already resizing, the request fails with status code 409. When you resize
    # a pool, the pool's allocation state changes from steady to resizing. You
    # cannot resize pools which are configured for automatic scaling. If you try to
    # do this, the Batch service returns an error 409. If you resize a pool
    # downwards, the Batch service chooses which nodes to remove. To remove
    # specific nodes, use the pool remove nodes API instead.
    #
    # @param pool_id [String] The ID of the pool to resize.
    # @param pool_resize_parameter [PoolResizeParameter] The parameters for the
    # request.
    # @param pool_resize_options [PoolResizeOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def resize_async(pool_id, pool_resize_parameter, pool_resize_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'pool_resize_parameter is nil' if pool_resize_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless pool_resize_options.nil?
        timeout = pool_resize_options.timeout
      end
      unless pool_resize_options.nil?
        client_request_id = pool_resize_options.client_request_id
      end
      unless pool_resize_options.nil?
        return_client_request_id = pool_resize_options.return_client_request_id
      end
      unless pool_resize_options.nil?
        ocp_date = pool_resize_options.ocp_date
      end
      unless pool_resize_options.nil?
        if_match = pool_resize_options.if_match
      end
      unless pool_resize_options.nil?
        if_none_match = pool_resize_options.if_none_match
      end
      unless pool_resize_options.nil?
        if_modified_since = pool_resize_options.if_modified_since
      end
      unless pool_resize_options.nil?
        if_unmodified_since = pool_resize_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2017_09_01_6_0::Models::PoolResizeParameter.mapper()
      request_content = @client.serialize(request_mapper,  pool_resize_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'pools/{poolId}/resize'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Stops an ongoing resize operation on the pool.
    #
    # This does not restore the pool to its previous state before the resize
    # operation: it only stops any further changes being made, and the pool
    # maintains its current state. After stopping, the pool stabilizes at the
    # number of nodes it was at when the stop operation was done. During the stop
    # operation, the pool allocation state changes first to stopping and then to
    # steady. A resize operation need not be an explicit resize pool request; this
    # API can also be used to halt the initial sizing of the pool when it is
    # created.
    #
    # @param pool_id [String] The ID of the pool whose resizing you want to stop.
    # @param pool_stop_resize_options [PoolStopResizeOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def stop_resize(pool_id, pool_stop_resize_options:nil, custom_headers:nil)
      response = stop_resize_async(pool_id, pool_stop_resize_options:pool_stop_resize_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Stops an ongoing resize operation on the pool.
    #
    # This does not restore the pool to its previous state before the resize
    # operation: it only stops any further changes being made, and the pool
    # maintains its current state. After stopping, the pool stabilizes at the
    # number of nodes it was at when the stop operation was done. During the stop
    # operation, the pool allocation state changes first to stopping and then to
    # steady. A resize operation need not be an explicit resize pool request; this
    # API can also be used to halt the initial sizing of the pool when it is
    # created.
    #
    # @param pool_id [String] The ID of the pool whose resizing you want to stop.
    # @param pool_stop_resize_options [PoolStopResizeOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def stop_resize_with_http_info(pool_id, pool_stop_resize_options:nil, custom_headers:nil)
      stop_resize_async(pool_id, pool_stop_resize_options:pool_stop_resize_options, custom_headers:custom_headers).value!
    end

    #
    # Stops an ongoing resize operation on the pool.
    #
    # This does not restore the pool to its previous state before the resize
    # operation: it only stops any further changes being made, and the pool
    # maintains its current state. After stopping, the pool stabilizes at the
    # number of nodes it was at when the stop operation was done. During the stop
    # operation, the pool allocation state changes first to stopping and then to
    # steady. A resize operation need not be an explicit resize pool request; this
    # API can also be used to halt the initial sizing of the pool when it is
    # created.
    #
    # @param pool_id [String] The ID of the pool whose resizing you want to stop.
    # @param pool_stop_resize_options [PoolStopResizeOptions] Additional parameters
    # for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def stop_resize_async(pool_id, pool_stop_resize_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless pool_stop_resize_options.nil?
        timeout = pool_stop_resize_options.timeout
      end
      unless pool_stop_resize_options.nil?
        client_request_id = pool_stop_resize_options.client_request_id
      end
      unless pool_stop_resize_options.nil?
        return_client_request_id = pool_stop_resize_options.return_client_request_id
      end
      unless pool_stop_resize_options.nil?
        ocp_date = pool_stop_resize_options.ocp_date
      end
      unless pool_stop_resize_options.nil?
        if_match = pool_stop_resize_options.if_match
      end
      unless pool_stop_resize_options.nil?
        if_none_match = pool_stop_resize_options.if_none_match
      end
      unless pool_stop_resize_options.nil?
        if_modified_since = pool_stop_resize_options.if_modified_since
      end
      unless pool_stop_resize_options.nil?
        if_unmodified_since = pool_stop_resize_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'pools/{poolId}/stopresize'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Updates the properties of the specified pool.
    #
    # This fully replaces all the updatable properties of the pool. For example, if
    # the pool has a start task associated with it and if start task is not
    # specified with this request, then the Batch service will remove the existing
    # start task.
    #
    # @param pool_id [String] The ID of the pool to update.
    # @param pool_update_properties_parameter [PoolUpdatePropertiesParameter] The
    # parameters for the request.
    # @param pool_update_properties_options [PoolUpdatePropertiesOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def update_properties(pool_id, pool_update_properties_parameter, pool_update_properties_options:nil, custom_headers:nil)
      response = update_properties_async(pool_id, pool_update_properties_parameter, pool_update_properties_options:pool_update_properties_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Updates the properties of the specified pool.
    #
    # This fully replaces all the updatable properties of the pool. For example, if
    # the pool has a start task associated with it and if start task is not
    # specified with this request, then the Batch service will remove the existing
    # start task.
    #
    # @param pool_id [String] The ID of the pool to update.
    # @param pool_update_properties_parameter [PoolUpdatePropertiesParameter] The
    # parameters for the request.
    # @param pool_update_properties_options [PoolUpdatePropertiesOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_properties_with_http_info(pool_id, pool_update_properties_parameter, pool_update_properties_options:nil, custom_headers:nil)
      update_properties_async(pool_id, pool_update_properties_parameter, pool_update_properties_options:pool_update_properties_options, custom_headers:custom_headers).value!
    end

    #
    # Updates the properties of the specified pool.
    #
    # This fully replaces all the updatable properties of the pool. For example, if
    # the pool has a start task associated with it and if start task is not
    # specified with this request, then the Batch service will remove the existing
    # start task.
    #
    # @param pool_id [String] The ID of the pool to update.
    # @param pool_update_properties_parameter [PoolUpdatePropertiesParameter] The
    # parameters for the request.
    # @param pool_update_properties_options [PoolUpdatePropertiesOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_properties_async(pool_id, pool_update_properties_parameter, pool_update_properties_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'pool_update_properties_parameter is nil' if pool_update_properties_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless pool_update_properties_options.nil?
        timeout = pool_update_properties_options.timeout
      end
      unless pool_update_properties_options.nil?
        client_request_id = pool_update_properties_options.client_request_id
      end
      unless pool_update_properties_options.nil?
        return_client_request_id = pool_update_properties_options.return_client_request_id
      end
      unless pool_update_properties_options.nil?
        ocp_date = pool_update_properties_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2017_09_01_6_0::Models::PoolUpdatePropertiesParameter.mapper()
      request_content = @client.serialize(request_mapper,  pool_update_properties_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'pools/{poolId}/updateproperties'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Upgrades the operating system of the specified pool.
    #
    # During an upgrade, the Batch service upgrades each compute node in the pool.
    # When a compute node is chosen for upgrade, any tasks running on that node are
    # removed from the node and returned to the queue to be rerun later (or on a
    # different compute node). The node will be unavailable until the upgrade is
    # complete. This operation results in temporarily reduced pool capacity as
    # nodes are taken out of service to be upgraded. Although the Batch service
    # tries to avoid upgrading all compute nodes at the same time, it does not
    # guarantee to do this (particularly on small pools); therefore, the pool may
    # be temporarily unavailable to run tasks. When this operation runs, the pool
    # state changes to upgrading. When all compute nodes have finished upgrading,
    # the pool state returns to active. While the upgrade is in progress, the
    # pool's currentOSVersion reflects the OS version that nodes are upgrading
    # from, and targetOSVersion reflects the OS version that nodes are upgrading
    # to. Once the upgrade is complete, currentOSVersion is updated to reflect the
    # OS version now running on all nodes. This operation can only be invoked on
    # pools created with the cloudServiceConfiguration property.
    #
    # @param pool_id [String] The ID of the pool to upgrade.
    # @param pool_upgrade_osparameter [PoolUpgradeOSParameter] The parameters for
    # the request.
    # @param pool_upgrade_os_options [PoolUpgradeOsOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def upgrade_os(pool_id, pool_upgrade_osparameter, pool_upgrade_os_options:nil, custom_headers:nil)
      response = upgrade_os_async(pool_id, pool_upgrade_osparameter, pool_upgrade_os_options:pool_upgrade_os_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Upgrades the operating system of the specified pool.
    #
    # During an upgrade, the Batch service upgrades each compute node in the pool.
    # When a compute node is chosen for upgrade, any tasks running on that node are
    # removed from the node and returned to the queue to be rerun later (or on a
    # different compute node). The node will be unavailable until the upgrade is
    # complete. This operation results in temporarily reduced pool capacity as
    # nodes are taken out of service to be upgraded. Although the Batch service
    # tries to avoid upgrading all compute nodes at the same time, it does not
    # guarantee to do this (particularly on small pools); therefore, the pool may
    # be temporarily unavailable to run tasks. When this operation runs, the pool
    # state changes to upgrading. When all compute nodes have finished upgrading,
    # the pool state returns to active. While the upgrade is in progress, the
    # pool's currentOSVersion reflects the OS version that nodes are upgrading
    # from, and targetOSVersion reflects the OS version that nodes are upgrading
    # to. Once the upgrade is complete, currentOSVersion is updated to reflect the
    # OS version now running on all nodes. This operation can only be invoked on
    # pools created with the cloudServiceConfiguration property.
    #
    # @param pool_id [String] The ID of the pool to upgrade.
    # @param pool_upgrade_osparameter [PoolUpgradeOSParameter] The parameters for
    # the request.
    # @param pool_upgrade_os_options [PoolUpgradeOsOptions] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def upgrade_os_with_http_info(pool_id, pool_upgrade_osparameter, pool_upgrade_os_options:nil, custom_headers:nil)
      upgrade_os_async(pool_id, pool_upgrade_osparameter, pool_upgrade_os_options:pool_upgrade_os_options, custom_headers:custom_headers).value!
    end

    #
    # Upgrades the operating system of the specified pool.
    #
    # During an upgrade, the Batch service upgrades each compute node in the pool.
    # When a compute node is chosen for upgrade, any tasks running on that node are
    # removed from the node and returned to the queue to be rerun later (or on a
    # different compute node). The node will be unavailable until the upgrade is
    # complete. This operation results in temporarily reduced pool capacity as
    # nodes are taken out of service to be upgraded. Although the Batch service
    # tries to avoid upgrading all compute nodes at the same time, it does not
    # guarantee to do this (particularly on small pools); therefore, the pool may
    # be temporarily unavailable to run tasks. When this operation runs, the pool
    # state changes to upgrading. When all compute nodes have finished upgrading,
    # the pool state returns to active. While the upgrade is in progress, the
    # pool's currentOSVersion reflects the OS version that nodes are upgrading
    # from, and targetOSVersion reflects the OS version that nodes are upgrading
    # to. Once the upgrade is complete, currentOSVersion is updated to reflect the
    # OS version now running on all nodes. This operation can only be invoked on
    # pools created with the cloudServiceConfiguration property.
    #
    # @param pool_id [String] The ID of the pool to upgrade.
    # @param pool_upgrade_osparameter [PoolUpgradeOSParameter] The parameters for
    # the request.
    # @param pool_upgrade_os_options [PoolUpgradeOsOptions] Additional parameters
    # for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def upgrade_os_async(pool_id, pool_upgrade_osparameter, pool_upgrade_os_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'pool_upgrade_osparameter is nil' if pool_upgrade_osparameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless pool_upgrade_os_options.nil?
        timeout = pool_upgrade_os_options.timeout
      end
      unless pool_upgrade_os_options.nil?
        client_request_id = pool_upgrade_os_options.client_request_id
      end
      unless pool_upgrade_os_options.nil?
        return_client_request_id = pool_upgrade_os_options.return_client_request_id
      end
      unless pool_upgrade_os_options.nil?
        ocp_date = pool_upgrade_os_options.ocp_date
      end
      unless pool_upgrade_os_options.nil?
        if_match = pool_upgrade_os_options.if_match
      end
      unless pool_upgrade_os_options.nil?
        if_none_match = pool_upgrade_os_options.if_none_match
      end
      unless pool_upgrade_os_options.nil?
        if_modified_since = pool_upgrade_os_options.if_modified_since
      end
      unless pool_upgrade_os_options.nil?
        if_unmodified_since = pool_upgrade_os_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2017_09_01_6_0::Models::PoolUpgradeOSParameter.mapper()
      request_content = @client.serialize(request_mapper,  pool_upgrade_osparameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'pools/{poolId}/upgradeos'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Removes compute nodes from the specified pool.
    #
    # This operation can only run when the allocation state of the pool is steady.
    # When this operation runs, the allocation state changes from steady to
    # resizing.
    #
    # @param pool_id [String] The ID of the pool from which you want to remove
    # nodes.
    # @param node_remove_parameter [NodeRemoveParameter] The parameters for the
    # request.
    # @param pool_remove_nodes_options [PoolRemoveNodesOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def remove_nodes(pool_id, node_remove_parameter, pool_remove_nodes_options:nil, custom_headers:nil)
      response = remove_nodes_async(pool_id, node_remove_parameter, pool_remove_nodes_options:pool_remove_nodes_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Removes compute nodes from the specified pool.
    #
    # This operation can only run when the allocation state of the pool is steady.
    # When this operation runs, the allocation state changes from steady to
    # resizing.
    #
    # @param pool_id [String] The ID of the pool from which you want to remove
    # nodes.
    # @param node_remove_parameter [NodeRemoveParameter] The parameters for the
    # request.
    # @param pool_remove_nodes_options [PoolRemoveNodesOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def remove_nodes_with_http_info(pool_id, node_remove_parameter, pool_remove_nodes_options:nil, custom_headers:nil)
      remove_nodes_async(pool_id, node_remove_parameter, pool_remove_nodes_options:pool_remove_nodes_options, custom_headers:custom_headers).value!
    end

    #
    # Removes compute nodes from the specified pool.
    #
    # This operation can only run when the allocation state of the pool is steady.
    # When this operation runs, the allocation state changes from steady to
    # resizing.
    #
    # @param pool_id [String] The ID of the pool from which you want to remove
    # nodes.
    # @param node_remove_parameter [NodeRemoveParameter] The parameters for the
    # request.
    # @param pool_remove_nodes_options [PoolRemoveNodesOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def remove_nodes_async(pool_id, node_remove_parameter, pool_remove_nodes_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'node_remove_parameter is nil' if node_remove_parameter.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_match = nil
      if_none_match = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless pool_remove_nodes_options.nil?
        timeout = pool_remove_nodes_options.timeout
      end
      unless pool_remove_nodes_options.nil?
        client_request_id = pool_remove_nodes_options.client_request_id
      end
      unless pool_remove_nodes_options.nil?
        return_client_request_id = pool_remove_nodes_options.return_client_request_id
      end
      unless pool_remove_nodes_options.nil?
        ocp_date = pool_remove_nodes_options.ocp_date
      end
      unless pool_remove_nodes_options.nil?
        if_match = pool_remove_nodes_options.if_match
      end
      unless pool_remove_nodes_options.nil?
        if_none_match = pool_remove_nodes_options.if_none_match
      end
      unless pool_remove_nodes_options.nil?
        if_modified_since = pool_remove_nodes_options.if_modified_since
      end
      unless pool_remove_nodes_options.nil?
        if_unmodified_since = pool_remove_nodes_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['If-None-Match'] = if_none_match unless if_none_match.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?

      # Serialize Request
      request_mapper = Azure::Batch::V2017_09_01_6_0::Models::NodeRemoveParameter.mapper()
      request_content = @client.serialize(request_mapper,  node_remove_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'pools/{poolId}/removenodes'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Lists the usage metrics, aggregated by pool across individual time intervals,
    # for the specified account.
    #
    # If you do not specify a $filter clause including a poolId, the response
    # includes all pools that existed in the account in the time range of the
    # returned aggregation intervals. If you do not specify a $filter clause
    # including a startTime or endTime these filters default to the start and end
    # times of the last aggregation interval currently available; that is, only the
    # last aggregation interval is returned.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param pool_list_usage_metrics_next_options [PoolListUsageMetricsNextOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PoolListUsageMetricsResult] operation results.
    #
    def list_usage_metrics_next(next_page_link, pool_list_usage_metrics_next_options:nil, custom_headers:nil)
      response = list_usage_metrics_next_async(next_page_link, pool_list_usage_metrics_next_options:pool_list_usage_metrics_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists the usage metrics, aggregated by pool across individual time intervals,
    # for the specified account.
    #
    # If you do not specify a $filter clause including a poolId, the response
    # includes all pools that existed in the account in the time range of the
    # returned aggregation intervals. If you do not specify a $filter clause
    # including a startTime or endTime these filters default to the start and end
    # times of the last aggregation interval currently available; that is, only the
    # last aggregation interval is returned.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param pool_list_usage_metrics_next_options [PoolListUsageMetricsNextOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_usage_metrics_next_with_http_info(next_page_link, pool_list_usage_metrics_next_options:nil, custom_headers:nil)
      list_usage_metrics_next_async(next_page_link, pool_list_usage_metrics_next_options:pool_list_usage_metrics_next_options, custom_headers:custom_headers).value!
    end

    #
    # Lists the usage metrics, aggregated by pool across individual time intervals,
    # for the specified account.
    #
    # If you do not specify a $filter clause including a poolId, the response
    # includes all pools that existed in the account in the time range of the
    # returned aggregation intervals. If you do not specify a $filter clause
    # including a startTime or endTime these filters default to the start and end
    # times of the last aggregation interval currently available; that is, only the
    # last aggregation interval is returned.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param pool_list_usage_metrics_next_options [PoolListUsageMetricsNextOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_usage_metrics_next_async(next_page_link, pool_list_usage_metrics_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless pool_list_usage_metrics_next_options.nil?
        client_request_id = pool_list_usage_metrics_next_options.client_request_id
      end
      unless pool_list_usage_metrics_next_options.nil?
        return_client_request_id = pool_list_usage_metrics_next_options.return_client_request_id
      end
      unless pool_list_usage_metrics_next_options.nil?
        ocp_date = pool_list_usage_metrics_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2017_09_01_6_0::Models::PoolListUsageMetricsResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all of the pools in the specified account.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param pool_list_next_options [PoolListNextOptions] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudPoolListResult] operation results.
    #
    def list_next(next_page_link, pool_list_next_options:nil, custom_headers:nil)
      response = list_next_async(next_page_link, pool_list_next_options:pool_list_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all of the pools in the specified account.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param pool_list_next_options [PoolListNextOptions] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, pool_list_next_options:nil, custom_headers:nil)
      list_next_async(next_page_link, pool_list_next_options:pool_list_next_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the pools in the specified account.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param pool_list_next_options [PoolListNextOptions] Additional parameters for
    # the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, pool_list_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless pool_list_next_options.nil?
        client_request_id = pool_list_next_options.client_request_id
      end
      unless pool_list_next_options.nil?
        return_client_request_id = pool_list_next_options.return_client_request_id
      end
      unless pool_list_next_options.nil?
        ocp_date = pool_list_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2017_09_01_6_0::Models::CloudPoolListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists the usage metrics, aggregated by pool across individual time intervals,
    # for the specified account.
    #
    # If you do not specify a $filter clause including a poolId, the response
    # includes all pools that existed in the account in the time range of the
    # returned aggregation intervals. If you do not specify a $filter clause
    # including a startTime or endTime these filters default to the start and end
    # times of the last aggregation interval currently available; that is, only the
    # last aggregation interval is returned.
    #
    # @param pool_list_usage_metrics_options [PoolListUsageMetricsOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PoolListUsageMetricsResult] which provide lazy access to pages of
    # the response.
    #
    def list_usage_metrics_as_lazy(pool_list_usage_metrics_options:nil, custom_headers:nil)
      response = list_usage_metrics_async(pool_list_usage_metrics_options:pool_list_usage_metrics_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          pool_list_usage_metrics_next_options = pool_list_usage_metrics_options
          list_usage_metrics_next_async(next_page_link, pool_list_usage_metrics_next_options:pool_list_usage_metrics_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

    #
    # Lists all of the pools in the specified account.
    #
    # @param pool_list_options [PoolListOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CloudPoolListResult] which provide lazy access to pages of the
    # response.
    #
    def list_as_lazy(pool_list_options:nil, custom_headers:nil)
      response = list_async(pool_list_options:pool_list_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          pool_list_next_options = pool_list_options
          list_next_async(next_page_link, pool_list_next_options:pool_list_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
