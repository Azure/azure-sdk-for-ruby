# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2017_09_01_6_0
  module Models
    #
    # Specifies details of a Job Manager task.

    # The Job Manager task is automatically started when the job is created.
    # The Batch service tries to schedule the Job Manager task before any other
    # tasks in the job. When shrinking a pool, the Batch service tries to
    # preserve compute nodes where Job Manager tasks are running for as long as
    # possible (that is, nodes running 'normal' tasks are removed before nodes
    # running Job Manager tasks). When a Job Manager task fails and needs to be
    # restarted, the system tries to schedule it at the highest priority. If
    # there are no idle nodes available, the system may terminate one of the
    # running tasks in the pool and return it to the queue in order to make
    # room for the Job Manager task to restart. Note that a Job Manager task in
    # one job does not have priority over tasks in other jobs. Across jobs,
    # only job level priorities are observed. For example, if a Job Manager in
    # a priority 0 job needs to be restarted, it will not displace tasks of a
    # priority 1 job.
    #
    class JobManagerTask

      include MsRestAzure

      # @return [String] A string that uniquely identifies the Job Manager task
      # within the job. The ID can contain any combination of alphanumeric
      # characters including hyphens and underscores and cannot contain more
      # than 64 characters.
      attr_accessor :id

      # @return [String] The display name of the Job Manager task. It need not
      # be unique and can contain any Unicode characters up to a maximum length
      # of 1024.
      attr_accessor :display_name

      # @return [String] The command line of the Job Manager task. The command
      # line does not run under a shell, and therefore cannot take advantage of
      # shell features such as environment variable expansion. If you want to
      # take advantage of such features, you should invoke the shell in the
      # command line, for example using "cmd /c MyCommand" in Windows or
      # "/bin/sh -c MyCommand" in Linux.
      attr_accessor :command_line

      # @return [TaskContainerSettings] The settings for the container under
      # which the Job Manager task runs. If the pool that will run this task
      # has containerConfiguration set, this must be set as well. If the pool
      # that will run this task doesn't have containerConfiguration set, this
      # must not be set. When this is specified, all directories recursively
      # below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories
      # on the node) are mapped into the container, all task environment
      # variables are mapped into the container, and the task command line is
      # executed in the container.
      attr_accessor :container_settings

      # @return [Array<ResourceFile>] A list of files that the Batch service
      # will download to the compute node before running the command line.
      # Files listed under this element are located in the task's working
      # directory.
      attr_accessor :resource_files

      # @return [Array<OutputFile>] A list of files that the Batch service will
      # upload from the compute node after running the command line. For
      # multi-instance tasks, the files will only be uploaded from the compute
      # node on which the primary task is executed.
      attr_accessor :output_files

      # @return [Array<EnvironmentSetting>] A list of environment variable
      # settings for the Job Manager task.
      attr_accessor :environment_settings

      # @return [TaskConstraints] Constraints that apply to the Job Manager
      # task.
      attr_accessor :constraints

      # @return [Boolean] Whether completion of the Job Manager task signifies
      # completion of the entire job. If true, when the Job Manager task
      # completes, the Batch service marks the job as complete. If any tasks
      # are still running at this time (other than Job Release), those tasks
      # are terminated. If false, the completion of the Job Manager task does
      # not affect the job status. In this case, you should either use the
      # onAllTasksComplete attribute to terminate the job, or have a client or
      # user terminate the job explicitly. An example of this is if the Job
      # Manager creates a set of tasks but then takes no further role in their
      # execution. The default value is true. If you are using the
      # onAllTasksComplete and onTaskFailure attributes to control job
      # lifetime, and using the Job Manager task only to create the tasks for
      # the job (not to monitor progress), then it is important to set
      # killJobOnCompletion to false.
      attr_accessor :kill_job_on_completion

      # @return [UserIdentity] The user identity under which the Job Manager
      # task runs. If omitted, the task runs as a non-administrative user
      # unique to the task.
      attr_accessor :user_identity

      # @return [Boolean] Whether the Job Manager task requires exclusive use
      # of the compute node where it runs. If true, no other tasks will run on
      # the same compute node for as long as the Job Manager is running. If
      # false, other tasks can run simultaneously with the Job Manager on a
      # compute node. The Job Manager task counts normally against the node's
      # concurrent task limit, so this is only relevant if the node allows
      # multiple concurrent tasks. The default value is true.
      attr_accessor :run_exclusive

      # @return [Array<ApplicationPackageReference>] A list of application
      # packages that the Batch service will deploy to the compute node before
      # running the command line. Application packages are downloaded and
      # deployed to a shared directory, not the task working directory.
      # Therefore, if a referenced package is already on the compute node, and
      # is up to date, then it is not re-downloaded; the existing copy on the
      # compute node is used. If a referenced application package cannot be
      # installed, for example because the package has been deleted or because
      # download failed, the task fails.
      attr_accessor :application_package_references

      # @return [AuthenticationTokenSettings] The settings for an
      # authentication token that the task can use to perform Batch service
      # operations. If this property is set, the Batch service provides the
      # task with an authentication token which can be used to authenticate
      # Batch service operations without requiring an account access key. The
      # token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment
      # variable. The operations that the task can carry out using the token
      # depend on the settings. For example, a task can request job permissions
      # in order to add other tasks to the job, or check the status of the job
      # or of other tasks under the job.
      attr_accessor :authentication_token_settings

      # @return [Boolean] Whether the Job Manager task may run on a
      # low-priority compute node. The default value is false.
      attr_accessor :allow_low_priority_node


      #
      # Mapper for JobManagerTask class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'JobManagerTask',
          type: {
            name: 'Composite',
            class_name: 'JobManagerTask',
            model_properties: {
              id: {
                client_side_validation: true,
                required: true,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              display_name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'displayName',
                type: {
                  name: 'String'
                }
              },
              command_line: {
                client_side_validation: true,
                required: true,
                serialized_name: 'commandLine',
                type: {
                  name: 'String'
                }
              },
              container_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'containerSettings',
                type: {
                  name: 'Composite',
                  class_name: 'TaskContainerSettings'
                }
              },
              resource_files: {
                client_side_validation: true,
                required: false,
                serialized_name: 'resourceFiles',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ResourceFileElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ResourceFile'
                      }
                  }
                }
              },
              output_files: {
                client_side_validation: true,
                required: false,
                serialized_name: 'outputFiles',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'OutputFileElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'OutputFile'
                      }
                  }
                }
              },
              environment_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'environmentSettings',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'EnvironmentSettingElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'EnvironmentSetting'
                      }
                  }
                }
              },
              constraints: {
                client_side_validation: true,
                required: false,
                serialized_name: 'constraints',
                type: {
                  name: 'Composite',
                  class_name: 'TaskConstraints'
                }
              },
              kill_job_on_completion: {
                client_side_validation: true,
                required: false,
                serialized_name: 'killJobOnCompletion',
                type: {
                  name: 'Boolean'
                }
              },
              user_identity: {
                client_side_validation: true,
                required: false,
                serialized_name: 'userIdentity',
                type: {
                  name: 'Composite',
                  class_name: 'UserIdentity'
                }
              },
              run_exclusive: {
                client_side_validation: true,
                required: false,
                serialized_name: 'runExclusive',
                type: {
                  name: 'Boolean'
                }
              },
              application_package_references: {
                client_side_validation: true,
                required: false,
                serialized_name: 'applicationPackageReferences',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ApplicationPackageReferenceElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ApplicationPackageReference'
                      }
                  }
                }
              },
              authentication_token_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'authenticationTokenSettings',
                type: {
                  name: 'Composite',
                  class_name: 'AuthenticationTokenSettings'
                }
              },
              allow_low_priority_node: {
                client_side_validation: true,
                required: false,
                serialized_name: 'allowLowPriorityNode',
                type: {
                  name: 'Boolean'
                }
              }
            }
          }
        }
      end
    end
  end
end
