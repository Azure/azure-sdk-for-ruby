# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2017_06_01_5_1
  module Models
    #
    # An Azure Batch task.
    #
    #
    class CloudTask

      include MsRestAzure

      # @return [String] A string that uniquely identifies the task within the
      # job. The ID can contain any combination of alphanumeric characters
      # including hyphens and underscores, and cannot contain more than 64
      # characters.
      attr_accessor :id

      # @return [String] A display name for the task. The display name need not
      # be unique and can contain any Unicode characters up to a maximum length
      # of 1024.
      attr_accessor :display_name

      # @return [String] The URL of the task.
      attr_accessor :url

      # @return [String] The ETag of the task. This is an opaque string. You
      # can use it to detect whether the task has changed between requests. In
      # particular, you can be pass the ETag when updating a task to specify
      # that your changes should take effect only if nobody else has modified
      # the task in the meantime.
      attr_accessor :e_tag

      # @return [DateTime] The last modified time of the task.
      attr_accessor :last_modified

      # @return [DateTime] The creation time of the task.
      attr_accessor :creation_time

      # @return [ExitConditions] How the Batch service should respond when the
      # task completes.
      attr_accessor :exit_conditions

      # @return [TaskState] The current state of the task. Possible values
      # include: 'active', 'preparing', 'running', 'completed'
      attr_accessor :state

      # @return [DateTime] The time at which the task entered its current
      # state.
      attr_accessor :state_transition_time

      # @return [TaskState] The previous state of the task. This property is
      # not set if the task is in its initial Active state. Possible values
      # include: 'active', 'preparing', 'running', 'completed'
      attr_accessor :previous_state

      # @return [DateTime] The time at which the task entered its previous
      # state. This property is not set if the task is in its initial Active
      # state.
      attr_accessor :previous_state_transition_time

      # @return [String] The command line of the task. For multi-instance
      # tasks, the command line is executed as the primary task, after the
      # primary task and all subtasks have finished executing the coordination
      # command line. The command line does not run under a shell, and
      # therefore cannot take advantage of shell features such as environment
      # variable expansion. If you want to take advantage of such features, you
      # should invoke the shell in the command line, for example using "cmd /c
      # MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux.
      attr_accessor :command_line

      # @return [Array<ResourceFile>] A list of files that the Batch service
      # will download to the compute node before running the command line. For
      # multi-instance tasks, the resource files will only be downloaded to the
      # compute node on which the primary task is executed.
      attr_accessor :resource_files

      # @return [Array<OutputFile>] A list of files that the Batch service will
      # upload from the compute node after running the command line. For
      # multi-instance tasks, the files will only be uploaded from the compute
      # node on which the primary task is executed.
      attr_accessor :output_files

      # @return [Array<EnvironmentSetting>] A list of environment variable
      # settings for the task.
      attr_accessor :environment_settings

      # @return [AffinityInformation] A locality hint that can be used by the
      # Batch service to select a compute node on which to start the new task.
      attr_accessor :affinity_info

      # @return [TaskConstraints] The execution constraints that apply to this
      # task.
      attr_accessor :constraints

      # @return [UserIdentity] The user identity under which the task runs. If
      # omitted, the task runs as a non-administrative user unique to the task.
      attr_accessor :user_identity

      # @return [TaskExecutionInformation] Information about the execution of
      # the task.
      attr_accessor :execution_info

      # @return [ComputeNodeInformation] Information about the compute node on
      # which the task ran.
      attr_accessor :node_info

      # @return [MultiInstanceSettings] An object that indicates that the task
      # is a multi-instance task, and contains information about how to run the
      # multi-instance task.
      attr_accessor :multi_instance_settings

      # @return [TaskStatistics] Resource usage statistics for the task.
      attr_accessor :stats

      # @return [TaskDependencies] The tasks that this task depends on. This
      # task will not be scheduled until all tasks that it depends on have
      # completed successfully. If any of those tasks fail and exhaust their
      # retry counts, this task will never be scheduled.
      attr_accessor :depends_on

      # @return [Array<ApplicationPackageReference>] A list of application
      # packages that the Batch service will deploy to the compute node before
      # running the command line. Application packages are downloaded and
      # deployed to a shared directory, not the task working directory.
      # Therefore, if a referenced package is already on the compute node, and
      # is up to date, then it is not re-downloaded; the existing copy on the
      # compute node is used. If a referenced application package cannot be
      # installed, for example because the package has been deleted or because
      # download failed, the task fails.
      attr_accessor :application_package_references

      # @return [AuthenticationTokenSettings] The settings for an
      # authentication token that the task can use to perform Batch service
      # operations. If this property is set, the Batch service provides the
      # task with an authentication token which can be used to authenticate
      # Batch service operations without requiring an account access key. The
      # token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment
      # variable. The operations that the task can carry out using the token
      # depend on the settings. For example, a task can request job permissions
      # in order to add other tasks to the job, or check the status of the job
      # or of other tasks under the job.
      attr_accessor :authentication_token_settings


      #
      # Mapper for CloudTask class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'CloudTask',
          type: {
            name: 'Composite',
            class_name: 'CloudTask',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              display_name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'displayName',
                type: {
                  name: 'String'
                }
              },
              url: {
                client_side_validation: true,
                required: false,
                serialized_name: 'url',
                type: {
                  name: 'String'
                }
              },
              e_tag: {
                client_side_validation: true,
                required: false,
                serialized_name: 'eTag',
                type: {
                  name: 'String'
                }
              },
              last_modified: {
                client_side_validation: true,
                required: false,
                serialized_name: 'lastModified',
                type: {
                  name: 'DateTime'
                }
              },
              creation_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'creationTime',
                type: {
                  name: 'DateTime'
                }
              },
              exit_conditions: {
                client_side_validation: true,
                required: false,
                serialized_name: 'exitConditions',
                type: {
                  name: 'Composite',
                  class_name: 'ExitConditions'
                }
              },
              state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'state',
                type: {
                  name: 'Enum',
                  module: 'TaskState'
                }
              },
              state_transition_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'stateTransitionTime',
                type: {
                  name: 'DateTime'
                }
              },
              previous_state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'previousState',
                type: {
                  name: 'Enum',
                  module: 'TaskState'
                }
              },
              previous_state_transition_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'previousStateTransitionTime',
                type: {
                  name: 'DateTime'
                }
              },
              command_line: {
                client_side_validation: true,
                required: false,
                serialized_name: 'commandLine',
                type: {
                  name: 'String'
                }
              },
              resource_files: {
                client_side_validation: true,
                required: false,
                serialized_name: 'resourceFiles',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ResourceFileElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ResourceFile'
                      }
                  }
                }
              },
              output_files: {
                client_side_validation: true,
                required: false,
                serialized_name: 'outputFiles',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'OutputFileElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'OutputFile'
                      }
                  }
                }
              },
              environment_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'environmentSettings',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'EnvironmentSettingElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'EnvironmentSetting'
                      }
                  }
                }
              },
              affinity_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'affinityInfo',
                type: {
                  name: 'Composite',
                  class_name: 'AffinityInformation'
                }
              },
              constraints: {
                client_side_validation: true,
                required: false,
                serialized_name: 'constraints',
                type: {
                  name: 'Composite',
                  class_name: 'TaskConstraints'
                }
              },
              user_identity: {
                client_side_validation: true,
                required: false,
                serialized_name: 'userIdentity',
                type: {
                  name: 'Composite',
                  class_name: 'UserIdentity'
                }
              },
              execution_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'executionInfo',
                type: {
                  name: 'Composite',
                  class_name: 'TaskExecutionInformation'
                }
              },
              node_info: {
                client_side_validation: true,
                required: false,
                serialized_name: 'nodeInfo',
                type: {
                  name: 'Composite',
                  class_name: 'ComputeNodeInformation'
                }
              },
              multi_instance_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'multiInstanceSettings',
                type: {
                  name: 'Composite',
                  class_name: 'MultiInstanceSettings'
                }
              },
              stats: {
                client_side_validation: true,
                required: false,
                serialized_name: 'stats',
                type: {
                  name: 'Composite',
                  class_name: 'TaskStatistics'
                }
              },
              depends_on: {
                client_side_validation: true,
                required: false,
                serialized_name: 'dependsOn',
                type: {
                  name: 'Composite',
                  class_name: 'TaskDependencies'
                }
              },
              application_package_references: {
                client_side_validation: true,
                required: false,
                serialized_name: 'applicationPackageReferences',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ApplicationPackageReferenceElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ApplicationPackageReference'
                      }
                  }
                }
              },
              authentication_token_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'authenticationTokenSettings',
                type: {
                  name: 'Composite',
                  class_name: 'AuthenticationTokenSettings'
                }
              }
            }
          }
        }
      end
    end
  end
end
