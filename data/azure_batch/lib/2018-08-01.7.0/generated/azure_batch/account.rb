# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2018_08_01_7_0
  #
  # A client for issuing REST requests to the Azure Batch service.
  #
  class Account
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Account class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [BatchServiceClient] reference to the BatchServiceClient
    attr_reader :client

    #
    # Lists all node agent SKUs supported by the Azure Batch service.
    #
    # @param account_list_node_agent_skus_options [AccountListNodeAgentSkusOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<NodeAgentSku>] operation results.
    #
    def list_node_agent_skus(account_list_node_agent_skus_options:nil, custom_headers:nil)
      first_page = list_node_agent_skus_as_lazy(account_list_node_agent_skus_options:account_list_node_agent_skus_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Lists all node agent SKUs supported by the Azure Batch service.
    #
    # @param account_list_node_agent_skus_options [AccountListNodeAgentSkusOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_node_agent_skus_with_http_info(account_list_node_agent_skus_options:nil, custom_headers:nil)
      list_node_agent_skus_async(account_list_node_agent_skus_options:account_list_node_agent_skus_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all node agent SKUs supported by the Azure Batch service.
    #
    # @param account_list_node_agent_skus_options [AccountListNodeAgentSkusOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_node_agent_skus_async(account_list_node_agent_skus_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      filter = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless account_list_node_agent_skus_options.nil?
        filter = account_list_node_agent_skus_options.filter
      end
      unless account_list_node_agent_skus_options.nil?
        max_results = account_list_node_agent_skus_options.maxResults
      end
      unless account_list_node_agent_skus_options.nil?
        timeout = account_list_node_agent_skus_options.timeout
      end
      unless account_list_node_agent_skus_options.nil?
        client_request_id = account_list_node_agent_skus_options.client_request_id
      end
      unless account_list_node_agent_skus_options.nil?
        return_client_request_id = account_list_node_agent_skus_options.return_client_request_id
      end
      unless account_list_node_agent_skus_options.nil?
        ocp_date = account_list_node_agent_skus_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'nodeagentskus'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'$filter' => filter,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_08_01_7_0::Models::AccountListNodeAgentSkusResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the number of nodes in each state, grouped by pool.
    #
    # @param account_list_pool_node_counts_options
    # [AccountListPoolNodeCountsOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<PoolNodeCounts>] operation results.
    #
    def list_pool_node_counts(account_list_pool_node_counts_options:nil, custom_headers:nil)
      first_page = list_pool_node_counts_as_lazy(account_list_pool_node_counts_options:account_list_pool_node_counts_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Gets the number of nodes in each state, grouped by pool.
    #
    # @param account_list_pool_node_counts_options
    # [AccountListPoolNodeCountsOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_pool_node_counts_with_http_info(account_list_pool_node_counts_options:nil, custom_headers:nil)
      list_pool_node_counts_async(account_list_pool_node_counts_options:account_list_pool_node_counts_options, custom_headers:custom_headers).value!
    end

    #
    # Gets the number of nodes in each state, grouped by pool.
    #
    # @param account_list_pool_node_counts_options
    # [AccountListPoolNodeCountsOptions] Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_pool_node_counts_async(account_list_pool_node_counts_options:nil, custom_headers:nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      filter = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless account_list_pool_node_counts_options.nil?
        filter = account_list_pool_node_counts_options.filter
      end
      unless account_list_pool_node_counts_options.nil?
        max_results = account_list_pool_node_counts_options.maxResults
      end
      unless account_list_pool_node_counts_options.nil?
        timeout = account_list_pool_node_counts_options.timeout
      end
      unless account_list_pool_node_counts_options.nil?
        client_request_id = account_list_pool_node_counts_options.client_request_id
      end
      unless account_list_pool_node_counts_options.nil?
        return_client_request_id = account_list_pool_node_counts_options.return_client_request_id
      end
      unless account_list_pool_node_counts_options.nil?
        ocp_date = account_list_pool_node_counts_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'nodecounts'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'$filter' => filter,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_08_01_7_0::Models::PoolNodeCountsListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all node agent SKUs supported by the Azure Batch service.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param account_list_node_agent_skus_next_options
    # [AccountListNodeAgentSkusNextOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [AccountListNodeAgentSkusResult] operation results.
    #
    def list_node_agent_skus_next(next_page_link, account_list_node_agent_skus_next_options:nil, custom_headers:nil)
      response = list_node_agent_skus_next_async(next_page_link, account_list_node_agent_skus_next_options:account_list_node_agent_skus_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all node agent SKUs supported by the Azure Batch service.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param account_list_node_agent_skus_next_options
    # [AccountListNodeAgentSkusNextOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_node_agent_skus_next_with_http_info(next_page_link, account_list_node_agent_skus_next_options:nil, custom_headers:nil)
      list_node_agent_skus_next_async(next_page_link, account_list_node_agent_skus_next_options:account_list_node_agent_skus_next_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all node agent SKUs supported by the Azure Batch service.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param account_list_node_agent_skus_next_options
    # [AccountListNodeAgentSkusNextOptions] Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_node_agent_skus_next_async(next_page_link, account_list_node_agent_skus_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless account_list_node_agent_skus_next_options.nil?
        client_request_id = account_list_node_agent_skus_next_options.client_request_id
      end
      unless account_list_node_agent_skus_next_options.nil?
        return_client_request_id = account_list_node_agent_skus_next_options.return_client_request_id
      end
      unless account_list_node_agent_skus_next_options.nil?
        ocp_date = account_list_node_agent_skus_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_08_01_7_0::Models::AccountListNodeAgentSkusResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the number of nodes in each state, grouped by pool.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param account_list_pool_node_counts_next_options
    # [AccountListPoolNodeCountsNextOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PoolNodeCountsListResult] operation results.
    #
    def list_pool_node_counts_next(next_page_link, account_list_pool_node_counts_next_options:nil, custom_headers:nil)
      response = list_pool_node_counts_next_async(next_page_link, account_list_pool_node_counts_next_options:account_list_pool_node_counts_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the number of nodes in each state, grouped by pool.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param account_list_pool_node_counts_next_options
    # [AccountListPoolNodeCountsNextOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_pool_node_counts_next_with_http_info(next_page_link, account_list_pool_node_counts_next_options:nil, custom_headers:nil)
      list_pool_node_counts_next_async(next_page_link, account_list_pool_node_counts_next_options:account_list_pool_node_counts_next_options, custom_headers:custom_headers).value!
    end

    #
    # Gets the number of nodes in each state, grouped by pool.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param account_list_pool_node_counts_next_options
    # [AccountListPoolNodeCountsNextOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_pool_node_counts_next_async(next_page_link, account_list_pool_node_counts_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless account_list_pool_node_counts_next_options.nil?
        client_request_id = account_list_pool_node_counts_next_options.client_request_id
      end
      unless account_list_pool_node_counts_next_options.nil?
        return_client_request_id = account_list_pool_node_counts_next_options.return_client_request_id
      end
      unless account_list_pool_node_counts_next_options.nil?
        ocp_date = account_list_pool_node_counts_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_08_01_7_0::Models::PoolNodeCountsListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all node agent SKUs supported by the Azure Batch service.
    #
    # @param account_list_node_agent_skus_options [AccountListNodeAgentSkusOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [AccountListNodeAgentSkusResult] which provide lazy access to pages
    # of the response.
    #
    def list_node_agent_skus_as_lazy(account_list_node_agent_skus_options:nil, custom_headers:nil)
      response = list_node_agent_skus_async(account_list_node_agent_skus_options:account_list_node_agent_skus_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          account_list_node_agent_skus_next_options = account_list_node_agent_skus_options
          list_node_agent_skus_next_async(next_page_link, account_list_node_agent_skus_next_options:account_list_node_agent_skus_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

    #
    # Gets the number of nodes in each state, grouped by pool.
    #
    # @param account_list_pool_node_counts_options
    # [AccountListPoolNodeCountsOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PoolNodeCountsListResult] which provide lazy access to pages of the
    # response.
    #
    def list_pool_node_counts_as_lazy(account_list_pool_node_counts_options:nil, custom_headers:nil)
      response = list_pool_node_counts_async(account_list_pool_node_counts_options:account_list_pool_node_counts_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          account_list_pool_node_counts_next_options = account_list_pool_node_counts_options
          list_pool_node_counts_next_async(next_page_link, account_list_pool_node_counts_next_options:account_list_pool_node_counts_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
