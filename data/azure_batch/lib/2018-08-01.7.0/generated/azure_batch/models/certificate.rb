# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2018_08_01_7_0
  module Models
    #
    # A certificate that can be installed on compute nodes and can be used to
    # authenticate operations on the machine.
    #
    class Certificate

      include MsRestAzure

      # @return [String] The X.509 thumbprint of the certificate. This is a
      # sequence of up to 40 hex digits.
      attr_accessor :thumbprint

      # @return [String] The algorithm used to derive the thumbprint.
      attr_accessor :thumbprint_algorithm

      # @return [String] The URL of the certificate.
      attr_accessor :url

      # @return [CertificateState] The current state of the certificate.
      # Possible values include: 'active', 'deleting', 'deleteFailed'
      attr_accessor :state

      # @return [DateTime] The time at which the certificate entered its
      # current state.
      attr_accessor :state_transition_time

      # @return [CertificateState] The previous state of the certificate. This
      # property is not set if the certificate is in its initial active state.
      # Possible values include: 'active', 'deleting', 'deleteFailed'
      attr_accessor :previous_state

      # @return [DateTime] The time at which the certificate entered its
      # previous state. This property is not set if the certificate is in its
      # initial Active state.
      attr_accessor :previous_state_transition_time

      # @return [String] The public part of the certificate as a base-64
      # encoded .cer file.
      attr_accessor :public_data

      # @return [DeleteCertificateError] The error that occurred on the last
      # attempt to delete this certificate. This property is set only if the
      # certificate is in the DeleteFailed state.
      attr_accessor :delete_certificate_error


      #
      # Mapper for Certificate class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'Certificate',
          type: {
            name: 'Composite',
            class_name: 'Certificate',
            model_properties: {
              thumbprint: {
                client_side_validation: true,
                required: false,
                serialized_name: 'thumbprint',
                type: {
                  name: 'String'
                }
              },
              thumbprint_algorithm: {
                client_side_validation: true,
                required: false,
                serialized_name: 'thumbprintAlgorithm',
                type: {
                  name: 'String'
                }
              },
              url: {
                client_side_validation: true,
                required: false,
                serialized_name: 'url',
                type: {
                  name: 'String'
                }
              },
              state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'state',
                type: {
                  name: 'Enum',
                  module: 'CertificateState'
                }
              },
              state_transition_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'stateTransitionTime',
                type: {
                  name: 'DateTime'
                }
              },
              previous_state: {
                client_side_validation: true,
                required: false,
                serialized_name: 'previousState',
                type: {
                  name: 'Enum',
                  module: 'CertificateState'
                }
              },
              previous_state_transition_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'previousStateTransitionTime',
                type: {
                  name: 'DateTime'
                }
              },
              public_data: {
                client_side_validation: true,
                required: false,
                serialized_name: 'publicData',
                type: {
                  name: 'String'
                }
              },
              delete_certificate_error: {
                client_side_validation: true,
                required: false,
                serialized_name: 'deleteCertificateError',
                type: {
                  name: 'Composite',
                  class_name: 'DeleteCertificateError'
                }
              }
            }
          }
        }
      end
    end
  end
end
