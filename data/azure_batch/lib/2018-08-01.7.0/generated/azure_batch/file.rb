# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Batch::V2018_08_01_7_0
  #
  # A client for issuing REST requests to the Azure Batch service.
  #
  class File
    include MsRestAzure

    #
    # Creates and initializes a new instance of the File class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [BatchServiceClient] reference to the BatchServiceClient
    attr_reader :client

    #
    # Deletes the specified task file from the compute node where the task ran.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose file you want to delete.
    # @param file_path [String] The path to the task file or directory that you
    # want to delete.
    # @param recursive [Boolean] Whether to delete children of a directory. If the
    # filePath parameter represents a directory instead of a file, you can set
    # recursive to true to delete the directory and all of the files and
    # subdirectories in it. If recursive is false then the directory must be empty
    # or deletion will fail.
    # @param file_delete_from_task_options [FileDeleteFromTaskOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete_from_task(job_id, task_id, file_path, recursive:nil, file_delete_from_task_options:nil, custom_headers:nil)
      response = delete_from_task_async(job_id, task_id, file_path, recursive:recursive, file_delete_from_task_options:file_delete_from_task_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes the specified task file from the compute node where the task ran.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose file you want to delete.
    # @param file_path [String] The path to the task file or directory that you
    # want to delete.
    # @param recursive [Boolean] Whether to delete children of a directory. If the
    # filePath parameter represents a directory instead of a file, you can set
    # recursive to true to delete the directory and all of the files and
    # subdirectories in it. If recursive is false then the directory must be empty
    # or deletion will fail.
    # @param file_delete_from_task_options [FileDeleteFromTaskOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_from_task_with_http_info(job_id, task_id, file_path, recursive:nil, file_delete_from_task_options:nil, custom_headers:nil)
      delete_from_task_async(job_id, task_id, file_path, recursive:recursive, file_delete_from_task_options:file_delete_from_task_options, custom_headers:custom_headers).value!
    end

    #
    # Deletes the specified task file from the compute node where the task ran.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose file you want to delete.
    # @param file_path [String] The path to the task file or directory that you
    # want to delete.
    # @param recursive [Boolean] Whether to delete children of a directory. If the
    # filePath parameter represents a directory instead of a file, you can set
    # recursive to true to delete the directory and all of the files and
    # subdirectories in it. If recursive is false then the directory must be empty
    # or deletion will fail.
    # @param file_delete_from_task_options [FileDeleteFromTaskOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_from_task_async(job_id, task_id, file_path, recursive:nil, file_delete_from_task_options:nil, custom_headers:nil)
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_id is nil' if task_id.nil?
      fail ArgumentError, 'file_path is nil' if file_path.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless file_delete_from_task_options.nil?
        timeout = file_delete_from_task_options.timeout
      end
      unless file_delete_from_task_options.nil?
        client_request_id = file_delete_from_task_options.client_request_id
      end
      unless file_delete_from_task_options.nil?
        return_client_request_id = file_delete_from_task_options.return_client_request_id
      end
      unless file_delete_from_task_options.nil?
        ocp_date = file_delete_from_task_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/tasks/{taskId}/files/{filePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id,'taskId' => task_id,'filePath' => file_path},
          query_params: {'recursive' => recursive,'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Returns the content of the specified task file.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose file you want to retrieve.
    # @param file_path [String] The path to the task file that you want to get the
    # content of.
    # @param file_get_from_task_options [FileGetFromTaskOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [NOT_IMPLEMENTED] operation results.
    #
    def get_from_task(job_id, task_id, file_path, file_get_from_task_options:nil, custom_headers:nil)
      response = get_from_task_async(job_id, task_id, file_path, file_get_from_task_options:file_get_from_task_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns the content of the specified task file.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose file you want to retrieve.
    # @param file_path [String] The path to the task file that you want to get the
    # content of.
    # @param file_get_from_task_options [FileGetFromTaskOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_from_task_with_http_info(job_id, task_id, file_path, file_get_from_task_options:nil, custom_headers:nil)
      get_from_task_async(job_id, task_id, file_path, file_get_from_task_options:file_get_from_task_options, custom_headers:custom_headers).value!
    end

    #
    # Returns the content of the specified task file.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose file you want to retrieve.
    # @param file_path [String] The path to the task file that you want to get the
    # content of.
    # @param file_get_from_task_options [FileGetFromTaskOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_from_task_async(job_id, task_id, file_path, file_get_from_task_options:nil, custom_headers:nil)
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_id is nil' if task_id.nil?
      fail ArgumentError, 'file_path is nil' if file_path.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      ocp_range = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless file_get_from_task_options.nil?
        timeout = file_get_from_task_options.timeout
      end
      unless file_get_from_task_options.nil?
        client_request_id = file_get_from_task_options.client_request_id
      end
      unless file_get_from_task_options.nil?
        return_client_request_id = file_get_from_task_options.return_client_request_id
      end
      unless file_get_from_task_options.nil?
        ocp_date = file_get_from_task_options.ocp_date
      end
      unless file_get_from_task_options.nil?
        ocp_range = file_get_from_task_options.ocp_range
      end
      unless file_get_from_task_options.nil?
        if_modified_since = file_get_from_task_options.if_modified_since
      end
      unless file_get_from_task_options.nil?
        if_unmodified_since = file_get_from_task_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['ocp-range'] = ocp_range unless ocp_range.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/tasks/{taskId}/files/{filePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id,'taskId' => task_id,'filePath' => file_path},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Stream'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the properties of the specified task file.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose file you want to get the
    # properties of.
    # @param file_path [String] The path to the task file that you want to get the
    # properties of.
    # @param file_get_properties_from_task_options
    # [FileGetPropertiesFromTaskOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_properties_from_task(job_id, task_id, file_path, file_get_properties_from_task_options:nil, custom_headers:nil)
      response = get_properties_from_task_async(job_id, task_id, file_path, file_get_properties_from_task_options:file_get_properties_from_task_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Gets the properties of the specified task file.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose file you want to get the
    # properties of.
    # @param file_path [String] The path to the task file that you want to get the
    # properties of.
    # @param file_get_properties_from_task_options
    # [FileGetPropertiesFromTaskOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_properties_from_task_with_http_info(job_id, task_id, file_path, file_get_properties_from_task_options:nil, custom_headers:nil)
      get_properties_from_task_async(job_id, task_id, file_path, file_get_properties_from_task_options:file_get_properties_from_task_options, custom_headers:custom_headers).value!
    end

    #
    # Gets the properties of the specified task file.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose file you want to get the
    # properties of.
    # @param file_path [String] The path to the task file that you want to get the
    # properties of.
    # @param file_get_properties_from_task_options
    # [FileGetPropertiesFromTaskOptions] Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_properties_from_task_async(job_id, task_id, file_path, file_get_properties_from_task_options:nil, custom_headers:nil)
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_id is nil' if task_id.nil?
      fail ArgumentError, 'file_path is nil' if file_path.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless file_get_properties_from_task_options.nil?
        timeout = file_get_properties_from_task_options.timeout
      end
      unless file_get_properties_from_task_options.nil?
        client_request_id = file_get_properties_from_task_options.client_request_id
      end
      unless file_get_properties_from_task_options.nil?
        return_client_request_id = file_get_properties_from_task_options.return_client_request_id
      end
      unless file_get_properties_from_task_options.nil?
        ocp_date = file_get_properties_from_task_options.ocp_date
      end
      unless file_get_properties_from_task_options.nil?
        if_modified_since = file_get_properties_from_task_options.if_modified_since
      end
      unless file_get_properties_from_task_options.nil?
        if_unmodified_since = file_get_properties_from_task_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/tasks/{taskId}/files/{filePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id,'taskId' => task_id,'filePath' => file_path},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Deletes the specified file from the compute node.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node from which you want to
    # delete the file.
    # @param file_path [String] The path to the file or directory that you want to
    # delete.
    # @param recursive [Boolean] Whether to delete children of a directory. If the
    # filePath parameter represents a directory instead of a file, you can set
    # recursive to true to delete the directory and all of the files and
    # subdirectories in it. If recursive is false then the directory must be empty
    # or deletion will fail.
    # @param file_delete_from_compute_node_options
    # [FileDeleteFromComputeNodeOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete_from_compute_node(pool_id, node_id, file_path, recursive:nil, file_delete_from_compute_node_options:nil, custom_headers:nil)
      response = delete_from_compute_node_async(pool_id, node_id, file_path, recursive:recursive, file_delete_from_compute_node_options:file_delete_from_compute_node_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes the specified file from the compute node.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node from which you want to
    # delete the file.
    # @param file_path [String] The path to the file or directory that you want to
    # delete.
    # @param recursive [Boolean] Whether to delete children of a directory. If the
    # filePath parameter represents a directory instead of a file, you can set
    # recursive to true to delete the directory and all of the files and
    # subdirectories in it. If recursive is false then the directory must be empty
    # or deletion will fail.
    # @param file_delete_from_compute_node_options
    # [FileDeleteFromComputeNodeOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_from_compute_node_with_http_info(pool_id, node_id, file_path, recursive:nil, file_delete_from_compute_node_options:nil, custom_headers:nil)
      delete_from_compute_node_async(pool_id, node_id, file_path, recursive:recursive, file_delete_from_compute_node_options:file_delete_from_compute_node_options, custom_headers:custom_headers).value!
    end

    #
    # Deletes the specified file from the compute node.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node from which you want to
    # delete the file.
    # @param file_path [String] The path to the file or directory that you want to
    # delete.
    # @param recursive [Boolean] Whether to delete children of a directory. If the
    # filePath parameter represents a directory instead of a file, you can set
    # recursive to true to delete the directory and all of the files and
    # subdirectories in it. If recursive is false then the directory must be empty
    # or deletion will fail.
    # @param file_delete_from_compute_node_options
    # [FileDeleteFromComputeNodeOptions] Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_from_compute_node_async(pool_id, node_id, file_path, recursive:nil, file_delete_from_compute_node_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'node_id is nil' if node_id.nil?
      fail ArgumentError, 'file_path is nil' if file_path.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless file_delete_from_compute_node_options.nil?
        timeout = file_delete_from_compute_node_options.timeout
      end
      unless file_delete_from_compute_node_options.nil?
        client_request_id = file_delete_from_compute_node_options.client_request_id
      end
      unless file_delete_from_compute_node_options.nil?
        return_client_request_id = file_delete_from_compute_node_options.return_client_request_id
      end
      unless file_delete_from_compute_node_options.nil?
        ocp_date = file_delete_from_compute_node_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'pools/{poolId}/nodes/{nodeId}/files/{filePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id,'nodeId' => node_id,'filePath' => file_path},
          query_params: {'recursive' => recursive,'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Returns the content of the specified compute node file.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node that contains the file.
    # @param file_path [String] The path to the compute node file that you want to
    # get the content of.
    # @param file_get_from_compute_node_options [FileGetFromComputeNodeOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [NOT_IMPLEMENTED] operation results.
    #
    def get_from_compute_node(pool_id, node_id, file_path, file_get_from_compute_node_options:nil, custom_headers:nil)
      response = get_from_compute_node_async(pool_id, node_id, file_path, file_get_from_compute_node_options:file_get_from_compute_node_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns the content of the specified compute node file.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node that contains the file.
    # @param file_path [String] The path to the compute node file that you want to
    # get the content of.
    # @param file_get_from_compute_node_options [FileGetFromComputeNodeOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_from_compute_node_with_http_info(pool_id, node_id, file_path, file_get_from_compute_node_options:nil, custom_headers:nil)
      get_from_compute_node_async(pool_id, node_id, file_path, file_get_from_compute_node_options:file_get_from_compute_node_options, custom_headers:custom_headers).value!
    end

    #
    # Returns the content of the specified compute node file.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node that contains the file.
    # @param file_path [String] The path to the compute node file that you want to
    # get the content of.
    # @param file_get_from_compute_node_options [FileGetFromComputeNodeOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_from_compute_node_async(pool_id, node_id, file_path, file_get_from_compute_node_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'node_id is nil' if node_id.nil?
      fail ArgumentError, 'file_path is nil' if file_path.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      ocp_range = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless file_get_from_compute_node_options.nil?
        timeout = file_get_from_compute_node_options.timeout
      end
      unless file_get_from_compute_node_options.nil?
        client_request_id = file_get_from_compute_node_options.client_request_id
      end
      unless file_get_from_compute_node_options.nil?
        return_client_request_id = file_get_from_compute_node_options.return_client_request_id
      end
      unless file_get_from_compute_node_options.nil?
        ocp_date = file_get_from_compute_node_options.ocp_date
      end
      unless file_get_from_compute_node_options.nil?
        ocp_range = file_get_from_compute_node_options.ocp_range
      end
      unless file_get_from_compute_node_options.nil?
        if_modified_since = file_get_from_compute_node_options.if_modified_since
      end
      unless file_get_from_compute_node_options.nil?
        if_unmodified_since = file_get_from_compute_node_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['ocp-range'] = ocp_range unless ocp_range.nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'pools/{poolId}/nodes/{nodeId}/files/{filePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id,'nodeId' => node_id,'filePath' => file_path},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Stream'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the properties of the specified compute node file.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node that contains the file.
    # @param file_path [String] The path to the compute node file that you want to
    # get the properties of.
    # @param file_get_properties_from_compute_node_options
    # [FileGetPropertiesFromComputeNodeOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_properties_from_compute_node(pool_id, node_id, file_path, file_get_properties_from_compute_node_options:nil, custom_headers:nil)
      response = get_properties_from_compute_node_async(pool_id, node_id, file_path, file_get_properties_from_compute_node_options:file_get_properties_from_compute_node_options, custom_headers:custom_headers).value!
      nil
    end

    #
    # Gets the properties of the specified compute node file.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node that contains the file.
    # @param file_path [String] The path to the compute node file that you want to
    # get the properties of.
    # @param file_get_properties_from_compute_node_options
    # [FileGetPropertiesFromComputeNodeOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_properties_from_compute_node_with_http_info(pool_id, node_id, file_path, file_get_properties_from_compute_node_options:nil, custom_headers:nil)
      get_properties_from_compute_node_async(pool_id, node_id, file_path, file_get_properties_from_compute_node_options:file_get_properties_from_compute_node_options, custom_headers:custom_headers).value!
    end

    #
    # Gets the properties of the specified compute node file.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node that contains the file.
    # @param file_path [String] The path to the compute node file that you want to
    # get the properties of.
    # @param file_get_properties_from_compute_node_options
    # [FileGetPropertiesFromComputeNodeOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_properties_from_compute_node_async(pool_id, node_id, file_path, file_get_properties_from_compute_node_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'node_id is nil' if node_id.nil?
      fail ArgumentError, 'file_path is nil' if file_path.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      if_modified_since = nil
      if_unmodified_since = nil
      unless file_get_properties_from_compute_node_options.nil?
        timeout = file_get_properties_from_compute_node_options.timeout
      end
      unless file_get_properties_from_compute_node_options.nil?
        client_request_id = file_get_properties_from_compute_node_options.client_request_id
      end
      unless file_get_properties_from_compute_node_options.nil?
        return_client_request_id = file_get_properties_from_compute_node_options.return_client_request_id
      end
      unless file_get_properties_from_compute_node_options.nil?
        ocp_date = file_get_properties_from_compute_node_options.ocp_date
      end
      unless file_get_properties_from_compute_node_options.nil?
        if_modified_since = file_get_properties_from_compute_node_options.if_modified_since
      end
      unless file_get_properties_from_compute_node_options.nil?
        if_unmodified_since = file_get_properties_from_compute_node_options.if_unmodified_since
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Modified-Since'] = if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_modified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      request_headers['If-Unmodified-Since'] = if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT') unless if_unmodified_since.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'pools/{poolId}/nodes/{nodeId}/files/{filePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id,'nodeId' => node_id,'filePath' => file_path},
          query_params: {'api-version' => @client.api_version,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Lists the files in a task's directory on its compute node.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose files you want to list.
    # @param recursive [Boolean] Whether to list children of the task directory.
    # This parameter can be used in combination with the filter parameter to list
    # specific type of files.
    # @param file_list_from_task_options [FileListFromTaskOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<NodeFile>] operation results.
    #
    def list_from_task(job_id, task_id, recursive:nil, file_list_from_task_options:nil, custom_headers:nil)
      first_page = list_from_task_as_lazy(job_id, task_id, recursive:recursive, file_list_from_task_options:file_list_from_task_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Lists the files in a task's directory on its compute node.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose files you want to list.
    # @param recursive [Boolean] Whether to list children of the task directory.
    # This parameter can be used in combination with the filter parameter to list
    # specific type of files.
    # @param file_list_from_task_options [FileListFromTaskOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_from_task_with_http_info(job_id, task_id, recursive:nil, file_list_from_task_options:nil, custom_headers:nil)
      list_from_task_async(job_id, task_id, recursive:recursive, file_list_from_task_options:file_list_from_task_options, custom_headers:custom_headers).value!
    end

    #
    # Lists the files in a task's directory on its compute node.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose files you want to list.
    # @param recursive [Boolean] Whether to list children of the task directory.
    # This parameter can be used in combination with the filter parameter to list
    # specific type of files.
    # @param file_list_from_task_options [FileListFromTaskOptions] Additional
    # parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_from_task_async(job_id, task_id, recursive:nil, file_list_from_task_options:nil, custom_headers:nil)
      fail ArgumentError, 'job_id is nil' if job_id.nil?
      fail ArgumentError, 'task_id is nil' if task_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      filter = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless file_list_from_task_options.nil?
        filter = file_list_from_task_options.filter
      end
      unless file_list_from_task_options.nil?
        max_results = file_list_from_task_options.maxResults
      end
      unless file_list_from_task_options.nil?
        timeout = file_list_from_task_options.timeout
      end
      unless file_list_from_task_options.nil?
        client_request_id = file_list_from_task_options.client_request_id
      end
      unless file_list_from_task_options.nil?
        return_client_request_id = file_list_from_task_options.return_client_request_id
      end
      unless file_list_from_task_options.nil?
        ocp_date = file_list_from_task_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'jobs/{jobId}/tasks/{taskId}/files'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobId' => job_id,'taskId' => task_id},
          query_params: {'recursive' => recursive,'api-version' => @client.api_version,'$filter' => filter,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_08_01_7_0::Models::NodeFileListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all of the files in task directories on the specified compute node.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node whose files you want to
    # list.
    # @param recursive [Boolean] Whether to list children of a directory.
    # @param file_list_from_compute_node_options [FileListFromComputeNodeOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<NodeFile>] operation results.
    #
    def list_from_compute_node(pool_id, node_id, recursive:nil, file_list_from_compute_node_options:nil, custom_headers:nil)
      first_page = list_from_compute_node_as_lazy(pool_id, node_id, recursive:recursive, file_list_from_compute_node_options:file_list_from_compute_node_options, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Lists all of the files in task directories on the specified compute node.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node whose files you want to
    # list.
    # @param recursive [Boolean] Whether to list children of a directory.
    # @param file_list_from_compute_node_options [FileListFromComputeNodeOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_from_compute_node_with_http_info(pool_id, node_id, recursive:nil, file_list_from_compute_node_options:nil, custom_headers:nil)
      list_from_compute_node_async(pool_id, node_id, recursive:recursive, file_list_from_compute_node_options:file_list_from_compute_node_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the files in task directories on the specified compute node.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node whose files you want to
    # list.
    # @param recursive [Boolean] Whether to list children of a directory.
    # @param file_list_from_compute_node_options [FileListFromComputeNodeOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_from_compute_node_async(pool_id, node_id, recursive:nil, file_list_from_compute_node_options:nil, custom_headers:nil)
      fail ArgumentError, 'pool_id is nil' if pool_id.nil?
      fail ArgumentError, 'node_id is nil' if node_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      filter = nil
      max_results = nil
      timeout = nil
      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless file_list_from_compute_node_options.nil?
        filter = file_list_from_compute_node_options.filter
      end
      unless file_list_from_compute_node_options.nil?
        max_results = file_list_from_compute_node_options.maxResults
      end
      unless file_list_from_compute_node_options.nil?
        timeout = file_list_from_compute_node_options.timeout
      end
      unless file_list_from_compute_node_options.nil?
        client_request_id = file_list_from_compute_node_options.client_request_id
      end
      unless file_list_from_compute_node_options.nil?
        return_client_request_id = file_list_from_compute_node_options.return_client_request_id
      end
      unless file_list_from_compute_node_options.nil?
        ocp_date = file_list_from_compute_node_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'pools/{poolId}/nodes/{nodeId}/files'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'poolId' => pool_id,'nodeId' => node_id},
          query_params: {'recursive' => recursive,'api-version' => @client.api_version,'$filter' => filter,'maxresults' => max_results,'timeout' => timeout},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_08_01_7_0::Models::NodeFileListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists the files in a task's directory on its compute node.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param file_list_from_task_next_options [FileListFromTaskNextOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [NodeFileListResult] operation results.
    #
    def list_from_task_next(next_page_link, file_list_from_task_next_options:nil, custom_headers:nil)
      response = list_from_task_next_async(next_page_link, file_list_from_task_next_options:file_list_from_task_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists the files in a task's directory on its compute node.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param file_list_from_task_next_options [FileListFromTaskNextOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_from_task_next_with_http_info(next_page_link, file_list_from_task_next_options:nil, custom_headers:nil)
      list_from_task_next_async(next_page_link, file_list_from_task_next_options:file_list_from_task_next_options, custom_headers:custom_headers).value!
    end

    #
    # Lists the files in a task's directory on its compute node.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param file_list_from_task_next_options [FileListFromTaskNextOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_from_task_next_async(next_page_link, file_list_from_task_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless file_list_from_task_next_options.nil?
        client_request_id = file_list_from_task_next_options.client_request_id
      end
      unless file_list_from_task_next_options.nil?
        return_client_request_id = file_list_from_task_next_options.return_client_request_id
      end
      unless file_list_from_task_next_options.nil?
        ocp_date = file_list_from_task_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_08_01_7_0::Models::NodeFileListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all of the files in task directories on the specified compute node.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param file_list_from_compute_node_next_options
    # [FileListFromComputeNodeNextOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [NodeFileListResult] operation results.
    #
    def list_from_compute_node_next(next_page_link, file_list_from_compute_node_next_options:nil, custom_headers:nil)
      response = list_from_compute_node_next_async(next_page_link, file_list_from_compute_node_next_options:file_list_from_compute_node_next_options, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all of the files in task directories on the specified compute node.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param file_list_from_compute_node_next_options
    # [FileListFromComputeNodeNextOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_from_compute_node_next_with_http_info(next_page_link, file_list_from_compute_node_next_options:nil, custom_headers:nil)
      list_from_compute_node_next_async(next_page_link, file_list_from_compute_node_next_options:file_list_from_compute_node_next_options, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the files in task directories on the specified compute node.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param file_list_from_compute_node_next_options
    # [FileListFromComputeNodeNextOptions] Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_from_compute_node_next_async(next_page_link, file_list_from_compute_node_next_options:nil, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      client_request_id = nil
      return_client_request_id = nil
      ocp_date = nil
      unless file_list_from_compute_node_next_options.nil?
        client_request_id = file_list_from_compute_node_next_options.client_request_id
      end
      unless file_list_from_compute_node_next_options.nil?
        return_client_request_id = file_list_from_compute_node_next_options.return_client_request_id
      end
      unless file_list_from_compute_node_next_options.nil?
        ocp_date = file_list_from_compute_node_next_options.ocp_date
      end

      request_headers = {}
      request_headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8'

      # Set Headers
      request_headers['client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['client-request-id'] = client_request_id.to_s unless client_request_id.to_s.nil?
      request_headers['return-client-request-id'] = return_client_request_id.to_s unless return_client_request_id.to_s.nil?
      request_headers['ocp-date'] = ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT') unless ocp_date.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['request-id'] unless http_response['request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['client-request-id'] unless http_response['client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Batch::V2018_08_01_7_0::Models::NodeFileListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists the files in a task's directory on its compute node.
    #
    # @param job_id [String] The ID of the job that contains the task.
    # @param task_id [String] The ID of the task whose files you want to list.
    # @param recursive [Boolean] Whether to list children of the task directory.
    # This parameter can be used in combination with the filter parameter to list
    # specific type of files.
    # @param file_list_from_task_options [FileListFromTaskOptions] Additional
    # parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [NodeFileListResult] which provide lazy access to pages of the
    # response.
    #
    def list_from_task_as_lazy(job_id, task_id, recursive:nil, file_list_from_task_options:nil, custom_headers:nil)
      response = list_from_task_async(job_id, task_id, recursive:recursive, file_list_from_task_options:file_list_from_task_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          file_list_from_task_next_options = file_list_from_task_options
          list_from_task_next_async(next_page_link, file_list_from_task_next_options:file_list_from_task_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

    #
    # Lists all of the files in task directories on the specified compute node.
    #
    # @param pool_id [String] The ID of the pool that contains the compute node.
    # @param node_id [String] The ID of the compute node whose files you want to
    # list.
    # @param recursive [Boolean] Whether to list children of a directory.
    # @param file_list_from_compute_node_options [FileListFromComputeNodeOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [NodeFileListResult] which provide lazy access to pages of the
    # response.
    #
    def list_from_compute_node_as_lazy(pool_id, node_id, recursive:nil, file_list_from_compute_node_options:nil, custom_headers:nil)
      response = list_from_compute_node_async(pool_id, node_id, recursive:recursive, file_list_from_compute_node_options:file_list_from_compute_node_options, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          file_list_from_compute_node_next_options = file_list_from_compute_node_options
          list_from_compute_node_next_async(next_page_link, file_list_from_compute_node_next_options:file_list_from_compute_node_next_options, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
