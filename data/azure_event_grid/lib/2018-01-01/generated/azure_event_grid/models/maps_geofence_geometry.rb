# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::EventGrid::V2018_01_01
  module Models
    #
    # The geofence geometry.
    #
    class MapsGeofenceGeometry

      include MsRestAzure

      # @return [String] ID of the device.
      attr_accessor :device_id

      # @return [Float] Distance from the coordinate to the closest border of
      # the geofence. Positive means the coordinate is outside of the geofence.
      # If the coordinate is outside of the geofence, but more than the value
      # of searchBuffer away from the closest geofence border, then the value
      # is 999. Negative means the coordinate is inside of the geofence. If the
      # coordinate is inside the polygon, but more than the value of
      # searchBuffer away from the closest geofencing border,then the value is
      # -999. A value of 999 means that there is great confidence the
      # coordinate is well outside the geofence. A value of -999 means that
      # there is great confidence the coordinate is well within the geofence.
      attr_accessor :distance

      # @return [String] The unique ID for the geofence geometry.
      attr_accessor :geometry_id

      # @return [Float] Latitude of the nearest point of the geometry.
      attr_accessor :nearest_lat

      # @return [Float] Longitude of the nearest point of the geometry.
      attr_accessor :nearest_lon

      # @return [String] The unique id returned from user upload service when
      # uploading a geofence. Will not be included in geofencing post API.
      attr_accessor :ud_id


      #
      # Mapper for MapsGeofenceGeometry class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'MapsGeofenceGeometry',
          type: {
            name: 'Composite',
            class_name: 'MapsGeofenceGeometry',
            model_properties: {
              device_id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'deviceId',
                type: {
                  name: 'String'
                }
              },
              distance: {
                client_side_validation: true,
                required: false,
                serialized_name: 'distance',
                type: {
                  name: 'Double'
                }
              },
              geometry_id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'geometryId',
                type: {
                  name: 'String'
                }
              },
              nearest_lat: {
                client_side_validation: true,
                required: false,
                serialized_name: 'nearestLat',
                type: {
                  name: 'Double'
                }
              },
              nearest_lon: {
                client_side_validation: true,
                required: false,
                serialized_name: 'nearestLon',
                type: {
                  name: 'Double'
                }
              },
              ud_id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'udId',
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
