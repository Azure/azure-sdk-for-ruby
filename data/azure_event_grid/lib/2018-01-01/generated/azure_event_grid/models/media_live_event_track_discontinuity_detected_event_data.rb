# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::EventGrid::V2018_01_01
  module Models
    #
    # Ingest track discontinuity detected event data.
    #
    class MediaLiveEventTrackDiscontinuityDetectedEventData

      include MsRestAzure

      # @return [String] Gets the type of the track (Audio / Video).
      attr_accessor :track_type

      # @return [String] Gets the track name.
      attr_accessor :track_name

      # @return [Integer] Gets the bitrate.
      attr_accessor :bitrate

      # @return [String] Gets the timestamp of the previous fragment.
      attr_accessor :previous_timestamp

      # @return [String] Gets the timestamp of the current fragment.
      attr_accessor :new_timestamp

      # @return [String] Gets the timescale in which both timestamps and
      # discontinuity gap are represented.
      attr_accessor :timescale

      # @return [String] Gets the discontinuity gap between PreviousTimestamp
      # and NewTimestamp.
      attr_accessor :discontinuity_gap


      #
      # Mapper for MediaLiveEventTrackDiscontinuityDetectedEventData class as
      # Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          required: false,
          serialized_name: 'MediaLiveEventTrackDiscontinuityDetectedEventData',
          type: {
            name: 'Composite',
            class_name: 'MediaLiveEventTrackDiscontinuityDetectedEventData',
            model_properties: {
              track_type: {
                required: false,
                read_only: true,
                serialized_name: 'trackType',
                type: {
                  name: 'String'
                }
              },
              track_name: {
                required: false,
                read_only: true,
                serialized_name: 'trackName',
                type: {
                  name: 'String'
                }
              },
              bitrate: {
                required: false,
                read_only: true,
                serialized_name: 'bitrate',
                type: {
                  name: 'Number'
                }
              },
              previous_timestamp: {
                required: false,
                read_only: true,
                serialized_name: 'previousTimestamp',
                type: {
                  name: 'String'
                }
              },
              new_timestamp: {
                required: false,
                read_only: true,
                serialized_name: 'newTimestamp',
                type: {
                  name: 'String'
                }
              },
              timescale: {
                required: false,
                read_only: true,
                serialized_name: 'timescale',
                type: {
                  name: 'String'
                }
              },
              discontinuity_gap: {
                required: false,
                read_only: true,
                serialized_name: 'discontinuityGap',
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
