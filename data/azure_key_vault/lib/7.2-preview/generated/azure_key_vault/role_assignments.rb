# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::KeyVault::V7_2_preview
  #
  # The key vault client performs cryptographic key operations and vault
  # operations against the Key Vault service.
  #
  class RoleAssignments
    include MsRestAzure

    #
    # Creates and initializes a new instance of the RoleAssignments class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [KeyVaultClient] reference to the KeyVaultClient
    attr_reader :client

    #
    # Deletes a role assignment.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignment to delete.
    # @param role_assignment_name [String] The name of the role assignment to
    # delete.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RoleAssignment] operation results.
    #
    def delete(vault_base_url, scope, role_assignment_name, custom_headers:nil)
      response = delete_async(vault_base_url, scope, role_assignment_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a role assignment.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignment to delete.
    # @param role_assignment_name [String] The name of the role assignment to
    # delete.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(vault_base_url, scope, role_assignment_name, custom_headers:nil)
      delete_async(vault_base_url, scope, role_assignment_name, custom_headers:custom_headers).value!
    end

    #
    # Deletes a role assignment.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignment to delete.
    # @param role_assignment_name [String] The name of the role assignment to
    # delete.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(vault_base_url, scope, role_assignment_name, custom_headers:nil)
      fail ArgumentError, 'vault_base_url is nil' if vault_base_url.nil?
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, 'role_assignment_name is nil' if role_assignment_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{vaultBaseUrl}', vault_base_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'roleAssignmentName' => role_assignment_name},
          skip_encoding_path_params: {'scope' => scope},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::KeyVault::V7_2_preview::Models::RoleAssignment.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates a role assignment.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignment to create.
    # @param role_assignment_name [String] The name of the role assignment to
    # create. It can be any valid GUID.
    # @param parameters [RoleAssignmentCreateParameters] Parameters for the role
    # assignment.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RoleAssignment] operation results.
    #
    def create(vault_base_url, scope, role_assignment_name, parameters, custom_headers:nil)
      response = create_async(vault_base_url, scope, role_assignment_name, parameters, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates a role assignment.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignment to create.
    # @param role_assignment_name [String] The name of the role assignment to
    # create. It can be any valid GUID.
    # @param parameters [RoleAssignmentCreateParameters] Parameters for the role
    # assignment.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_with_http_info(vault_base_url, scope, role_assignment_name, parameters, custom_headers:nil)
      create_async(vault_base_url, scope, role_assignment_name, parameters, custom_headers:custom_headers).value!
    end

    #
    # Creates a role assignment.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignment to create.
    # @param role_assignment_name [String] The name of the role assignment to
    # create. It can be any valid GUID.
    # @param parameters [RoleAssignmentCreateParameters] Parameters for the role
    # assignment.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_async(vault_base_url, scope, role_assignment_name, parameters, custom_headers:nil)
      fail ArgumentError, 'vault_base_url is nil' if vault_base_url.nil?
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, 'role_assignment_name is nil' if role_assignment_name.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::KeyVault::V7_2_preview::Models::RoleAssignmentCreateParameters.mapper()
      request_content = @client.serialize(request_mapper,  parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{vaultBaseUrl}', vault_base_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'roleAssignmentName' => role_assignment_name},
          skip_encoding_path_params: {'scope' => scope},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::KeyVault::V7_2_preview::Models::RoleAssignment.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get the specified role assignment.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignment.
    # @param role_assignment_name [String] The name of the role assignment to get.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RoleAssignment] operation results.
    #
    def get(vault_base_url, scope, role_assignment_name, custom_headers:nil)
      response = get_async(vault_base_url, scope, role_assignment_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get the specified role assignment.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignment.
    # @param role_assignment_name [String] The name of the role assignment to get.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(vault_base_url, scope, role_assignment_name, custom_headers:nil)
      get_async(vault_base_url, scope, role_assignment_name, custom_headers:custom_headers).value!
    end

    #
    # Get the specified role assignment.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignment.
    # @param role_assignment_name [String] The name of the role assignment to get.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(vault_base_url, scope, role_assignment_name, custom_headers:nil)
      fail ArgumentError, 'vault_base_url is nil' if vault_base_url.nil?
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, 'role_assignment_name is nil' if role_assignment_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{vaultBaseUrl}', vault_base_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'roleAssignmentName' => role_assignment_name},
          skip_encoding_path_params: {'scope' => scope},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::KeyVault::V7_2_preview::Models::RoleAssignment.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets role assignments for a scope.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignments.
    # @param filter [String] The filter to apply on the operation. Use
    # $filter=atScope() to return all role assignments at or above the scope. Use
    # $filter=principalId eq {id} to return all role assignments at, above or below
    # the scope for the specified principal.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<RoleAssignment>] operation results.
    #
    def list_for_scope(vault_base_url, scope, filter:nil, custom_headers:nil)
      first_page = list_for_scope_as_lazy(vault_base_url, scope, filter:filter, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Gets role assignments for a scope.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignments.
    # @param filter [String] The filter to apply on the operation. Use
    # $filter=atScope() to return all role assignments at or above the scope. Use
    # $filter=principalId eq {id} to return all role assignments at, above or below
    # the scope for the specified principal.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_for_scope_with_http_info(vault_base_url, scope, filter:nil, custom_headers:nil)
      list_for_scope_async(vault_base_url, scope, filter:filter, custom_headers:custom_headers).value!
    end

    #
    # Gets role assignments for a scope.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignments.
    # @param filter [String] The filter to apply on the operation. Use
    # $filter=atScope() to return all role assignments at or above the scope. Use
    # $filter=principalId eq {id} to return all role assignments at, above or below
    # the scope for the specified principal.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_for_scope_async(vault_base_url, scope, filter:nil, custom_headers:nil)
      fail ArgumentError, 'vault_base_url is nil' if vault_base_url.nil?
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{scope}/providers/Microsoft.Authorization/roleAssignments'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{vaultBaseUrl}', vault_base_url)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'scope' => scope},
          query_params: {'$filter' => filter,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::KeyVault::V7_2_preview::Models::RoleAssignmentListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets role assignments for a scope.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RoleAssignmentListResult] operation results.
    #
    def list_for_scope_next(next_page_link, custom_headers:nil)
      response = list_for_scope_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets role assignments for a scope.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_for_scope_next_with_http_info(next_page_link, custom_headers:nil)
      list_for_scope_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Gets role assignments for a scope.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_for_scope_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::KeyVault::V7_2_preview::Models::RoleAssignmentListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets role assignments for a scope.
    #
    # @param vault_base_url [String] The vault name, for example
    # https://myvault.vault.azure.net.
    # @param scope [String] The scope of the role assignments.
    # @param filter [String] The filter to apply on the operation. Use
    # $filter=atScope() to return all role assignments at or above the scope. Use
    # $filter=principalId eq {id} to return all role assignments at, above or below
    # the scope for the specified principal.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RoleAssignmentListResult] which provide lazy access to pages of the
    # response.
    #
    def list_for_scope_as_lazy(vault_base_url, scope, filter:nil, custom_headers:nil)
      response = list_for_scope_async(vault_base_url, scope, filter:filter, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_for_scope_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
