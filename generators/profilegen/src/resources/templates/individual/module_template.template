# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.

<%- @module_requires.each do |module_require| -%>
require '<%= module_require %>'
<%- end -%>

module Azure::<%= @module_name %>::Profiles::<%= @profile_name %>
  <%- if(@management_mode) -%>
  module Mgmt
    <%- @management_clients_ops_mapper.each do |key, value| -%>
    <%- value.each do |operation_type| -%>
    <%- if(operation_type[:operation_name_ruby] != 'DO_NOT_ADD') -%>
    <%= operation_type[:operation_name] %> = <%= operation_type[:operation_body] %>
    <%- end -%>
    <%- end -%>
    <%- end -%>

    module Models
      <%- @management_model_types.each do |model_type| -%>
      <%= model_type[:model_name] %> = <%= model_type[:model_body] %>
      <%- end -%>
    end

    #
    # <%= @management_class_name %>
    #
    class <%= @management_class_name %>
      attr_reader <%- @management_clients_ops_mapper.each do |key, value| -%><% value.each do |operation_type| %><%- if(operation_type[:operation_name_ruby] != 'DO_NOT_ADD') -%>:<%= operation_type[:operation_name_ruby] %>, <% end %><% end %><% end %>:configurable, :base_url, :options, :model_classes

      def initialize(options = {})
        if options.is_a?(Hash) && options.length == 0
          @options = setup_default_options
        else
          @options = options
        end

        reset!(options)

        @configurable = self
        @base_url = options[:base_url].nil? ? nil:options[:base_url]
        @options = options[:options].nil? ? nil:options[:options]

        <%- @management_clients_ops_mapper.each_with_index do |(key, value), index| -%>
        client_<%= index %> = <%= key %>.new(configurable.credentials, base_url, options)
        if(client_<%= index %>.respond_to?(:subscription_id))
          client_<%= index %>.subscription_id = configurable.subscription_id
        end
        add_telemetry(client_<%= index %>)
        <%- value.each do |operation_type| -%>
        <%- if(operation_type[:operation_name_ruby] != 'DO_NOT_ADD') -%>
        @<%= operation_type[:operation_name_ruby] %> = client_<%= index %>.<%= operation_type[:operation_name_ruby] %>
        <%- end -%>
        <%- end -%>

        <%- end -%>
        @model_classes = ModelClasses.new
      end

      def add_telemetry(client)
        profile_information = 'Profiles/<%= @profile_name %>/<%= @module_name %>/Mgmt'
        client.add_user_agent_information(profile_information)
      end

    end

    class ModelClasses
      <%- @management_model_types.each do |model_type| -%>
      def <%= model_type[:method_name] %>
        <%= model_type[:model_body] %>
      end
      <%- end -%>
    end
  end
  <%- else -%>
  <%- @data_clients_ops_mapper.each do |key, value| -%>
  <%- value.each do |operation_type| -%>
  <%- if(operation_type[:operation_name_ruby] != 'DO_NOT_ADD') -%>
  <%= operation_type[:operation_name] %> = <%= operation_type[:operation_body] %>
  <%- end -%>
  <%- end -%>
  <%- end -%>

  module Models
    <%- @data_model_types.each do |model_type| -%>
    <%= model_type[:model_name] %> = <%= model_type[:model_body] %>
    <%- end -%>
  end

  #
  # <%= @data_class_name %>
  #
  class <%= @data_class_name %>
    attr_reader <%- @data_clients_ops_mapper.each do |key, value| -%><% value.each do |operation_type| %><%- if(operation_type[:operation_name_ruby] != 'DO_NOT_ADD') -%>:<%= operation_type[:operation_name_ruby] %>, <% end %><% end %><% end %>:configurable, :base_url, :options, :model_classes

    def initialize(options = {})
      if options.is_a?(Hash) && options.length == 0
        @options = setup_default_options
      else
        @options = options
      end

      reset!(options)

      @configurable = self
      @base_url = options[:base_url].nil? ? nil:options[:base_url]
      @options = options[:options].nil? ? nil:options[:options]

      <%- @data_clients_ops_mapper.each_with_index do |(key, value), index| -%>
      client_<%= index %> = <%= key %>.new(configurable.credentials, base_url, options)
      if(client_<%= index %>.respond_to?(:subscription_id))
        client_<%= index %>.subscription_id = configurable.subscription_id
      end
      add_telemetry(client_<%= index %>)
      <%- value.each do |operation_type| -%>
      <%- if(operation_type[:operation_name_ruby] != 'DO_NOT_ADD') -%>
      @<%= operation_type[:operation_name_ruby] %> = client_<%= index %>.<%= operation_type[:operation_name_ruby] %>
      <%- end -%>
      <%- end -%>

      <%- end -%>
      @model_classes = ModelClasses.new
    end

    def add_telemetry(client)
      profile_information = 'Profiles/<%= @profile_name %>/<%= @module_name %>'
      client.add_user_agent_information(profile_information)
    end

  end

  class ModelClasses
    <%- @data_model_types.each do |model_type| -%>
    def <%= model_type[:method_name] %>
      <%= model_type[:model_body] %>
    end
    <%- end -%>
  end
  <%- end -%>
end
