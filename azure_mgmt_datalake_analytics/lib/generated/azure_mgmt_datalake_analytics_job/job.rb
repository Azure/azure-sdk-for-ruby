# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::DataLakeAnalytics::Job
  #
  # Creates an Azure Data Lake Analytics job client.
  #
  class Job
    include Azure::ARM::DataLakeAnalytics::Job::Models
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Job class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return reference to the DataLakeAnalyticsJobManagementClient
    attr_reader :client

    #
    # Gets statistics of the specified job.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobStatistics] operation results.
    #
    def get_statistics(account_name, job_identity, custom_headers = nil)
      response = get_statistics_async(account_name, job_identity, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets statistics of the specified job.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_statistics_with_http_info(account_name, job_identity, custom_headers = nil)
      get_statistics_async(account_name, job_identity, custom_headers).value!
    end

    #
    # Gets statistics of the specified job.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_statistics_async(account_name, job_identity, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_job_dns_suffix is nil' if @client.adla_job_dns_suffix.nil?
      fail ArgumentError, 'job_identity is nil' if job_identity.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/Jobs/{jobIdentity}/GetStatistics'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobIdentity' => job_identity},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaJobDnsSuffix}', @client.adla_job_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = JobStatistics.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the job debug data information specified by the job ID.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobDataPath] operation results.
    #
    def get_debug_data_path(account_name, job_identity, custom_headers = nil)
      response = get_debug_data_path_async(account_name, job_identity, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the job debug data information specified by the job ID.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_debug_data_path_with_http_info(account_name, job_identity, custom_headers = nil)
      get_debug_data_path_async(account_name, job_identity, custom_headers).value!
    end

    #
    # Gets the job debug data information specified by the job ID.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_debug_data_path_async(account_name, job_identity, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_job_dns_suffix is nil' if @client.adla_job_dns_suffix.nil?
      fail ArgumentError, 'job_identity is nil' if job_identity.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/Jobs/{jobIdentity}/GetDebugDataPath'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobIdentity' => job_identity},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaJobDnsSuffix}', @client.adla_job_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :post, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = JobDataPath.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Builds (compiles) the specified job in the specified Data Lake Analytics
    # account for job correctness and validation.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param parameters [JobInformation] The parameters to build a job.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobInformation] operation results.
    #
    def build(account_name, parameters, custom_headers = nil)
      response = build_async(account_name, parameters, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Builds (compiles) the specified job in the specified Data Lake Analytics
    # account for job correctness and validation.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param parameters [JobInformation] The parameters to build a job.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def build_with_http_info(account_name, parameters, custom_headers = nil)
      build_async(account_name, parameters, custom_headers).value!
    end

    #
    # Builds (compiles) the specified job in the specified Data Lake Analytics
    # account for job correctness and validation.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param parameters [JobInformation] The parameters to build a job.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def build_async(account_name, parameters, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_job_dns_suffix is nil' if @client.adla_job_dns_suffix.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = JobInformation.mapper()
      request_content = @client.serialize(request_mapper,  parameters, 'parameters')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '/BuildJob'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaJobDnsSuffix}', @client.adla_job_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :post, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = JobInformation.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Cancels the running job specified by the job ID.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID to cancel.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def cancel(account_name, job_identity, custom_headers = nil)
      response = cancel_async(account_name, job_identity, custom_headers).value!
      nil
    end

    #
    # Cancels the running job specified by the job ID.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID to cancel.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def cancel_with_http_info(account_name, job_identity, custom_headers = nil)
      cancel_async(account_name, job_identity, custom_headers).value!
    end

    #
    # Cancels the running job specified by the job ID.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID to cancel.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def cancel_async(account_name, job_identity, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_job_dns_suffix is nil' if @client.adla_job_dns_suffix.nil?
      fail ArgumentError, 'job_identity is nil' if job_identity.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/Jobs/{jobIdentity}/CancelJob'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobIdentity' => job_identity},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaJobDnsSuffix}', @client.adla_job_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :post, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Gets the job information for the specified job ID.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobInformation] operation results.
    #
    def get(account_name, job_identity, custom_headers = nil)
      response = get_async(account_name, job_identity, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the job information for the specified job ID.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(account_name, job_identity, custom_headers = nil)
      get_async(account_name, job_identity, custom_headers).value!
    end

    #
    # Gets the job information for the specified job ID.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity JobInfo ID.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(account_name, job_identity, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_job_dns_suffix is nil' if @client.adla_job_dns_suffix.nil?
      fail ArgumentError, 'job_identity is nil' if job_identity.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/Jobs/{jobIdentity}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobIdentity' => job_identity},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaJobDnsSuffix}', @client.adla_job_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = JobInformation.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Submits a job to the specified Data Lake Analytics account.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity The job ID (a GUID) for the job being submitted.
    # @param parameters [JobInformation] The parameters to submit a job.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobInformation] operation results.
    #
    def create(account_name, job_identity, parameters, custom_headers = nil)
      response = create_async(account_name, job_identity, parameters, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Submits a job to the specified Data Lake Analytics account.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity The job ID (a GUID) for the job being submitted.
    # @param parameters [JobInformation] The parameters to submit a job.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_with_http_info(account_name, job_identity, parameters, custom_headers = nil)
      create_async(account_name, job_identity, parameters, custom_headers).value!
    end

    #
    # Submits a job to the specified Data Lake Analytics account.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param job_identity The job ID (a GUID) for the job being submitted.
    # @param parameters [JobInformation] The parameters to submit a job.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_async(account_name, job_identity, parameters, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_job_dns_suffix is nil' if @client.adla_job_dns_suffix.nil?
      fail ArgumentError, 'job_identity is nil' if job_identity.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = JobInformation.mapper()
      request_content = @client.serialize(request_mapper,  parameters, 'parameters')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '/Jobs/{jobIdentity}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'jobIdentity' => job_identity},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaJobDnsSuffix}', @client.adla_job_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :put, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = JobInformation.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists the jobs, if any, associated with the specified Data Lake Analytics
    # account. The response includes a link to the next page of results, if any.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param search [String] A free form search. A free-text search expression to
    # match for whether a particular entry should be included in the feed, e.g.
    # Categories?$search=blue OR green. Optional.
    # @param format [String] The return format. Return the response in particular
    # formatxii without access to request headers for standard content-type
    # negotiation (e.g Orders?$format=json). Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobInfoListResult] which provide lazy access to pages of the
    # response.
    #
    def list_as_lazy(account_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, search = nil, format = nil, custom_headers = nil)
      response = list_async(account_name, filter, top, skip, expand, select, orderby, count, search, format, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Lists the jobs, if any, associated with the specified Data Lake Analytics
    # account. The response includes a link to the next page of results, if any.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param search [String] A free form search. A free-text search expression to
    # match for whether a particular entry should be included in the feed, e.g.
    # Categories?$search=blue OR green. Optional.
    # @param format [String] The return format. Return the response in particular
    # formatxii without access to request headers for standard content-type
    # negotiation (e.g Orders?$format=json). Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<JobInformation>] operation results.
    #
    def list(account_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, search = nil, format = nil, custom_headers = nil)
      first_page = list_as_lazy(account_name, filter, top, skip, expand, select, orderby, count, search, format, custom_headers)
      first_page.get_all_items
    end

    #
    # Lists the jobs, if any, associated with the specified Data Lake Analytics
    # account. The response includes a link to the next page of results, if any.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param search [String] A free form search. A free-text search expression to
    # match for whether a particular entry should be included in the feed, e.g.
    # Categories?$search=blue OR green. Optional.
    # @param format [String] The return format. Return the response in particular
    # formatxii without access to request headers for standard content-type
    # negotiation (e.g Orders?$format=json). Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(account_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, search = nil, format = nil, custom_headers = nil)
      list_async(account_name, filter, top, skip, expand, select, orderby, count, search, format, custom_headers).value!
    end

    #
    # Lists the jobs, if any, associated with the specified Data Lake Analytics
    # account. The response includes a link to the next page of results, if any.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute job operations on.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param search [String] A free form search. A free-text search expression to
    # match for whether a particular entry should be included in the feed, e.g.
    # Categories?$search=blue OR green. Optional.
    # @param format [String] The return format. Return the response in particular
    # formatxii without access to request headers for standard content-type
    # negotiation (e.g Orders?$format=json). Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(account_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, search = nil, format = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_job_dns_suffix is nil' if @client.adla_job_dns_suffix.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/Jobs'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'$search' => search,'$format' => format,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaJobDnsSuffix}', @client.adla_job_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = JobInfoListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists the jobs, if any, associated with the specified Data Lake Analytics
    # account. The response includes a link to the next page of results, if any.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobInfoListResult] operation results.
    #
    def list_next(next_page_link, custom_headers = nil)
      response = list_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists the jobs, if any, associated with the specified Data Lake Analytics
    # account. The response includes a link to the next page of results, if any.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers = nil)
      list_next_async(next_page_link, custom_headers).value!
    end

    #
    # Lists the jobs, if any, associated with the specified Data Lake Analytics
    # account. The response includes a link to the next page of results, if any.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = JobInfoListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end
