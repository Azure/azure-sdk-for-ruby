# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::DataLakeAnalytics::Catalog
  #
  # Creates an Azure Data Lake Analytics catalog client.
  #
  class Catalog
    include Azure::ARM::DataLakeAnalytics::Catalog::Models
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Catalog class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return reference to the DataLakeAnalyticsCatalogManagementClient
    attr_reader :client

    #
    # Creates the specified secret for use with external data sources in the
    # specified database.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database in which to create
    # the secret.
    # @param secret_name [String] The name of the secret.
    # @param parameters [DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters]
    # The parameters required to create the secret (name and password)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlSecret] operation results.
    #
    def create_secret(account_name, database_name, secret_name, parameters, custom_headers = nil)
      response = create_secret_async(account_name, database_name, secret_name, parameters, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates the specified secret for use with external data sources in the
    # specified database.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database in which to create
    # the secret.
    # @param secret_name [String] The name of the secret.
    # @param parameters [DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters]
    # The parameters required to create the secret (name and password)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_secret_with_http_info(account_name, database_name, secret_name, parameters, custom_headers = nil)
      create_secret_async(account_name, database_name, secret_name, parameters, custom_headers).value!
    end

    #
    # Creates the specified secret for use with external data sources in the
    # specified database.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database in which to create
    # the secret.
    # @param secret_name [String] The name of the secret.
    # @param parameters [DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters]
    # The parameters required to create the secret (name and password)
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_secret_async(account_name, database_name, secret_name, parameters, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'secret_name is nil' if secret_name.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters.mapper()
      request_content = @client.serialize(request_mapper,  parameters, 'parameters')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '/catalog/usql/databases/{databaseName}/secrets/{secretName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'secretName' => secret_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :put, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlSecret.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Modifies the specified secret for use with external data sources in the
    # specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param secret_name [String] The name of the secret.
    # @param parameters [DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters]
    # The parameters required to modify the secret (name and password)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlSecret] operation results.
    #
    def update_secret(account_name, database_name, secret_name, parameters, custom_headers = nil)
      response = update_secret_async(account_name, database_name, secret_name, parameters, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Modifies the specified secret for use with external data sources in the
    # specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param secret_name [String] The name of the secret.
    # @param parameters [DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters]
    # The parameters required to modify the secret (name and password)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_secret_with_http_info(account_name, database_name, secret_name, parameters, custom_headers = nil)
      update_secret_async(account_name, database_name, secret_name, parameters, custom_headers).value!
    end

    #
    # Modifies the specified secret for use with external data sources in the
    # specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param secret_name [String] The name of the secret.
    # @param parameters [DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters]
    # The parameters required to modify the secret (name and password)
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_secret_async(account_name, database_name, secret_name, parameters, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'secret_name is nil' if secret_name.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters.mapper()
      request_content = @client.serialize(request_mapper,  parameters, 'parameters')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '/catalog/usql/databases/{databaseName}/secrets/{secretName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'secretName' => secret_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :patch, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlSecret.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the specified secret in the specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param secret_name [String] The name of the secret to get
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlSecret] operation results.
    #
    def get_secret(account_name, database_name, secret_name, custom_headers = nil)
      response = get_secret_async(account_name, database_name, secret_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the specified secret in the specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param secret_name [String] The name of the secret to get
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_secret_with_http_info(account_name, database_name, secret_name, custom_headers = nil)
      get_secret_async(account_name, database_name, secret_name, custom_headers).value!
    end

    #
    # Gets the specified secret in the specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param secret_name [String] The name of the secret to get
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_secret_async(account_name, database_name, secret_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'secret_name is nil' if secret_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/secrets/{secretName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'secretName' => secret_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlSecret.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes the specified secret in the specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param secret_name [String] The name of the secret to delete
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete_secret(account_name, database_name, secret_name, custom_headers = nil)
      response = delete_secret_async(account_name, database_name, secret_name, custom_headers).value!
      nil
    end

    #
    # Deletes the specified secret in the specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param secret_name [String] The name of the secret to delete
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_secret_with_http_info(account_name, database_name, secret_name, custom_headers = nil)
      delete_secret_async(account_name, database_name, secret_name, custom_headers).value!
    end

    #
    # Deletes the specified secret in the specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param secret_name [String] The name of the secret to delete
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_secret_async(account_name, database_name, secret_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'secret_name is nil' if secret_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/secrets/{secretName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'secretName' => secret_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :delete, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Deletes all secrets in the specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete_all_secrets(account_name, database_name, custom_headers = nil)
      response = delete_all_secrets_async(account_name, database_name, custom_headers).value!
      nil
    end

    #
    # Deletes all secrets in the specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_all_secrets_with_http_info(account_name, database_name, custom_headers = nil)
      delete_all_secrets_async(account_name, database_name, custom_headers).value!
    end

    #
    # Deletes all secrets in the specified database
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the secret.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_all_secrets_async(account_name, database_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/secrets'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :delete, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified external data source from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # external data source.
    # @param external_data_source_name [String] The name of the external data
    # source.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlExternalDataSource] operation results.
    #
    def get_external_data_source(account_name, database_name, external_data_source_name, custom_headers = nil)
      response = get_external_data_source_async(account_name, database_name, external_data_source_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified external data source from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # external data source.
    # @param external_data_source_name [String] The name of the external data
    # source.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_external_data_source_with_http_info(account_name, database_name, external_data_source_name, custom_headers = nil)
      get_external_data_source_async(account_name, database_name, external_data_source_name, custom_headers).value!
    end

    #
    # Retrieves the specified external data source from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # external data source.
    # @param external_data_source_name [String] The name of the external data
    # source.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_external_data_source_async(account_name, database_name, external_data_source_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'external_data_source_name is nil' if external_data_source_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/externaldatasources/{externalDataSourceName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'externalDataSourceName' => external_data_source_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlExternalDataSource.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of external data sources from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # external data sources.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlExternalDataSourceList] which provide lazy access to pages of
    # the response.
    #
    def list_external_data_sources_as_lazy(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_external_data_sources_async(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_external_data_sources_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of external data sources from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # external data sources.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlExternalDataSource>] operation results.
    #
    def list_external_data_sources(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_external_data_sources_as_lazy(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of external data sources from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # external data sources.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_external_data_sources_with_http_info(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_external_data_sources_async(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of external data sources from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # external data sources.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_external_data_sources_async(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/externaldatasources'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlExternalDataSourceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified credential from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param credential_name [String] The name of the credential.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlCredential] operation results.
    #
    def get_credential(account_name, database_name, credential_name, custom_headers = nil)
      response = get_credential_async(account_name, database_name, credential_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified credential from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param credential_name [String] The name of the credential.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_credential_with_http_info(account_name, database_name, credential_name, custom_headers = nil)
      get_credential_async(account_name, database_name, credential_name, custom_headers).value!
    end

    #
    # Retrieves the specified credential from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param credential_name [String] The name of the credential.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_credential_async(account_name, database_name, credential_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'credential_name is nil' if credential_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/credentials/{credentialName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'credentialName' => credential_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlCredential.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of credentials from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlCredentialList] which provide lazy access to pages of the
    # response.
    #
    def list_credentials_as_lazy(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_credentials_async(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_credentials_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of credentials from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlCredential>] operation results.
    #
    def list_credentials(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_credentials_as_lazy(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of credentials from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_credentials_with_http_info(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_credentials_async(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of credentials from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_credentials_async(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/credentials'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlCredentialList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified procedure from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # procedure.
    # @param schema_name [String] The name of the schema containing the procedure.
    # @param procedure_name [String] The name of the procedure.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlProcedure] operation results.
    #
    def get_procedure(account_name, database_name, schema_name, procedure_name, custom_headers = nil)
      response = get_procedure_async(account_name, database_name, schema_name, procedure_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified procedure from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # procedure.
    # @param schema_name [String] The name of the schema containing the procedure.
    # @param procedure_name [String] The name of the procedure.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_procedure_with_http_info(account_name, database_name, schema_name, procedure_name, custom_headers = nil)
      get_procedure_async(account_name, database_name, schema_name, procedure_name, custom_headers).value!
    end

    #
    # Retrieves the specified procedure from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # procedure.
    # @param schema_name [String] The name of the schema containing the procedure.
    # @param procedure_name [String] The name of the procedure.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_procedure_async(account_name, database_name, schema_name, procedure_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, 'procedure_name is nil' if procedure_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures/{procedureName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name,'procedureName' => procedure_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlProcedure.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of procedures from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # procedures.
    # @param schema_name [String] The name of the schema containing the procedures.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlProcedureList] which provide lazy access to pages of the
    # response.
    #
    def list_procedures_as_lazy(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_procedures_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_procedures_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of procedures from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # procedures.
    # @param schema_name [String] The name of the schema containing the procedures.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlProcedure>] operation results.
    #
    def list_procedures(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_procedures_as_lazy(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of procedures from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # procedures.
    # @param schema_name [String] The name of the schema containing the procedures.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_procedures_with_http_info(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_procedures_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of procedures from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # procedures.
    # @param schema_name [String] The name of the schema containing the procedures.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_procedures_async(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/procedures'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlProcedureList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified table from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table.
    # @param schema_name [String] The name of the schema containing the table.
    # @param table_name [String] The name of the table.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTable] operation results.
    #
    def get_table(account_name, database_name, schema_name, table_name, custom_headers = nil)
      response = get_table_async(account_name, database_name, schema_name, table_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified table from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table.
    # @param schema_name [String] The name of the schema containing the table.
    # @param table_name [String] The name of the table.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_table_with_http_info(account_name, database_name, schema_name, table_name, custom_headers = nil)
      get_table_async(account_name, database_name, schema_name, table_name, custom_headers).value!
    end

    #
    # Retrieves the specified table from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table.
    # @param schema_name [String] The name of the schema containing the table.
    # @param table_name [String] The name of the table.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_table_async(account_name, database_name, schema_name, table_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name,'tableName' => table_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTable.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of tables from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the tables.
    # @param schema_name [String] The name of the schema containing the tables.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableList] which provide lazy access to pages of the response.
    #
    def list_tables_as_lazy(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_tables_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_tables_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of tables from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the tables.
    # @param schema_name [String] The name of the schema containing the tables.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlTable>] operation results.
    #
    def list_tables(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_tables_as_lazy(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of tables from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the tables.
    # @param schema_name [String] The name of the schema containing the tables.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_tables_with_http_info(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_tables_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of tables from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the tables.
    # @param schema_name [String] The name of the schema containing the tables.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_tables_async(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified table type from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # type.
    # @param schema_name [String] The name of the schema containing the table type.
    # @param table_type_name [String] The name of the table type to retrieve.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableType] operation results.
    #
    def get_table_type(account_name, database_name, schema_name, table_type_name, custom_headers = nil)
      response = get_table_type_async(account_name, database_name, schema_name, table_type_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified table type from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # type.
    # @param schema_name [String] The name of the schema containing the table type.
    # @param table_type_name [String] The name of the table type to retrieve.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_table_type_with_http_info(account_name, database_name, schema_name, table_type_name, custom_headers = nil)
      get_table_type_async(account_name, database_name, schema_name, table_type_name, custom_headers).value!
    end

    #
    # Retrieves the specified table type from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # type.
    # @param schema_name [String] The name of the schema containing the table type.
    # @param table_type_name [String] The name of the table type to retrieve.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_table_type_async(account_name, database_name, schema_name, table_type_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, 'table_type_name is nil' if table_type_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes/{tableTypeName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name,'tableTypeName' => table_type_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableType.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of table types from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # types.
    # @param schema_name [String] The name of the schema containing the table
    # types.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableTypeList] which provide lazy access to pages of the
    # response.
    #
    def list_table_types_as_lazy(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_table_types_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_table_types_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of table types from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # types.
    # @param schema_name [String] The name of the schema containing the table
    # types.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlTableType>] operation results.
    #
    def list_table_types(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_table_types_as_lazy(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of table types from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # types.
    # @param schema_name [String] The name of the schema containing the table
    # types.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_table_types_with_http_info(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_table_types_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of table types from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # types.
    # @param schema_name [String] The name of the schema containing the table
    # types.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_table_types_async(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tabletypes'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableTypeList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified view from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the view.
    # @param schema_name [String] The name of the schema containing the view.
    # @param view_name [String] The name of the view.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlView] operation results.
    #
    def get_view(account_name, database_name, schema_name, view_name, custom_headers = nil)
      response = get_view_async(account_name, database_name, schema_name, view_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified view from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the view.
    # @param schema_name [String] The name of the schema containing the view.
    # @param view_name [String] The name of the view.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_view_with_http_info(account_name, database_name, schema_name, view_name, custom_headers = nil)
      get_view_async(account_name, database_name, schema_name, view_name, custom_headers).value!
    end

    #
    # Retrieves the specified view from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the view.
    # @param schema_name [String] The name of the schema containing the view.
    # @param view_name [String] The name of the view.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_view_async(account_name, database_name, schema_name, view_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, 'view_name is nil' if view_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/views/{viewName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name,'viewName' => view_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlView.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of views from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the views.
    # @param schema_name [String] The name of the schema containing the views.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlViewList] which provide lazy access to pages of the response.
    #
    def list_views_as_lazy(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_views_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_views_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of views from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the views.
    # @param schema_name [String] The name of the schema containing the views.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlView>] operation results.
    #
    def list_views(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_views_as_lazy(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of views from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the views.
    # @param schema_name [String] The name of the schema containing the views.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_views_with_http_info(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_views_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of views from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the views.
    # @param schema_name [String] The name of the schema containing the views.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_views_async(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/views'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlViewList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified table statistics from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # statistics.
    # @param schema_name [String] The name of the schema containing the statistics.
    # @param table_name [String] The name of the table containing the statistics.
    # @param statistics_name [String] The name of the table statistics.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableStatistics] operation results.
    #
    def get_table_statistic(account_name, database_name, schema_name, table_name, statistics_name, custom_headers = nil)
      response = get_table_statistic_async(account_name, database_name, schema_name, table_name, statistics_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified table statistics from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # statistics.
    # @param schema_name [String] The name of the schema containing the statistics.
    # @param table_name [String] The name of the table containing the statistics.
    # @param statistics_name [String] The name of the table statistics.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_table_statistic_with_http_info(account_name, database_name, schema_name, table_name, statistics_name, custom_headers = nil)
      get_table_statistic_async(account_name, database_name, schema_name, table_name, statistics_name, custom_headers).value!
    end

    #
    # Retrieves the specified table statistics from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # statistics.
    # @param schema_name [String] The name of the schema containing the statistics.
    # @param table_name [String] The name of the table containing the statistics.
    # @param statistics_name [String] The name of the table statistics.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_table_statistic_async(account_name, database_name, schema_name, table_name, statistics_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'statistics_name is nil' if statistics_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics/{statisticsName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name,'tableName' => table_name,'statisticsName' => statistics_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableStatistics.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of table statistics from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # statistics.
    # @param schema_name [String] The name of the schema containing the statistics.
    # @param table_name [String] The name of the table containing the statistics.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableStatisticsList] which provide lazy access to pages of the
    # response.
    #
    def list_table_statistics_as_lazy(account_name, database_name, schema_name, table_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_table_statistics_async(account_name, database_name, schema_name, table_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_table_statistics_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of table statistics from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # statistics.
    # @param schema_name [String] The name of the schema containing the statistics.
    # @param table_name [String] The name of the table containing the statistics.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlTableStatistics>] operation results.
    #
    def list_table_statistics(account_name, database_name, schema_name, table_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_table_statistics_as_lazy(account_name, database_name, schema_name, table_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of table statistics from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # statistics.
    # @param schema_name [String] The name of the schema containing the statistics.
    # @param table_name [String] The name of the table containing the statistics.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_table_statistics_with_http_info(account_name, database_name, schema_name, table_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_table_statistics_async(account_name, database_name, schema_name, table_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of table statistics from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # statistics.
    # @param schema_name [String] The name of the schema containing the statistics.
    # @param table_name [String] The name of the table containing the statistics.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_table_statistics_async(account_name, database_name, schema_name, table_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/statistics'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name,'tableName' => table_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableStatisticsList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified table partition from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # partition.
    # @param schema_name [String] The name of the schema containing the partition.
    # @param table_name [String] The name of the table containing the partition.
    # @param partition_name [String] The name of the table partition.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTablePartition] operation results.
    #
    def get_table_partition(account_name, database_name, schema_name, table_name, partition_name, custom_headers = nil)
      response = get_table_partition_async(account_name, database_name, schema_name, table_name, partition_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified table partition from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # partition.
    # @param schema_name [String] The name of the schema containing the partition.
    # @param table_name [String] The name of the table containing the partition.
    # @param partition_name [String] The name of the table partition.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_table_partition_with_http_info(account_name, database_name, schema_name, table_name, partition_name, custom_headers = nil)
      get_table_partition_async(account_name, database_name, schema_name, table_name, partition_name, custom_headers).value!
    end

    #
    # Retrieves the specified table partition from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # partition.
    # @param schema_name [String] The name of the schema containing the partition.
    # @param table_name [String] The name of the table containing the partition.
    # @param partition_name [String] The name of the table partition.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_table_partition_async(account_name, database_name, schema_name, table_name, partition_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'partition_name is nil' if partition_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions/{partitionName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name,'tableName' => table_name,'partitionName' => partition_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTablePartition.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of table partitions from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # partitions.
    # @param schema_name [String] The name of the schema containing the partitions.
    # @param table_name [String] The name of the table containing the partitions.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTablePartitionList] which provide lazy access to pages of the
    # response.
    #
    def list_table_partitions_as_lazy(account_name, database_name, schema_name, table_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_table_partitions_async(account_name, database_name, schema_name, table_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_table_partitions_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of table partitions from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # partitions.
    # @param schema_name [String] The name of the schema containing the partitions.
    # @param table_name [String] The name of the table containing the partitions.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlTablePartition>] operation results.
    #
    def list_table_partitions(account_name, database_name, schema_name, table_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_table_partitions_as_lazy(account_name, database_name, schema_name, table_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of table partitions from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # partitions.
    # @param schema_name [String] The name of the schema containing the partitions.
    # @param table_name [String] The name of the table containing the partitions.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_table_partitions_with_http_info(account_name, database_name, schema_name, table_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_table_partitions_async(account_name, database_name, schema_name, table_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of table partitions from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # partitions.
    # @param schema_name [String] The name of the schema containing the partitions.
    # @param table_name [String] The name of the table containing the partitions.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_table_partitions_async(account_name, database_name, schema_name, table_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitions'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name,'tableName' => table_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTablePartitionList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of types within the specified database and schema from
    # the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the types.
    # @param schema_name [String] The name of the schema containing the types.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTypeList] which provide lazy access to pages of the response.
    #
    def list_types_as_lazy(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_types_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_types_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of types within the specified database and schema from
    # the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the types.
    # @param schema_name [String] The name of the schema containing the types.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlType>] operation results.
    #
    def list_types(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_types_as_lazy(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of types within the specified database and schema from
    # the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the types.
    # @param schema_name [String] The name of the schema containing the types.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_types_with_http_info(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_types_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of types within the specified database and schema from
    # the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the types.
    # @param schema_name [String] The name of the schema containing the types.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_types_async(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/types'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTypeList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified table valued function from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # valued function.
    # @param schema_name [String] The name of the schema containing the table
    # valued function.
    # @param table_valued_function_name [String] The name of the
    # tableValuedFunction.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableValuedFunction] operation results.
    #
    def get_table_valued_function(account_name, database_name, schema_name, table_valued_function_name, custom_headers = nil)
      response = get_table_valued_function_async(account_name, database_name, schema_name, table_valued_function_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified table valued function from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # valued function.
    # @param schema_name [String] The name of the schema containing the table
    # valued function.
    # @param table_valued_function_name [String] The name of the
    # tableValuedFunction.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_table_valued_function_with_http_info(account_name, database_name, schema_name, table_valued_function_name, custom_headers = nil)
      get_table_valued_function_async(account_name, database_name, schema_name, table_valued_function_name, custom_headers).value!
    end

    #
    # Retrieves the specified table valued function from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # valued function.
    # @param schema_name [String] The name of the schema containing the table
    # valued function.
    # @param table_valued_function_name [String] The name of the
    # tableValuedFunction.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_table_valued_function_async(account_name, database_name, schema_name, table_valued_function_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, 'table_valued_function_name is nil' if table_valued_function_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions/{tableValuedFunctionName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name,'tableValuedFunctionName' => table_valued_function_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableValuedFunction.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of table valued functions from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # valued functions.
    # @param schema_name [String] The name of the schema containing the table
    # valued functions.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableValuedFunctionList] which provide lazy access to pages of
    # the response.
    #
    def list_table_valued_functions_as_lazy(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_table_valued_functions_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_table_valued_functions_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of table valued functions from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # valued functions.
    # @param schema_name [String] The name of the schema containing the table
    # valued functions.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlTableValuedFunction>] operation results.
    #
    def list_table_valued_functions(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_table_valued_functions_as_lazy(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of table valued functions from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # valued functions.
    # @param schema_name [String] The name of the schema containing the table
    # valued functions.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_table_valued_functions_with_http_info(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_table_valued_functions_async(account_name, database_name, schema_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of table valued functions from the Data Lake Analytics
    # catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the table
    # valued functions.
    # @param schema_name [String] The name of the schema containing the table
    # valued functions.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_table_valued_functions_async(account_name, database_name, schema_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}/tablevaluedfunctions'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableValuedFunctionList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified assembly from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # assembly.
    # @param assembly_name [String] The name of the assembly.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlAssembly] operation results.
    #
    def get_assembly(account_name, database_name, assembly_name, custom_headers = nil)
      response = get_assembly_async(account_name, database_name, assembly_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified assembly from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # assembly.
    # @param assembly_name [String] The name of the assembly.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_assembly_with_http_info(account_name, database_name, assembly_name, custom_headers = nil)
      get_assembly_async(account_name, database_name, assembly_name, custom_headers).value!
    end

    #
    # Retrieves the specified assembly from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # assembly.
    # @param assembly_name [String] The name of the assembly.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_assembly_async(account_name, database_name, assembly_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'assembly_name is nil' if assembly_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/assemblies/{assemblyName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'assemblyName' => assembly_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlAssembly.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of assemblies from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # assembly.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlAssemblyList] which provide lazy access to pages of the
    # response.
    #
    def list_assemblies_as_lazy(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_assemblies_async(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_assemblies_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of assemblies from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # assembly.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlAssemblyClr>] operation results.
    #
    def list_assemblies(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_assemblies_as_lazy(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of assemblies from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # assembly.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_assemblies_with_http_info(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_assemblies_async(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of assemblies from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the
    # assembly.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_assemblies_async(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/assemblies'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlAssemblyList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified schema from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param schema_name [String] The name of the schema.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlSchema] operation results.
    #
    def get_schema(account_name, database_name, schema_name, custom_headers = nil)
      response = get_schema_async(account_name, database_name, schema_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified schema from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param schema_name [String] The name of the schema.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_schema_with_http_info(account_name, database_name, schema_name, custom_headers = nil)
      get_schema_async(account_name, database_name, schema_name, custom_headers).value!
    end

    #
    # Retrieves the specified schema from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param schema_name [String] The name of the schema.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_schema_async(account_name, database_name, schema_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, 'schema_name is nil' if schema_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas/{schemaName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name,'schemaName' => schema_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlSchema.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of schemas from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlSchemaList] which provide lazy access to pages of the response.
    #
    def list_schemas_as_lazy(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_schemas_async(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_schemas_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of schemas from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlSchema>] operation results.
    #
    def list_schemas(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_schemas_as_lazy(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of schemas from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_schemas_with_http_info(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_schemas_async(account_name, database_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of schemas from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database containing the schema.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_schemas_async(account_name, database_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}/schemas'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlSchemaList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the specified database from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlDatabase] operation results.
    #
    def get_database(account_name, database_name, custom_headers = nil)
      response = get_database_async(account_name, database_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the specified database from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_database_with_http_info(account_name, database_name, custom_headers = nil)
      get_database_async(account_name, database_name, custom_headers).value!
    end

    #
    # Retrieves the specified database from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param database_name [String] The name of the database.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_database_async(account_name, database_name, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, 'database_name is nil' if database_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases/{databaseName}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'databaseName' => database_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlDatabase.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of databases from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlDatabaseList] which provide lazy access to pages of the
    # response.
    #
    def list_databases_as_lazy(account_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      response = list_databases_async(account_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          list_databases_next_async(next_link, custom_headers)
        end
        page
      end
    end

    #
    # Retrieves the list of databases from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<USqlDatabase>] operation results.
    #
    def list_databases(account_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      first_page = list_databases_as_lazy(account_name, filter, top, skip, expand, select, orderby, count, custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves the list of databases from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_databases_with_http_info(account_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      list_databases_async(account_name, filter, top, skip, expand, select, orderby, count, custom_headers).value!
    end

    #
    # Retrieves the list of databases from the Data Lake Analytics catalog.
    #
    # @param account_name [String] The Azure Data Lake Analytics account to
    # execute catalog operations on.
    # @param filter [String] OData filter. Optional.
    # @param top [Integer] The number of items to return. Optional.
    # @param skip [Integer] The number of items to skip over before returning
    # elements. Optional.
    # @param expand [String] OData expansion. Expand related resources in line
    # with the retrieved resources, e.g. Categories?$expand=Products would expand
    # Product data in line with each Category entry. Optional.
    # @param select [String] OData Select statement. Limits the properties on each
    # entry to just those requested, e.g.
    # Categories?$select=CategoryName,Description. Optional.
    # @param orderby [String] OrderBy clause. One or more comma-separated
    # expressions with an optional "asc" (the default) or "desc" depending on the
    # order you'd like the values sorted, e.g. Categories?$orderby=CategoryName
    # desc. Optional.
    # @param count [Boolean] The Boolean value of true or false to request a count
    # of the matching resources included with the resources in the response, e.g.
    # Categories?$count=true. Optional.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_databases_async(account_name, filter = nil, top = nil, skip = nil, expand = nil, select = nil, orderby = nil, count = nil, custom_headers = nil)
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, '@client.adla_catalog_dns_suffix is nil' if @client.adla_catalog_dns_suffix.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '/catalog/usql/databases'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'$expand' => expand,'$select' => select,'$orderby' => orderby,'$count' => count,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url
      request_url = request_url.gsub('{accountName}', account_name)
      request_url = request_url.gsub('{adlaCatalogDnsSuffix}', @client.adla_catalog_dns_suffix)

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlDatabaseList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of external data sources from the Data Lake Analytics
    # catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlExternalDataSourceList] operation results.
    #
    def list_external_data_sources_next(next_page_link, custom_headers = nil)
      response = list_external_data_sources_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of external data sources from the Data Lake Analytics
    # catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_external_data_sources_next_with_http_info(next_page_link, custom_headers = nil)
      list_external_data_sources_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of external data sources from the Data Lake Analytics
    # catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_external_data_sources_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlExternalDataSourceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of credentials from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlCredentialList] operation results.
    #
    def list_credentials_next(next_page_link, custom_headers = nil)
      response = list_credentials_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of credentials from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_credentials_next_with_http_info(next_page_link, custom_headers = nil)
      list_credentials_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of credentials from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_credentials_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlCredentialList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of procedures from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlProcedureList] operation results.
    #
    def list_procedures_next(next_page_link, custom_headers = nil)
      response = list_procedures_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of procedures from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_procedures_next_with_http_info(next_page_link, custom_headers = nil)
      list_procedures_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of procedures from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_procedures_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlProcedureList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of tables from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableList] operation results.
    #
    def list_tables_next(next_page_link, custom_headers = nil)
      response = list_tables_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of tables from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_tables_next_with_http_info(next_page_link, custom_headers = nil)
      list_tables_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of tables from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_tables_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of table types from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableTypeList] operation results.
    #
    def list_table_types_next(next_page_link, custom_headers = nil)
      response = list_table_types_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of table types from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_table_types_next_with_http_info(next_page_link, custom_headers = nil)
      list_table_types_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of table types from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_table_types_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableTypeList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of views from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlViewList] operation results.
    #
    def list_views_next(next_page_link, custom_headers = nil)
      response = list_views_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of views from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_views_next_with_http_info(next_page_link, custom_headers = nil)
      list_views_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of views from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_views_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlViewList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of table statistics from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableStatisticsList] operation results.
    #
    def list_table_statistics_next(next_page_link, custom_headers = nil)
      response = list_table_statistics_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of table statistics from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_table_statistics_next_with_http_info(next_page_link, custom_headers = nil)
      list_table_statistics_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of table statistics from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_table_statistics_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableStatisticsList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of table partitions from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTablePartitionList] operation results.
    #
    def list_table_partitions_next(next_page_link, custom_headers = nil)
      response = list_table_partitions_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of table partitions from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_table_partitions_next_with_http_info(next_page_link, custom_headers = nil)
      list_table_partitions_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of table partitions from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_table_partitions_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTablePartitionList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of types within the specified database and schema from
    # the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTypeList] operation results.
    #
    def list_types_next(next_page_link, custom_headers = nil)
      response = list_types_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of types within the specified database and schema from
    # the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_types_next_with_http_info(next_page_link, custom_headers = nil)
      list_types_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of types within the specified database and schema from
    # the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_types_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTypeList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of table valued functions from the Data Lake Analytics
    # catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlTableValuedFunctionList] operation results.
    #
    def list_table_valued_functions_next(next_page_link, custom_headers = nil)
      response = list_table_valued_functions_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of table valued functions from the Data Lake Analytics
    # catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_table_valued_functions_next_with_http_info(next_page_link, custom_headers = nil)
      list_table_valued_functions_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of table valued functions from the Data Lake Analytics
    # catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_table_valued_functions_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlTableValuedFunctionList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of assemblies from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlAssemblyList] operation results.
    #
    def list_assemblies_next(next_page_link, custom_headers = nil)
      response = list_assemblies_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of assemblies from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_assemblies_next_with_http_info(next_page_link, custom_headers = nil)
      list_assemblies_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of assemblies from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_assemblies_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlAssemblyList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of schemas from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlSchemaList] operation results.
    #
    def list_schemas_next(next_page_link, custom_headers = nil)
      response = list_schemas_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of schemas from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_schemas_next_with_http_info(next_page_link, custom_headers = nil)
      list_schemas_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of schemas from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_schemas_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlSchemaList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the list of databases from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [USqlDatabaseList] operation results.
    #
    def list_databases_next(next_page_link, custom_headers = nil)
      response = list_databases_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the list of databases from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_databases_next_with_http_info(next_page_link, custom_headers = nil)
      list_databases_next_async(next_page_link, custom_headers).value!
    end

    #
    # Retrieves the list of databases from the Data Lake Analytics catalog.
    #
    # @param next_page_link [String] The NextLink from the previous successful
    # call to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_databases_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'
      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {})
      }

      request_url = @base_url || @client.base_url

      request = MsRest::HttpOperationRequest.new(request_url, path_template, :get, options)
      promise = request.run_promise do |req|
        @client.credentials.sign_request(req) unless @client.credentials.nil?
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(request, http_response, error_model)
        end

        # Create Result
        result = MsRestAzure::AzureOperationResponse.new(request, http_response)
        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = USqlDatabaseList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end
