# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Compute::Mgmt::V2018_01_01
  #
  # Jobs
  #
  class Jobs
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Jobs class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [DataBoxManagementClient] reference to the DataBoxManagementClient
    attr_reader :client

    #
    # Lists all the jobs available under the subscription.
    #
    # @param skip_token [String] $skipToken is supported on Get list of jobs, which
    # provides the next page in the list of jobs.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<JobResource>] operation results.
    #
    def list(skip_token = nil, custom_headers = nil)
      first_page = list_as_lazy(skip_token, custom_headers)
      first_page.get_all_items
    end

    #
    # Lists all the jobs available under the subscription.
    #
    # @param skip_token [String] $skipToken is supported on Get list of jobs, which
    # provides the next page in the list of jobs.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(skip_token = nil, custom_headers = nil)
      list_async(skip_token, custom_headers).value!
    end

    #
    # Lists all the jobs available under the subscription.
    #
    # @param skip_token [String] $skipToken is supported on Get list of jobs, which
    # provides the next page in the list of jobs.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(skip_token = nil, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.DataBox/jobs'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id},
          query_params: {'api-version' => @client.api_version,'$skipToken' => skip_token},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResourceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all the jobs available under the given resource group.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param skip_token [String] $skipToken is supported on Get list of jobs, which
    # provides the next page in the list of jobs.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<JobResource>] operation results.
    #
    def list_by_resource_group(resource_group_name, skip_token = nil, custom_headers = nil)
      first_page = list_by_resource_group_as_lazy(resource_group_name, skip_token, custom_headers)
      first_page.get_all_items
    end

    #
    # Lists all the jobs available under the given resource group.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param skip_token [String] $skipToken is supported on Get list of jobs, which
    # provides the next page in the list of jobs.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_resource_group_with_http_info(resource_group_name, skip_token = nil, custom_headers = nil)
      list_by_resource_group_async(resource_group_name, skip_token, custom_headers).value!
    end

    #
    # Lists all the jobs available under the given resource group.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param skip_token [String] $skipToken is supported on Get list of jobs, which
    # provides the next page in the list of jobs.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_resource_group_async(resource_group_name, skip_token = nil, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name},
          query_params: {'api-version' => @client.api_version,'$skipToken' => skip_token},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResourceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets information about the specified job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param expand [String] $expand is supported on details parameter for job,
    # which provides details on the job stages.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobResource] operation results.
    #
    def get(resource_group_name, job_name, expand = nil, custom_headers = nil)
      response = get_async(resource_group_name, job_name, expand, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets information about the specified job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param expand [String] $expand is supported on details parameter for job,
    # which provides details on the job stages.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(resource_group_name, job_name, expand = nil, custom_headers = nil)
      get_async(resource_group_name, job_name, expand, custom_headers).value!
    end

    #
    # Gets information about the specified job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param expand [String] $expand is supported on details parameter for job,
    # which provides details on the job stages.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(resource_group_name, job_name, expand = nil, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'job_name is nil' if job_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'jobName' => job_name},
          query_params: {'api-version' => @client.api_version,'$expand' => expand},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResource.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates a new job with the specified parameters. Existing job cannot be
    # updated with this API and should instead be updated with the Update job API.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param job_resource [JobResource] Job details from request body.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobResource] operation results.
    #
    def create(resource_group_name, job_name, job_resource, custom_headers = nil)
      response = create_async(resource_group_name, job_name, job_resource, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param job_resource [JobResource] Job details from request body.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def create_async(resource_group_name, job_name, job_resource, custom_headers = nil)
      # Send request
      promise = begin_create_async(resource_group_name, job_name, job_resource, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResource.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Deletes a job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete(resource_group_name, job_name, custom_headers = nil)
      response = delete_async(resource_group_name, job_name, custom_headers).value!
      nil
    end

    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async(resource_group_name, job_name, custom_headers = nil)
      # Send request
      promise = begin_delete_async(resource_group_name, job_name, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Updates the properties of an existing job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param job_resource_update_parameter [JobResourceUpdateParameter] Job update
    # parameters from request body.
    # @param if_match [String] Defines the If-Match condition. The patch will be
    # performed only if the ETag of the job on the server matches this value.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobResource] operation results.
    #
    def update(resource_group_name, job_name, job_resource_update_parameter, if_match = nil, custom_headers = nil)
      response = update_async(resource_group_name, job_name, job_resource_update_parameter, if_match, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param job_resource_update_parameter [JobResourceUpdateParameter] Job update
    # parameters from request body.
    # @param if_match [String] Defines the If-Match condition. The patch will be
    # performed only if the ETag of the job on the server matches this value.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def update_async(resource_group_name, job_name, job_resource_update_parameter, if_match = nil, custom_headers = nil)
      # Send request
      promise = begin_update_async(resource_group_name, job_name, job_resource_update_parameter, if_match, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResource.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Book shipment pick up.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param shipment_pick_up_request [ShipmentPickUpRequest] Details of shipment
    # pick up request.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ShipmentPickUpResponse] operation results.
    #
    def book_shipment_pick_up(resource_group_name, job_name, shipment_pick_up_request, custom_headers = nil)
      response = book_shipment_pick_up_async(resource_group_name, job_name, shipment_pick_up_request, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Book shipment pick up.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param shipment_pick_up_request [ShipmentPickUpRequest] Details of shipment
    # pick up request.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def book_shipment_pick_up_with_http_info(resource_group_name, job_name, shipment_pick_up_request, custom_headers = nil)
      book_shipment_pick_up_async(resource_group_name, job_name, shipment_pick_up_request, custom_headers).value!
    end

    #
    # Book shipment pick up.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param shipment_pick_up_request [ShipmentPickUpRequest] Details of shipment
    # pick up request.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def book_shipment_pick_up_async(resource_group_name, job_name, shipment_pick_up_request, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'job_name is nil' if job_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'shipment_pick_up_request is nil' if shipment_pick_up_request.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::ShipmentPickUpRequest.mapper()
      request_content = @client.serialize(request_mapper,  shipment_pick_up_request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/bookShipmentPickUp'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'jobName' => job_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::ShipmentPickUpResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # CancelJob.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param cancellation_reason [CancellationReason] Reason for cancellation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def cancel(resource_group_name, job_name, cancellation_reason, custom_headers = nil)
      response = cancel_async(resource_group_name, job_name, cancellation_reason, custom_headers).value!
      nil
    end

    #
    # CancelJob.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param cancellation_reason [CancellationReason] Reason for cancellation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def cancel_with_http_info(resource_group_name, job_name, cancellation_reason, custom_headers = nil)
      cancel_async(resource_group_name, job_name, cancellation_reason, custom_headers).value!
    end

    #
    # CancelJob.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param cancellation_reason [CancellationReason] Reason for cancellation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def cancel_async(resource_group_name, job_name, cancellation_reason, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'job_name is nil' if job_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'cancellation_reason is nil' if cancellation_reason.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::CancellationReason.mapper()
      request_content = @client.serialize(request_mapper,  cancellation_reason)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/cancel'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'jobName' => job_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # This method gets the unencrypted secrets related to the job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [UnencryptedCredentialsList] operation results.
    #
    def list_credentials(resource_group_name, job_name, custom_headers = nil)
      response = list_credentials_async(resource_group_name, job_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # This method gets the unencrypted secrets related to the job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_credentials_with_http_info(resource_group_name, job_name, custom_headers = nil)
      list_credentials_async(resource_group_name, job_name, custom_headers).value!
    end

    #
    # This method gets the unencrypted secrets related to the job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_credentials_async(resource_group_name, job_name, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'job_name is nil' if job_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/listCredentials'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'jobName' => job_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::UnencryptedCredentialsList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates a new job with the specified parameters. Existing job cannot be
    # updated with this API and should instead be updated with the Update job API.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param job_resource [JobResource] Job details from request body.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobResource] operation results.
    #
    def begin_create(resource_group_name, job_name, job_resource, custom_headers = nil)
      response = begin_create_async(resource_group_name, job_name, job_resource, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates a new job with the specified parameters. Existing job cannot be
    # updated with this API and should instead be updated with the Update job API.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param job_resource [JobResource] Job details from request body.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_create_with_http_info(resource_group_name, job_name, job_resource, custom_headers = nil)
      begin_create_async(resource_group_name, job_name, job_resource, custom_headers).value!
    end

    #
    # Creates a new job with the specified parameters. Existing job cannot be
    # updated with this API and should instead be updated with the Update job API.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param job_resource [JobResource] Job details from request body.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_create_async(resource_group_name, job_name, job_resource, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'job_name is nil' if job_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'job_resource is nil' if job_resource.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResource.mapper()
      request_content = @client.serialize(request_mapper,  job_resource)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'jobName' => job_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResource.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete(resource_group_name, job_name, custom_headers = nil)
      response = begin_delete_async(resource_group_name, job_name, custom_headers).value!
      nil
    end

    #
    # Deletes a job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_with_http_info(resource_group_name, job_name, custom_headers = nil)
      begin_delete_async(resource_group_name, job_name, custom_headers).value!
    end

    #
    # Deletes a job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async(resource_group_name, job_name, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'job_name is nil' if job_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'jobName' => job_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Updates the properties of an existing job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param job_resource_update_parameter [JobResourceUpdateParameter] Job update
    # parameters from request body.
    # @param if_match [String] Defines the If-Match condition. The patch will be
    # performed only if the ETag of the job on the server matches this value.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobResource] operation results.
    #
    def begin_update(resource_group_name, job_name, job_resource_update_parameter, if_match = nil, custom_headers = nil)
      response = begin_update_async(resource_group_name, job_name, job_resource_update_parameter, if_match, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates the properties of an existing job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param job_resource_update_parameter [JobResourceUpdateParameter] Job update
    # parameters from request body.
    # @param if_match [String] Defines the If-Match condition. The patch will be
    # performed only if the ETag of the job on the server matches this value.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_update_with_http_info(resource_group_name, job_name, job_resource_update_parameter, if_match = nil, custom_headers = nil)
      begin_update_async(resource_group_name, job_name, job_resource_update_parameter, if_match, custom_headers).value!
    end

    #
    # Updates the properties of an existing job.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param job_name [String] The name of the job Resource within the specified
    # resource group. job names must be between 3 and 24 characters in length and
    # use any alphanumeric and underscore only
    # @param job_resource_update_parameter [JobResourceUpdateParameter] Job update
    # parameters from request body.
    # @param if_match [String] Defines the If-Match condition. The patch will be
    # performed only if the ETag of the job on the server matches this value.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_update_async(resource_group_name, job_name, job_resource_update_parameter, if_match = nil, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'job_name is nil' if job_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'job_resource_update_parameter is nil' if job_resource_update_parameter.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResourceUpdateParameter.mapper()
      request_content = @client.serialize(request_mapper,  job_resource_update_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'jobName' => job_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResource.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all the jobs available under the subscription.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobResourceList] operation results.
    #
    def list_next(next_page_link, custom_headers = nil)
      response = list_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all the jobs available under the subscription.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers = nil)
      list_next_async(next_page_link, custom_headers).value!
    end

    #
    # Lists all the jobs available under the subscription.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResourceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all the jobs available under the given resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobResourceList] operation results.
    #
    def list_by_resource_group_next(next_page_link, custom_headers = nil)
      response = list_by_resource_group_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all the jobs available under the given resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_resource_group_next_with_http_info(next_page_link, custom_headers = nil)
      list_by_resource_group_next_async(next_page_link, custom_headers).value!
    end

    #
    # Lists all the jobs available under the given resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_resource_group_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Compute::Mgmt::V2018_01_01::Models::JobResourceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all the jobs available under the subscription.
    #
    # @param skip_token [String] $skipToken is supported on Get list of jobs, which
    # provides the next page in the list of jobs.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobResourceList] which provide lazy access to pages of the response.
    #
    def list_as_lazy(skip_token = nil, custom_headers = nil)
      response = list_async(skip_token, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

    #
    # Lists all the jobs available under the given resource group.
    #
    # @param resource_group_name [String] The Resource Group Name
    # @param skip_token [String] $skipToken is supported on Get list of jobs, which
    # provides the next page in the list of jobs.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JobResourceList] which provide lazy access to pages of the response.
    #
    def list_by_resource_group_as_lazy(resource_group_name, skip_token = nil, custom_headers = nil)
      response = list_by_resource_group_async(resource_group_name, skip_token, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_by_resource_group_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

  end
end
