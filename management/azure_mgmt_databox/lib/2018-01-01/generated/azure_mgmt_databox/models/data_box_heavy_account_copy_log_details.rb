# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Compute::Mgmt::V2018_01_01
  module Models
    #
    # Copy log details for a storage account for Databox heavy
    #
    class DataBoxHeavyAccountCopyLogDetails < CopyLogDetails

      include MsRestAzure


      def initialize
        @copyLogDetailsType = "DataBoxHeavy"
      end

      attr_accessor :copyLogDetailsType

      # @return [String] Destination account name.
      attr_accessor :account_name

      # @return [Array<String>] Link for copy logs.
      attr_accessor :copy_log_link


      #
      # Mapper for DataBoxHeavyAccountCopyLogDetails class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          required: false,
          serialized_name: 'DataBoxHeavy',
          type: {
            name: 'Composite',
            class_name: 'DataBoxHeavyAccountCopyLogDetails',
            model_properties: {
              copyLogDetailsType: {
                required: true,
                serialized_name: 'copyLogDetailsType',
                type: {
                  name: 'String'
                }
              },
              account_name: {
                required: false,
                read_only: true,
                serialized_name: 'accountName',
                type: {
                  name: 'String'
                }
              },
              copy_log_link: {
                required: false,
                read_only: true,
                serialized_name: 'copyLogLink',
                type: {
                  name: 'Sequence',
                  element: {
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              }
            }
          }
        }
      end
    end
  end
end
