# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::CustomerInsights::Mgmt::V2017_04_26
  module Models
    #
    # The connector resource format.
    #
    class ConnectorResourceFormat < ProxyResource

      include MsRestAzure

      include MsRest::JSONable
      # @return [Integer] ID of the connector.
      attr_accessor :connector_id

      # @return [String] Name of the connector.
      attr_accessor :connector_name

      # @return [ConnectorTypes] Type of connector. Possible values include:
      # 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline', 'Outbound'
      attr_accessor :connector_type

      # @return [String] Display name of the connector.
      attr_accessor :display_name

      # @return [String] Description of the connector.
      attr_accessor :description

      # @return The connector properties.
      attr_accessor :connector_properties

      # @return [DateTime] The created time.
      attr_accessor :created

      # @return [DateTime] The last monified time.
      attr_accessor :last_modified

      # @return [ConnectorStates] State of connector. Possible values include:
      # 'Creating', 'Created', 'Ready', 'Expiring', 'Deleting', 'Failed'
      attr_accessor :state

      # @return [String] The hub name.
      attr_accessor :tenant_id

      # @return [Boolean] If this is an internal connector.
      attr_accessor :is_internal


      #
      # Mapper for ConnectorResourceFormat class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'ConnectorResourceFormat',
          type: {
            name: 'Composite',
            class_name: 'ConnectorResourceFormat',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              },
              type: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'type',
                type: {
                  name: 'String'
                }
              },
              connector_id: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.connectorId',
                type: {
                  name: 'Number'
                }
              },
              connector_name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.connectorName',
                type: {
                  name: 'String'
                }
              },
              connector_type: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.connectorType',
                type: {
                  name: 'String'
                }
              },
              display_name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.displayName',
                type: {
                  name: 'String'
                }
              },
              description: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.description',
                type: {
                  name: 'String'
                }
              },
              connector_properties: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.connectorProperties',
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              created: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.created',
                type: {
                  name: 'DateTime'
                }
              },
              last_modified: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.lastModified',
                type: {
                  name: 'DateTime'
                }
              },
              state: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.state',
                type: {
                  name: 'Enum',
                  module: 'ConnectorStates'
                }
              },
              tenant_id: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.tenantId',
                type: {
                  name: 'String'
                }
              },
              is_internal: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.isInternal',
                type: {
                  name: 'Boolean'
                }
              }
            }
          }
        }
      end
    end
  end
end
