# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::EventGrid::Mgmt::V2020_04_01_preview
  #
  # Azure EventGrid Management Client
  #
  class SystemTopicEventSubscriptions
    include MsRestAzure

    #
    # Creates and initializes a new instance of the SystemTopicEventSubscriptions class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [EventGridManagementClient] reference to the EventGridManagementClient
    attr_reader :client

    #
    # Get an event subscription of a system topic.
    #
    # Get an event subscription.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventSubscription] operation results.
    #
    def get(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      response = get_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get an event subscription of a system topic.
    #
    # Get an event subscription.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      get_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:custom_headers).value!
    end

    #
    # Get an event subscription of a system topic.
    #
    # Get an event subscription.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'system_topic_name is nil' if system_topic_name.nil?
      fail ArgumentError, 'event_subscription_name is nil' if event_subscription_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'systemTopicName' => system_topic_name,'eventSubscriptionName' => event_subscription_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::EventGrid::Mgmt::V2020_04_01_preview::Models::EventSubscription.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create or update an event subscription for a system topic.
    #
    # Asynchronously creates or updates an event subscription with the specified
    # parameters. Existing event subscriptions will be updated with this API.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param event_subscription_info [EventSubscription] Event subscription
    # properties containing the destination and filter information.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventSubscription] operation results.
    #
    def create_or_update(resource_group_name, system_topic_name, event_subscription_name, event_subscription_info, custom_headers:nil)
      response = create_or_update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_info, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param event_subscription_info [EventSubscription] Event subscription
    # properties containing the destination and filter information.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def create_or_update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_info, custom_headers:nil)
      # Send request
      promise = begin_create_or_update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_info, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::EventGrid::Mgmt::V2020_04_01_preview::Models::EventSubscription.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Delete an event subscription of a system topic.
    #
    # Delete an event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      response = delete_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:custom_headers).value!
      nil
    end

    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      # Send request
      promise = begin_delete_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Update event subscription of a system topic.
    #
    # Update event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param event_subscription_update_parameters
    # [EventSubscriptionUpdateParameters] Updated event subscription information.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventSubscription] operation results.
    #
    def update(resource_group_name, system_topic_name, event_subscription_name, event_subscription_update_parameters, custom_headers:nil)
      response = update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_update_parameters, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param event_subscription_update_parameters
    # [EventSubscriptionUpdateParameters] Updated event subscription information.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_update_parameters, custom_headers:nil)
      # Send request
      promise = begin_update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_update_parameters, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::EventGrid::Mgmt::V2020_04_01_preview::Models::EventSubscription.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Get full URL of an event subscription of a system topic
    #
    # Get the full endpoint URL for an event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventSubscriptionFullUrl] operation results.
    #
    def get_full_url(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      response = get_full_url_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get full URL of an event subscription of a system topic
    #
    # Get the full endpoint URL for an event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_full_url_with_http_info(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      get_full_url_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:custom_headers).value!
    end

    #
    # Get full URL of an event subscription of a system topic
    #
    # Get the full endpoint URL for an event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_full_url_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'system_topic_name is nil' if system_topic_name.nil?
      fail ArgumentError, 'event_subscription_name is nil' if event_subscription_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}/getFullUrl'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'systemTopicName' => system_topic_name,'eventSubscriptionName' => event_subscription_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::EventGrid::Mgmt::V2020_04_01_preview::Models::EventSubscriptionFullUrl.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # List event subscriptions of a system topic.
    #
    # List event subscriptions that belong to a specific system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventSubscriptionsListResult] operation results.
    #
    def list_by_system_topic(resource_group_name, system_topic_name, custom_headers:nil)
      response = list_by_system_topic_async(resource_group_name, system_topic_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # List event subscriptions of a system topic.
    #
    # List event subscriptions that belong to a specific system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_system_topic_with_http_info(resource_group_name, system_topic_name, custom_headers:nil)
      list_by_system_topic_async(resource_group_name, system_topic_name, custom_headers:custom_headers).value!
    end

    #
    # List event subscriptions of a system topic.
    #
    # List event subscriptions that belong to a specific system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_system_topic_async(resource_group_name, system_topic_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'system_topic_name is nil' if system_topic_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'systemTopicName' => system_topic_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::EventGrid::Mgmt::V2020_04_01_preview::Models::EventSubscriptionsListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create or update an event subscription for a system topic.
    #
    # Asynchronously creates or updates an event subscription with the specified
    # parameters. Existing event subscriptions will be updated with this API.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param event_subscription_info [EventSubscription] Event subscription
    # properties containing the destination and filter information.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventSubscription] operation results.
    #
    def begin_create_or_update(resource_group_name, system_topic_name, event_subscription_name, event_subscription_info, custom_headers:nil)
      response = begin_create_or_update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_info, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create or update an event subscription for a system topic.
    #
    # Asynchronously creates or updates an event subscription with the specified
    # parameters. Existing event subscriptions will be updated with this API.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param event_subscription_info [EventSubscription] Event subscription
    # properties containing the destination and filter information.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_create_or_update_with_http_info(resource_group_name, system_topic_name, event_subscription_name, event_subscription_info, custom_headers:nil)
      begin_create_or_update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_info, custom_headers:custom_headers).value!
    end

    #
    # Create or update an event subscription for a system topic.
    #
    # Asynchronously creates or updates an event subscription with the specified
    # parameters. Existing event subscriptions will be updated with this API.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param event_subscription_info [EventSubscription] Event subscription
    # properties containing the destination and filter information.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_create_or_update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_info, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'system_topic_name is nil' if system_topic_name.nil?
      fail ArgumentError, 'event_subscription_name is nil' if event_subscription_name.nil?
      fail ArgumentError, 'event_subscription_info is nil' if event_subscription_info.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::EventGrid::Mgmt::V2020_04_01_preview::Models::EventSubscription.mapper()
      request_content = @client.serialize(request_mapper,  event_subscription_info)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'systemTopicName' => system_topic_name,'eventSubscriptionName' => event_subscription_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::EventGrid::Mgmt::V2020_04_01_preview::Models::EventSubscription.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete an event subscription of a system topic.
    #
    # Delete an event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      response = begin_delete_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:custom_headers).value!
      nil
    end

    #
    # Delete an event subscription of a system topic.
    #
    # Delete an event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_with_http_info(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      begin_delete_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:custom_headers).value!
    end

    #
    # Delete an event subscription of a system topic.
    #
    # Delete an event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async(resource_group_name, system_topic_name, event_subscription_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'system_topic_name is nil' if system_topic_name.nil?
      fail ArgumentError, 'event_subscription_name is nil' if event_subscription_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'systemTopicName' => system_topic_name,'eventSubscriptionName' => event_subscription_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Update event subscription of a system topic.
    #
    # Update event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param event_subscription_update_parameters
    # [EventSubscriptionUpdateParameters] Updated event subscription information.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventSubscription] operation results.
    #
    def begin_update(resource_group_name, system_topic_name, event_subscription_name, event_subscription_update_parameters, custom_headers:nil)
      response = begin_update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_update_parameters, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update event subscription of a system topic.
    #
    # Update event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param event_subscription_update_parameters
    # [EventSubscriptionUpdateParameters] Updated event subscription information.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_update_with_http_info(resource_group_name, system_topic_name, event_subscription_name, event_subscription_update_parameters, custom_headers:nil)
      begin_update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_update_parameters, custom_headers:custom_headers).value!
    end

    #
    # Update event subscription of a system topic.
    #
    # Update event subscription of a system topic.
    #
    # @param resource_group_name [String] The name of the resource group within the
    # user's subscription.
    # @param system_topic_name [String] Name of the system topic.
    # @param event_subscription_name [String] Name of the event subscription to be
    # created. Event subscription names must be between 3 and 100 characters in
    # length and use alphanumeric letters only.
    # @param event_subscription_update_parameters
    # [EventSubscriptionUpdateParameters] Updated event subscription information.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_update_async(resource_group_name, system_topic_name, event_subscription_name, event_subscription_update_parameters, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'system_topic_name is nil' if system_topic_name.nil?
      fail ArgumentError, 'event_subscription_name is nil' if event_subscription_name.nil?
      fail ArgumentError, 'event_subscription_update_parameters is nil' if event_subscription_update_parameters.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::EventGrid::Mgmt::V2020_04_01_preview::Models::EventSubscriptionUpdateParameters.mapper()
      request_content = @client.serialize(request_mapper,  event_subscription_update_parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'systemTopicName' => system_topic_name,'eventSubscriptionName' => event_subscription_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::EventGrid::Mgmt::V2020_04_01_preview::Models::EventSubscription.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end
