# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ResourcesManagement::Mgmt::V2018_03_01_preview
  #
  # The Azure Management Groups API enables consolidation of multiple
  # subscriptions/resources into an organizational hierarchy and centrally
  # manage access control, policies, alerting and reporting for those
  # resources.
  #
  class Entities
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Entities class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [ManagementGroupsAPI] reference to the ManagementGroupsAPI
    attr_reader :client

    #
    # List all entities (Management Groups, Subscriptions, etc.) for the
    # authenticated user.
    #
    # @param skiptoken [String] Page continuation token is only used if a previous
    # operation returned a partial result. If a previous response contains a
    # nextLink element, the value of the nextLink element will include a token
    # parameter that specifies a starting point to use for subsequent calls.
    # @param skip [Integer] Number of entities to skip over when retrieving
    # results. Passing this in will override $skipToken.
    # @param top [Integer] Number of elements to return when retrieving results.
    # Passing this in will override $skipToken.
    # @param select [String] This parameter specifies the fields to include in the
    # response. Can include any combination of
    # Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g.
    # '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When
    # specified the $select parameter can override select in $skipToken.
    # @param search [Enum] The $search parameter is used in conjunction with the
    # $filter parameter to return three different outputs depending on the
    # parameter passed in. With $search=AllowedParents the API will return the
    # entity info of all groups that the requested entity will be able to reparent
    # to as determined by the user's permissions. With $search=AllowedChildren the
    # API will return the entity info of all entities that can be added as children
    # of the requested entity. With $search=ParentAndFirstLevelChildren the API
    # will return the parent and  first level of children that the user has either
    # direct access to or indirect access via one of their descendants. Possible
    # values include: 'AllowedParents', 'AllowedChildren',
    # 'ParentAndFirstLevelChildren', 'ParentOnly', 'ChildrenOnly'
    # @param filter [String] The filter parameter allows you to filter on the the
    # name or display name fields. You can check for equality on the name field
    # (e.g. name eq '{entityName}')  and you can check for substrings on either the
    # name or display name fields(e.g. contains(name, '{substringToSearch}'),
    # contains(displayName, '{substringToSearch')). Note that the '{entityName}'
    # and '{substringToSearch}' fields are checked case insensitively.
    # @param view [Enum] The view parameter allows clients to filter the type of
    # data that is returned by the getEntities call. Possible values include:
    # 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
    # @param group_name [String] A filter which allows the get entities call to
    # focus on a particular group (i.e. "$filter=name eq 'groupName'")
    # @param cache_control [String] Indicates that the request shouldn't utilize
    # any caches.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<EntityInfo>] operation results.
    #
    def list(skiptoken:nil, skip:nil, top:nil, select:nil, search:nil, filter:nil, view:nil, group_name:nil, cache_control:'no-cache', custom_headers:nil)
      first_page = list_as_lazy(skiptoken:skiptoken, skip:skip, top:top, select:select, search:search, filter:filter, view:view, group_name:group_name, cache_control:cache_control, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # List all entities (Management Groups, Subscriptions, etc.) for the
    # authenticated user.
    #
    # @param skiptoken [String] Page continuation token is only used if a previous
    # operation returned a partial result. If a previous response contains a
    # nextLink element, the value of the nextLink element will include a token
    # parameter that specifies a starting point to use for subsequent calls.
    # @param skip [Integer] Number of entities to skip over when retrieving
    # results. Passing this in will override $skipToken.
    # @param top [Integer] Number of elements to return when retrieving results.
    # Passing this in will override $skipToken.
    # @param select [String] This parameter specifies the fields to include in the
    # response. Can include any combination of
    # Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g.
    # '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When
    # specified the $select parameter can override select in $skipToken.
    # @param search [Enum] The $search parameter is used in conjunction with the
    # $filter parameter to return three different outputs depending on the
    # parameter passed in. With $search=AllowedParents the API will return the
    # entity info of all groups that the requested entity will be able to reparent
    # to as determined by the user's permissions. With $search=AllowedChildren the
    # API will return the entity info of all entities that can be added as children
    # of the requested entity. With $search=ParentAndFirstLevelChildren the API
    # will return the parent and  first level of children that the user has either
    # direct access to or indirect access via one of their descendants. Possible
    # values include: 'AllowedParents', 'AllowedChildren',
    # 'ParentAndFirstLevelChildren', 'ParentOnly', 'ChildrenOnly'
    # @param filter [String] The filter parameter allows you to filter on the the
    # name or display name fields. You can check for equality on the name field
    # (e.g. name eq '{entityName}')  and you can check for substrings on either the
    # name or display name fields(e.g. contains(name, '{substringToSearch}'),
    # contains(displayName, '{substringToSearch')). Note that the '{entityName}'
    # and '{substringToSearch}' fields are checked case insensitively.
    # @param view [Enum] The view parameter allows clients to filter the type of
    # data that is returned by the getEntities call. Possible values include:
    # 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
    # @param group_name [String] A filter which allows the get entities call to
    # focus on a particular group (i.e. "$filter=name eq 'groupName'")
    # @param cache_control [String] Indicates that the request shouldn't utilize
    # any caches.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(skiptoken:nil, skip:nil, top:nil, select:nil, search:nil, filter:nil, view:nil, group_name:nil, cache_control:'no-cache', custom_headers:nil)
      list_async(skiptoken:skiptoken, skip:skip, top:top, select:select, search:search, filter:filter, view:view, group_name:group_name, cache_control:cache_control, custom_headers:custom_headers).value!
    end

    #
    # List all entities (Management Groups, Subscriptions, etc.) for the
    # authenticated user.
    #
    # @param skiptoken [String] Page continuation token is only used if a previous
    # operation returned a partial result. If a previous response contains a
    # nextLink element, the value of the nextLink element will include a token
    # parameter that specifies a starting point to use for subsequent calls.
    # @param skip [Integer] Number of entities to skip over when retrieving
    # results. Passing this in will override $skipToken.
    # @param top [Integer] Number of elements to return when retrieving results.
    # Passing this in will override $skipToken.
    # @param select [String] This parameter specifies the fields to include in the
    # response. Can include any combination of
    # Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g.
    # '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When
    # specified the $select parameter can override select in $skipToken.
    # @param search [Enum] The $search parameter is used in conjunction with the
    # $filter parameter to return three different outputs depending on the
    # parameter passed in. With $search=AllowedParents the API will return the
    # entity info of all groups that the requested entity will be able to reparent
    # to as determined by the user's permissions. With $search=AllowedChildren the
    # API will return the entity info of all entities that can be added as children
    # of the requested entity. With $search=ParentAndFirstLevelChildren the API
    # will return the parent and  first level of children that the user has either
    # direct access to or indirect access via one of their descendants. Possible
    # values include: 'AllowedParents', 'AllowedChildren',
    # 'ParentAndFirstLevelChildren', 'ParentOnly', 'ChildrenOnly'
    # @param filter [String] The filter parameter allows you to filter on the the
    # name or display name fields. You can check for equality on the name field
    # (e.g. name eq '{entityName}')  and you can check for substrings on either the
    # name or display name fields(e.g. contains(name, '{substringToSearch}'),
    # contains(displayName, '{substringToSearch')). Note that the '{entityName}'
    # and '{substringToSearch}' fields are checked case insensitively.
    # @param view [Enum] The view parameter allows clients to filter the type of
    # data that is returned by the getEntities call. Possible values include:
    # 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
    # @param group_name [String] A filter which allows the get entities call to
    # focus on a particular group (i.e. "$filter=name eq 'groupName'")
    # @param cache_control [String] Indicates that the request shouldn't utilize
    # any caches.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(skiptoken:nil, skip:nil, top:nil, select:nil, search:nil, filter:nil, view:nil, group_name:nil, cache_control:'no-cache', custom_headers:nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['Cache-Control'] = cache_control unless cache_control.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'providers/Microsoft.Management/getEntities'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'api-version' => @client.api_version,'$skiptoken' => skiptoken,'$skip' => skip,'$top' => top,'$select' => select,'$search' => search,'$filter' => filter,'$view' => view,'groupName' => group_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ResourcesManagement::Mgmt::V2018_03_01_preview::Models::EntityListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # List all entities (Management Groups, Subscriptions, etc.) for the
    # authenticated user.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param cache_control [String] Indicates that the request shouldn't utilize
    # any caches.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EntityListResult] operation results.
    #
    def list_next(next_page_link, cache_control:'no-cache', custom_headers:nil)
      response = list_next_async(next_page_link, cache_control:cache_control, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # List all entities (Management Groups, Subscriptions, etc.) for the
    # authenticated user.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param cache_control [String] Indicates that the request shouldn't utilize
    # any caches.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, cache_control:'no-cache', custom_headers:nil)
      list_next_async(next_page_link, cache_control:cache_control, custom_headers:custom_headers).value!
    end

    #
    # List all entities (Management Groups, Subscriptions, etc.) for the
    # authenticated user.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param cache_control [String] Indicates that the request shouldn't utilize
    # any caches.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, cache_control:'no-cache', custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['Cache-Control'] = cache_control unless cache_control.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ResourcesManagement::Mgmt::V2018_03_01_preview::Models::EntityListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # List all entities (Management Groups, Subscriptions, etc.) for the
    # authenticated user.
    #
    # @param skiptoken [String] Page continuation token is only used if a previous
    # operation returned a partial result. If a previous response contains a
    # nextLink element, the value of the nextLink element will include a token
    # parameter that specifies a starting point to use for subsequent calls.
    # @param skip [Integer] Number of entities to skip over when retrieving
    # results. Passing this in will override $skipToken.
    # @param top [Integer] Number of elements to return when retrieving results.
    # Passing this in will override $skipToken.
    # @param select [String] This parameter specifies the fields to include in the
    # response. Can include any combination of
    # Name,DisplayName,Type,ParentDisplayNameChain,ParentChain, e.g.
    # '$select=Name,DisplayName,Type,ParentDisplayNameChain,ParentNameChain'. When
    # specified the $select parameter can override select in $skipToken.
    # @param search [Enum] The $search parameter is used in conjunction with the
    # $filter parameter to return three different outputs depending on the
    # parameter passed in. With $search=AllowedParents the API will return the
    # entity info of all groups that the requested entity will be able to reparent
    # to as determined by the user's permissions. With $search=AllowedChildren the
    # API will return the entity info of all entities that can be added as children
    # of the requested entity. With $search=ParentAndFirstLevelChildren the API
    # will return the parent and  first level of children that the user has either
    # direct access to or indirect access via one of their descendants. Possible
    # values include: 'AllowedParents', 'AllowedChildren',
    # 'ParentAndFirstLevelChildren', 'ParentOnly', 'ChildrenOnly'
    # @param filter [String] The filter parameter allows you to filter on the the
    # name or display name fields. You can check for equality on the name field
    # (e.g. name eq '{entityName}')  and you can check for substrings on either the
    # name or display name fields(e.g. contains(name, '{substringToSearch}'),
    # contains(displayName, '{substringToSearch')). Note that the '{entityName}'
    # and '{substringToSearch}' fields are checked case insensitively.
    # @param view [Enum] The view parameter allows clients to filter the type of
    # data that is returned by the getEntities call. Possible values include:
    # 'FullHierarchy', 'GroupsOnly', 'SubscriptionsOnly', 'Audit'
    # @param group_name [String] A filter which allows the get entities call to
    # focus on a particular group (i.e. "$filter=name eq 'groupName'")
    # @param cache_control [String] Indicates that the request shouldn't utilize
    # any caches.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EntityListResult] which provide lazy access to pages of the
    # response.
    #
    def list_as_lazy(skiptoken:nil, skip:nil, top:nil, select:nil, search:nil, filter:nil, view:nil, group_name:nil, cache_control:'no-cache', custom_headers:nil)
      response = list_async(skiptoken:skiptoken, skip:skip, top:top, select:select, search:search, filter:filter, view:view, group_name:group_name, cache_control:cache_control, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, cache_control:cache_control, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
