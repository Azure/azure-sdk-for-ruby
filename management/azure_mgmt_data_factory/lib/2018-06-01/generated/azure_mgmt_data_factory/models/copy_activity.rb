# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataFactory::Mgmt::V2018_06_01
  module Models
    #
    # Copy activity.
    #
    class CopyActivity < ExecutionActivity

      include MsRestAzure


      def initialize
        @type = "Copy"
      end

      attr_accessor :type

      # @return [CopySource] Copy activity source.
      attr_accessor :source

      # @return [CopySink] Copy activity sink.
      attr_accessor :sink

      # @return Copy activity translator. If not specified, tabular translator
      # is used.
      attr_accessor :translator

      # @return Specifies whether to copy data via an interim staging. Default
      # value is false. Type: boolean (or Expression with resultType boolean).
      attr_accessor :enable_staging

      # @return [StagingSettings] Specifies interim staging settings when
      # EnableStaging is true.
      attr_accessor :staging_settings

      # @return Maximum number of concurrent sessions opened on the source or
      # sink to avoid overloading the data store. Type: integer (or Expression
      # with resultType integer), minimum: 0.
      attr_accessor :parallel_copies

      # @return Maximum number of data integration units that can be used to
      # perform this data movement. Type: integer (or Expression with
      # resultType integer), minimum: 0.
      attr_accessor :data_integration_units

      # @return Whether to skip incompatible row. Default value is false. Type:
      # boolean (or Expression with resultType boolean).
      attr_accessor :enable_skip_incompatible_row

      # @return [RedirectIncompatibleRowSettings] Redirect incompatible row
      # settings when EnableSkipIncompatibleRow is true.
      attr_accessor :redirect_incompatible_row_settings

      # @return [LogStorageSettings] Log storage settings customer need to
      # provide when enabling session log.
      attr_accessor :log_storage_settings

      # @return Preserve Rules.
      attr_accessor :preserve_rules

      # @return Preserve rules.
      attr_accessor :preserve

      # @return Whether to enable Data Consistency validation. Type: boolean
      # (or Expression with resultType boolean).
      attr_accessor :validate_data_consistency

      # @return [SkipErrorFile] Specify the fault tolerance for data
      # consistency.
      attr_accessor :skip_error_file

      # @return [Array<DatasetReference>] List of inputs for the activity.
      attr_accessor :inputs

      # @return [Array<DatasetReference>] List of outputs for the activity.
      attr_accessor :outputs


      #
      # Mapper for CopyActivity class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'Copy',
          type: {
            name: 'Composite',
            class_name: 'CopyActivity',
            model_properties: {
              additional_properties: {
                client_side_validation: true,
                required: false,
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              name: {
                client_side_validation: true,
                required: true,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              },
              description: {
                client_side_validation: true,
                required: false,
                serialized_name: 'description',
                type: {
                  name: 'String'
                }
              },
              depends_on: {
                client_side_validation: true,
                required: false,
                serialized_name: 'dependsOn',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ActivityDependencyElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ActivityDependency'
                      }
                  }
                }
              },
              user_properties: {
                client_side_validation: true,
                required: false,
                serialized_name: 'userProperties',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'UserPropertyElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'UserProperty'
                      }
                  }
                }
              },
              type: {
                client_side_validation: true,
                required: true,
                serialized_name: 'type',
                type: {
                  name: 'String'
                }
              },
              linked_service_name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'linkedServiceName',
                type: {
                  name: 'Composite',
                  class_name: 'LinkedServiceReference'
                }
              },
              policy: {
                client_side_validation: true,
                required: false,
                serialized_name: 'policy',
                type: {
                  name: 'Composite',
                  class_name: 'ActivityPolicy'
                }
              },
              source: {
                client_side_validation: true,
                required: true,
                serialized_name: 'typeProperties.source',
                type: {
                  name: 'Composite',
                  polymorphic_discriminator: 'type',
                  uber_parent: 'CopySource',
                  class_name: 'CopySource'
                }
              },
              sink: {
                client_side_validation: true,
                required: true,
                serialized_name: 'typeProperties.sink',
                type: {
                  name: 'Composite',
                  polymorphic_discriminator: 'type',
                  uber_parent: 'CopySink',
                  class_name: 'CopySink'
                }
              },
              translator: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.translator',
                type: {
                  name: 'Object'
                }
              },
              enable_staging: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.enableStaging',
                type: {
                  name: 'Object'
                }
              },
              staging_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.stagingSettings',
                type: {
                  name: 'Composite',
                  class_name: 'StagingSettings'
                }
              },
              parallel_copies: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.parallelCopies',
                type: {
                  name: 'Object'
                }
              },
              data_integration_units: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.dataIntegrationUnits',
                type: {
                  name: 'Object'
                }
              },
              enable_skip_incompatible_row: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.enableSkipIncompatibleRow',
                type: {
                  name: 'Object'
                }
              },
              redirect_incompatible_row_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.redirectIncompatibleRowSettings',
                type: {
                  name: 'Composite',
                  class_name: 'RedirectIncompatibleRowSettings'
                }
              },
              log_storage_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.logStorageSettings',
                type: {
                  name: 'Composite',
                  class_name: 'LogStorageSettings'
                }
              },
              preserve_rules: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.preserveRules',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              preserve: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.preserve',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              validate_data_consistency: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.validateDataConsistency',
                type: {
                  name: 'Object'
                }
              },
              skip_error_file: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.skipErrorFile',
                type: {
                  name: 'Composite',
                  class_name: 'SkipErrorFile'
                }
              },
              inputs: {
                client_side_validation: true,
                required: false,
                serialized_name: 'inputs',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'DatasetReferenceElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'DatasetReference'
                      }
                  }
                }
              },
              outputs: {
                client_side_validation: true,
                required: false,
                serialized_name: 'outputs',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'DatasetReferenceElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'DatasetReference'
                      }
                  }
                }
              }
            }
          }
        }
      end
    end
  end
end
