# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataShare::Mgmt::V2019_11_01
  module Models
    #
    # A share subscription data transfer object.
    #
    class ShareSubscription < ProxyDto

      include MsRestAzure

      # @return [DateTime] Time at which the share subscription was created.
      attr_accessor :created_at

      # @return [String] The invitation id.
      attr_accessor :invitation_id

      # @return [String] Email of the provider who created the resource
      attr_accessor :provider_email

      # @return [String] Name of the provider who created the resource
      attr_accessor :provider_name

      # @return [String] Tenant name of the provider who created the resource
      attr_accessor :provider_tenant_name

      # @return [ProvisioningState] Provisioning state of the share
      # subscription. Possible values include: 'Succeeded', 'Creating',
      # 'Deleting', 'Moving', 'Failed'
      attr_accessor :provisioning_state

      # @return [String] Description of share
      attr_accessor :share_description

      # @return [ShareKind] Kind of share. Possible values include:
      # 'CopyBased', 'InPlace'
      attr_accessor :share_kind

      # @return [String] Name of the share
      attr_accessor :share_name

      # @return [ShareSubscriptionStatus] Gets the current status of share
      # subscription. Possible values include: 'Active', 'Revoked',
      # 'SourceDeleted', 'Revoking'
      attr_accessor :share_subscription_status

      # @return [String] Terms of a share
      attr_accessor :share_terms

      # @return [String] Source share location.
      attr_accessor :source_share_location

      # @return [String] Email of the user who created the resource
      attr_accessor :user_email

      # @return [String] Name of the user who created the resource
      attr_accessor :user_name


      #
      # Mapper for ShareSubscription class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'ShareSubscription',
          type: {
            name: 'Composite',
            class_name: 'ShareSubscription',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              },
              type: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'type',
                type: {
                  name: 'String'
                }
              },
              created_at: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.createdAt',
                type: {
                  name: 'DateTime'
                }
              },
              invitation_id: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.invitationId',
                type: {
                  name: 'String'
                }
              },
              provider_email: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.providerEmail',
                type: {
                  name: 'String'
                }
              },
              provider_name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.providerName',
                type: {
                  name: 'String'
                }
              },
              provider_tenant_name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.providerTenantName',
                type: {
                  name: 'String'
                }
              },
              provisioning_state: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.provisioningState',
                type: {
                  name: 'String'
                }
              },
              share_description: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.shareDescription',
                type: {
                  name: 'String'
                }
              },
              share_kind: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.shareKind',
                type: {
                  name: 'String'
                }
              },
              share_name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.shareName',
                type: {
                  name: 'String'
                }
              },
              share_subscription_status: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.shareSubscriptionStatus',
                type: {
                  name: 'String'
                }
              },
              share_terms: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.shareTerms',
                type: {
                  name: 'String'
                }
              },
              source_share_location: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.sourceShareLocation',
                type: {
                  name: 'String'
                }
              },
              user_email: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.userEmail',
                type: {
                  name: 'String'
                }
              },
              user_name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.userName',
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
