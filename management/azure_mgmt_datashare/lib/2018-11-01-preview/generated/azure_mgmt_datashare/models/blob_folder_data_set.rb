# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataShare::Mgmt::V2018_11_01_preview
  module Models
    #
    # An Azure storage blob folder dataset.
    #
    class BlobFolderDataSet < DataSet

      include MsRestAzure


      def initialize
        @kind = "BlobFolder"
      end

      attr_accessor :kind

      # @return [String] Container that has the file path.
      attr_accessor :container_name

      # @return [String] Unique id for identifying a data set resource
      attr_accessor :data_set_id

      # @return [String] Prefix for blob folder
      attr_accessor :prefix

      # @return [String] Resource group of storage account
      attr_accessor :resource_group

      # @return [String] Storage account name of the source data set
      attr_accessor :storage_account_name

      # @return [String] Subscription id of storage account
      attr_accessor :subscription_id


      #
      # Mapper for BlobFolderDataSet class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'BlobFolder',
          type: {
            name: 'Composite',
            class_name: 'BlobFolderDataSet',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              },
              type: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'type',
                type: {
                  name: 'String'
                }
              },
              kind: {
                client_side_validation: true,
                required: true,
                serialized_name: 'kind',
                type: {
                  name: 'String'
                }
              },
              container_name: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.containerName',
                type: {
                  name: 'String'
                }
              },
              data_set_id: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.dataSetId',
                type: {
                  name: 'String'
                }
              },
              prefix: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.prefix',
                type: {
                  name: 'String'
                }
              },
              resource_group: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.resourceGroup',
                type: {
                  name: 'String'
                }
              },
              storage_account_name: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.storageAccountName',
                type: {
                  name: 'String'
                }
              },
              subscription_id: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.subscriptionId',
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
