# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataShare::Mgmt::V2018_11_01_preview
  #
  # Creates a Microsoft.DataShare management client.
  #
  class SynchronizationSettings
    include MsRestAzure

    #
    # Creates and initializes a new instance of the SynchronizationSettings class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [DataShareManagementClient] reference to the DataShareManagementClient
    attr_reader :client

    #
    # Get synchronizationSetting in a share.
    #
    # Get a synchronizationSetting in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SynchronizationSetting] operation results.
    #
    def get(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:nil)
      response = get_async(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get synchronizationSetting in a share.
    #
    # Get a synchronizationSetting in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:nil)
      get_async(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:custom_headers).value!
    end

    #
    # Get synchronizationSetting in a share.
    #
    # Get a synchronizationSetting in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, 'share_name is nil' if share_name.nil?
      fail ArgumentError, 'synchronization_setting_name is nil' if synchronization_setting_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'accountName' => account_name,'shareName' => share_name,'synchronizationSettingName' => synchronization_setting_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataShare::Mgmt::V2018_11_01_preview::Models::SynchronizationSetting.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a new synchronization setting to an existing share or updates it if
    # existing.
    #
    # Create or update a synchronizationSetting
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share to add the synchronization
    # setting to.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting.
    # @param synchronization_setting [SynchronizationSetting] The new
    # synchronization setting information.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SynchronizationSetting] operation results.
    #
    def create(resource_group_name, account_name, share_name, synchronization_setting_name, synchronization_setting, custom_headers:nil)
      response = create_async(resource_group_name, account_name, share_name, synchronization_setting_name, synchronization_setting, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a new synchronization setting to an existing share or updates it if
    # existing.
    #
    # Create or update a synchronizationSetting
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share to add the synchronization
    # setting to.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting.
    # @param synchronization_setting [SynchronizationSetting] The new
    # synchronization setting information.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_with_http_info(resource_group_name, account_name, share_name, synchronization_setting_name, synchronization_setting, custom_headers:nil)
      create_async(resource_group_name, account_name, share_name, synchronization_setting_name, synchronization_setting, custom_headers:custom_headers).value!
    end

    #
    # Adds a new synchronization setting to an existing share or updates it if
    # existing.
    #
    # Create or update a synchronizationSetting
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share to add the synchronization
    # setting to.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting.
    # @param synchronization_setting [SynchronizationSetting] The new
    # synchronization setting information.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_async(resource_group_name, account_name, share_name, synchronization_setting_name, synchronization_setting, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, 'share_name is nil' if share_name.nil?
      fail ArgumentError, 'synchronization_setting_name is nil' if synchronization_setting_name.nil?
      fail ArgumentError, 'synchronization_setting is nil' if synchronization_setting.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::DataShare::Mgmt::V2018_11_01_preview::Models::SynchronizationSetting.mapper()
      request_content = @client.serialize(request_mapper,  synchronization_setting)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'accountName' => account_name,'shareName' => share_name,'synchronizationSettingName' => synchronization_setting_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201 || status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataShare::Mgmt::V2018_11_01_preview::Models::SynchronizationSetting.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataShare::Mgmt::V2018_11_01_preview::Models::SynchronizationSetting.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete synchronizationSetting in a share.
    #
    # Delete a synchronizationSetting in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting .
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationResponse] operation results.
    #
    def delete(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:nil)
      response = delete_async(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting .
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:nil)
      # Send request
      promise = begin_delete_async(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::DataShare::Mgmt::V2018_11_01_preview::Models::OperationResponse.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # List synchronizationSettings in a share.
    #
    # List synchronizationSettings in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param skip_token [String] continuation token
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<SynchronizationSetting>] operation results.
    #
    def list_by_share(resource_group_name, account_name, share_name, skip_token:nil, custom_headers:nil)
      first_page = list_by_share_as_lazy(resource_group_name, account_name, share_name, skip_token:skip_token, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # List synchronizationSettings in a share.
    #
    # List synchronizationSettings in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param skip_token [String] continuation token
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_share_with_http_info(resource_group_name, account_name, share_name, skip_token:nil, custom_headers:nil)
      list_by_share_async(resource_group_name, account_name, share_name, skip_token:skip_token, custom_headers:custom_headers).value!
    end

    #
    # List synchronizationSettings in a share.
    #
    # List synchronizationSettings in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param skip_token [String] continuation token
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_share_async(resource_group_name, account_name, share_name, skip_token:nil, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, 'share_name is nil' if share_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'accountName' => account_name,'shareName' => share_name},
          query_params: {'api-version' => @client.api_version,'$skipToken' => skip_token},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataShare::Mgmt::V2018_11_01_preview::Models::SynchronizationSettingList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete synchronizationSetting in a share.
    #
    # Delete a synchronizationSetting in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting .
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationResponse] operation results.
    #
    def begin_delete(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:nil)
      response = begin_delete_async(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete synchronizationSetting in a share.
    #
    # Delete a synchronizationSetting in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting .
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_with_http_info(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:nil)
      begin_delete_async(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:custom_headers).value!
    end

    #
    # Delete synchronizationSetting in a share.
    #
    # Delete a synchronizationSetting in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param synchronization_setting_name [String] The name of the
    # synchronizationSetting .
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async(resource_group_name, account_name, share_name, synchronization_setting_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'account_name is nil' if account_name.nil?
      fail ArgumentError, 'share_name is nil' if share_name.nil?
      fail ArgumentError, 'synchronization_setting_name is nil' if synchronization_setting_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'accountName' => account_name,'shareName' => share_name,'synchronizationSettingName' => synchronization_setting_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataShare::Mgmt::V2018_11_01_preview::Models::OperationResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # List synchronizationSettings in a share.
    #
    # List synchronizationSettings in a share
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SynchronizationSettingList] operation results.
    #
    def list_by_share_next(next_page_link, custom_headers:nil)
      response = list_by_share_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # List synchronizationSettings in a share.
    #
    # List synchronizationSettings in a share
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_share_next_with_http_info(next_page_link, custom_headers:nil)
      list_by_share_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # List synchronizationSettings in a share.
    #
    # List synchronizationSettings in a share
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_share_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataShare::Mgmt::V2018_11_01_preview::Models::SynchronizationSettingList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # List synchronizationSettings in a share.
    #
    # List synchronizationSettings in a share
    #
    # @param resource_group_name [String] The resource group name.
    # @param account_name [String] The name of the share account.
    # @param share_name [String] The name of the share.
    # @param skip_token [String] continuation token
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SynchronizationSettingList] which provide lazy access to pages of
    # the response.
    #
    def list_by_share_as_lazy(resource_group_name, account_name, share_name, skip_token:nil, custom_headers:nil)
      response = list_by_share_async(resource_group_name, account_name, share_name, skip_token:skip_token, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_by_share_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
