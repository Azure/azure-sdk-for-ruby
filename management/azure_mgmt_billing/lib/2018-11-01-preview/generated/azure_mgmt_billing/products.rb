# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Billing::Mgmt::V2018_11_01_preview
  #
  # Billing client provides access to billing resources for Azure
  # subscriptions.
  #
  class Products
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Products class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [BillingManagementClient] reference to the BillingManagementClient
    attr_reader :client

    #
    # The operation to transfer a Product to another InvoiceSection.
    #
    # @param billing_account_id [String] billing Account Id.
    # @param invoice_section_id [String] Invoice Id.
    # @param product_name [String] Product Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def transfer(billing_account_id, invoice_section_id, product_name, custom_headers = nil)
      response = transfer_async(billing_account_id, invoice_section_id, product_name, custom_headers).value!
      nil
    end

    #
    # The operation to transfer a Product to another InvoiceSection.
    #
    # @param billing_account_id [String] billing Account Id.
    # @param invoice_section_id [String] Invoice Id.
    # @param product_name [String] Product Id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def transfer_with_http_info(billing_account_id, invoice_section_id, product_name, custom_headers = nil)
      transfer_async(billing_account_id, invoice_section_id, product_name, custom_headers).value!
    end

    #
    # The operation to transfer a Product to another InvoiceSection.
    #
    # @param billing_account_id [String] billing Account Id.
    # @param invoice_section_id [String] Invoice Id.
    # @param product_name [String] Product Id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def transfer_async(billing_account_id, invoice_section_id, product_name, custom_headers = nil)
      fail ArgumentError, 'billing_account_id is nil' if billing_account_id.nil?
      fail ArgumentError, 'invoice_section_id is nil' if invoice_section_id.nil?
      fail ArgumentError, 'product_name is nil' if product_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?

      parameters = TransferProductProperties.new
      unless
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::Billing::Mgmt::V2018_11_01_preview::Models::TransferProductProperties.mapper()
      request_content = @client.serialize(request_mapper,  parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}/products/{productName}/transfer'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'billingAccountId' => billing_account_id,'invoiceSectionId' => invoice_section_id,'productName' => product_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

  end
end
