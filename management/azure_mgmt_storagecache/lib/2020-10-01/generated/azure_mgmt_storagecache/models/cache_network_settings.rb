# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::StorageCache::Mgmt::V2020_10_01
  module Models
    #
    # Cache network settings.
    #
    class CacheNetworkSettings

      include MsRestAzure

      # @return [Integer] The IPv4 maximum transmission unit configured for the
      # subnet. Default value: 1500 .
      attr_accessor :mtu

      # @return [Array<String>] Array of additional IP addresses used by this
      # Cache.
      attr_accessor :utility_addresses


      #
      # Mapper for CacheNetworkSettings class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'CacheNetworkSettings',
          type: {
            name: 'Composite',
            class_name: 'CacheNetworkSettings',
            model_properties: {
              mtu: {
                client_side_validation: true,
                required: false,
                serialized_name: 'mtu',
                default_value: 1500,
                constraints: {
                  InclusiveMaximum: 1500,
                  InclusiveMinimum: 576
                },
                type: {
                  name: 'Number'
                }
              },
              utility_addresses: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'utilityAddresses',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              }
            }
          }
        }
      end
    end
  end
end
