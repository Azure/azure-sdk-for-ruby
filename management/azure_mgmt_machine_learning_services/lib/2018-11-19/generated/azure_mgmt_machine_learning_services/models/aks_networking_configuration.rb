# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::MachineLearningServices::Mgmt::V2018_11_19
  module Models
    #
    # Advance configuration for AKS networking
    #
    class AksNetworkingConfiguration

      include MsRestAzure

      # @return [String] Virtual network subnet resource ID the compute nodes
      # belong to
      attr_accessor :subnet_id

      # @return [String] A CIDR notation IP range from which to assign service
      # cluster IPs. It must not overlap with any Subnet IP ranges.
      attr_accessor :service_cidr

      # @return [String] An IP address assigned to the Kubernetes DNS service.
      # It must be within the Kubernetes service address range specified in
      # serviceCidr.
      attr_accessor :dns_service_ip

      # @return [String] A CIDR notation IP range assigned to the Docker bridge
      # network. It must not overlap with any Subnet IP ranges or the
      # Kubernetes service address range.
      attr_accessor :docker_bridge_cidr


      #
      # Mapper for AksNetworkingConfiguration class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'AksNetworkingConfiguration',
          type: {
            name: 'Composite',
            class_name: 'AksNetworkingConfiguration',
            model_properties: {
              subnet_id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'subnetId',
                type: {
                  name: 'String'
                }
              },
              service_cidr: {
                client_side_validation: true,
                required: false,
                serialized_name: 'serviceCidr',
                constraints: {
                  Pattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
                },
                type: {
                  name: 'String'
                }
              },
              dns_service_ip: {
                client_side_validation: true,
                required: false,
                serialized_name: 'dnsServiceIP',
                constraints: {
                  Pattern: '^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
                },
                type: {
                  name: 'String'
                }
              },
              docker_bridge_cidr: {
                client_side_validation: true,
                required: false,
                serialized_name: 'dockerBridgeCidr',
                constraints: {
                  Pattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
                },
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
