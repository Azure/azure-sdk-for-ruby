# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ApiManagement::Mgmt::V2018_01_01_preview
  #
  # ApiManagement Client
  #
  class TagDescription
    include MsRestAzure

    #
    # Creates and initializes a new instance of the TagDescription class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [ApiManagementClient] reference to the ApiManagementClient
    attr_reader :client

    #
    # Lists all Tags descriptions in scope of API. Model similar to swagger -
    # tagDescription is defined on API level but tag may be assigned to the
    # Operations
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param filter [String] | Field       | Supported operators    | Supported
    # functions                         |
    # |-------------|------------------------|---------------------------------------------|
    # | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
    # endswith |
    # | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
    # endswith |
    # @param top [Integer] Number of records to return.
    # @param skip [Integer] Number of records to skip.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<TagDescriptionContract>] operation results.
    #
    def list_by_api(resource_group_name, service_name, api_id, filter = nil, top = nil, skip = nil, custom_headers = nil)
      first_page = list_by_api_as_lazy(resource_group_name, service_name, api_id, filter, top, skip, custom_headers)
      first_page.get_all_items
    end

    #
    # Lists all Tags descriptions in scope of API. Model similar to swagger -
    # tagDescription is defined on API level but tag may be assigned to the
    # Operations
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param filter [String] | Field       | Supported operators    | Supported
    # functions                         |
    # |-------------|------------------------|---------------------------------------------|
    # | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
    # endswith |
    # | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
    # endswith |
    # @param top [Integer] Number of records to return.
    # @param skip [Integer] Number of records to skip.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_api_with_http_info(resource_group_name, service_name, api_id, filter = nil, top = nil, skip = nil, custom_headers = nil)
      list_by_api_async(resource_group_name, service_name, api_id, filter, top, skip, custom_headers).value!
    end

    #
    # Lists all Tags descriptions in scope of API. Model similar to swagger -
    # tagDescription is defined on API level but tag may be assigned to the
    # Operations
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param filter [String] | Field       | Supported operators    | Supported
    # functions                         |
    # |-------------|------------------------|---------------------------------------------|
    # | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
    # endswith |
    # | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
    # endswith |
    # @param top [Integer] Number of records to return.
    # @param skip [Integer] Number of records to skip.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_api_async(resource_group_name, service_name, api_id, filter = nil, top = nil, skip = nil, custom_headers = nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, 'api_id is nil' if api_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'serviceName' => service_name,'apiId' => api_id,'subscriptionId' => @client.subscription_id},
          query_params: {'$filter' => filter,'$top' => top,'$skip' => skip,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ApiManagement::Mgmt::V2018_01_01_preview::Models::TagDescriptionCollection.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the entity state version of the tag specified by its identifier.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_entity_state(resource_group_name, service_name, api_id, tag_id, custom_headers = nil)
      response = get_entity_state_async(resource_group_name, service_name, api_id, tag_id, custom_headers).value!
      nil
    end

    #
    # Gets the entity state version of the tag specified by its identifier.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_entity_state_with_http_info(resource_group_name, service_name, api_id, tag_id, custom_headers = nil)
      get_entity_state_async(resource_group_name, service_name, api_id, tag_id, custom_headers).value!
    end

    #
    # Gets the entity state version of the tag specified by its identifier.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_entity_state_async(resource_group_name, service_name, api_id, tag_id, custom_headers = nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, 'api_id is nil' if api_id.nil?
      fail ArgumentError, 'tag_id is nil' if tag_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'serviceName' => service_name,'apiId' => api_id,'tagId' => tag_id,'subscriptionId' => @client.subscription_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Get tag associated with the API.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [TagDescriptionContract] operation results.
    #
    def get(resource_group_name, service_name, api_id, tag_id, custom_headers = nil)
      response = get_async(resource_group_name, service_name, api_id, tag_id, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get tag associated with the API.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(resource_group_name, service_name, api_id, tag_id, custom_headers = nil)
      get_async(resource_group_name, service_name, api_id, tag_id, custom_headers).value!
    end

    #
    # Get tag associated with the API.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(resource_group_name, service_name, api_id, tag_id, custom_headers = nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, 'api_id is nil' if api_id.nil?
      fail ArgumentError, 'tag_id is nil' if tag_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'serviceName' => service_name,'apiId' => api_id,'tagId' => tag_id,'subscriptionId' => @client.subscription_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ApiManagement::Mgmt::V2018_01_01_preview::Models::TagDescriptionContract.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create/Update tag fescription in scope of the Api.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param parameters [TagDescriptionCreateParameters] Create parameters.
    # @param if_match [String] ETag of the Entity. Not required when creating an
    # entity, but required when updating an entity.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [TagDescriptionContract] operation results.
    #
    def create_or_update(resource_group_name, service_name, api_id, tag_id, parameters, if_match = nil, custom_headers = nil)
      response = create_or_update_async(resource_group_name, service_name, api_id, tag_id, parameters, if_match, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create/Update tag fescription in scope of the Api.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param parameters [TagDescriptionCreateParameters] Create parameters.
    # @param if_match [String] ETag of the Entity. Not required when creating an
    # entity, but required when updating an entity.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_or_update_with_http_info(resource_group_name, service_name, api_id, tag_id, parameters, if_match = nil, custom_headers = nil)
      create_or_update_async(resource_group_name, service_name, api_id, tag_id, parameters, if_match, custom_headers).value!
    end

    #
    # Create/Update tag fescription in scope of the Api.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param parameters [TagDescriptionCreateParameters] Create parameters.
    # @param if_match [String] ETag of the Entity. Not required when creating an
    # entity, but required when updating an entity.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_or_update_async(resource_group_name, service_name, api_id, tag_id, parameters, if_match = nil, custom_headers = nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, 'api_id is nil' if api_id.nil?
      fail ArgumentError, 'tag_id is nil' if tag_id.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::ApiManagement::Mgmt::V2018_01_01_preview::Models::TagDescriptionCreateParameters.mapper()
      request_content = @client.serialize(request_mapper,  parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'serviceName' => service_name,'apiId' => api_id,'tagId' => tag_id,'subscriptionId' => @client.subscription_id},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201 || status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ApiManagement::Mgmt::V2018_01_01_preview::Models::TagDescriptionContract.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ApiManagement::Mgmt::V2018_01_01_preview::Models::TagDescriptionContract.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete tag description for the Api.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param if_match [String] ETag of the Entity. ETag should match the current
    # entity state from the header response of the GET request or it should be *
    # for unconditional update.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete(resource_group_name, service_name, api_id, tag_id, if_match, custom_headers = nil)
      response = delete_async(resource_group_name, service_name, api_id, tag_id, if_match, custom_headers).value!
      nil
    end

    #
    # Delete tag description for the Api.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param if_match [String] ETag of the Entity. ETag should match the current
    # entity state from the header response of the GET request or it should be *
    # for unconditional update.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(resource_group_name, service_name, api_id, tag_id, if_match, custom_headers = nil)
      delete_async(resource_group_name, service_name, api_id, tag_id, if_match, custom_headers).value!
    end

    #
    # Delete tag description for the Api.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param tag_id [String] Tag identifier. Must be unique in the current API
    # Management service instance.
    # @param if_match [String] ETag of the Entity. ETag should match the current
    # entity state from the header response of the GET request or it should be *
    # for unconditional update.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(resource_group_name, service_name, api_id, tag_id, if_match, custom_headers = nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, 'api_id is nil' if api_id.nil?
      fail ArgumentError, 'tag_id is nil' if tag_id.nil?
      fail ArgumentError, 'if_match is nil' if if_match.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['If-Match'] = if_match unless if_match.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'serviceName' => service_name,'apiId' => api_id,'tagId' => tag_id,'subscriptionId' => @client.subscription_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Lists all Tags descriptions in scope of API. Model similar to swagger -
    # tagDescription is defined on API level but tag may be assigned to the
    # Operations
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [TagDescriptionCollection] operation results.
    #
    def list_by_api_next(next_page_link, custom_headers = nil)
      response = list_by_api_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all Tags descriptions in scope of API. Model similar to swagger -
    # tagDescription is defined on API level but tag may be assigned to the
    # Operations
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_api_next_with_http_info(next_page_link, custom_headers = nil)
      list_by_api_next_async(next_page_link, custom_headers).value!
    end

    #
    # Lists all Tags descriptions in scope of API. Model similar to swagger -
    # tagDescription is defined on API level but tag may be assigned to the
    # Operations
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_api_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ApiManagement::Mgmt::V2018_01_01_preview::Models::TagDescriptionCollection.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all Tags descriptions in scope of API. Model similar to swagger -
    # tagDescription is defined on API level but tag may be assigned to the
    # Operations
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param service_name [String] The name of the API Management service.
    # @param api_id [String] API revision identifier. Must be unique in the current
    # API Management service instance. Non-current revision has ;rev=n as a suffix
    # where n is the revision number.
    # @param filter [String] | Field       | Supported operators    | Supported
    # functions                         |
    # |-------------|------------------------|---------------------------------------------|
    # | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
    # endswith |
    # | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
    # endswith |
    # @param top [Integer] Number of records to return.
    # @param skip [Integer] Number of records to skip.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [TagDescriptionCollection] which provide lazy access to pages of the
    # response.
    #
    def list_by_api_as_lazy(resource_group_name, service_name, api_id, filter = nil, top = nil, skip = nil, custom_headers = nil)
      response = list_by_api_async(resource_group_name, service_name, api_id, filter, top, skip, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_by_api_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

  end
end
