# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataMigration::Mgmt::V2018_04_19
  module Models
    #
    # Model object.
    #
    #
    class MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel < MigrateSqlServerSqlMISyncTaskOutput

      include MsRestAzure


      def initialize
        @resultType = "DatabaseLevelOutput"
      end

      attr_accessor :resultType

      # @return [String] Name of the database
      attr_accessor :source_database_name

      # @return [DatabaseMigrationState] Current state of database. Possible
      # values include: 'UNDEFINED', 'INITIAL', 'FULL_BACKUP_UPLOAD_START',
      # 'LOG_SHIPPING_START', 'UPLOAD_LOG_FILES_START', 'CUTOVER_START',
      # 'POST_CUTOVER_COMPLETE', 'COMPLETED', 'CANCELLED', 'FAILED'
      attr_accessor :migration_state

      # @return [DateTime] Database migration start time
      attr_accessor :started_on

      # @return [DateTime] Database migration end time
      attr_accessor :ended_on

      # @return [BackupSetInfo] Details of full backup set
      attr_accessor :full_backup_set_info

      # @return [BackupSetInfo] Last applied backup set information
      attr_accessor :last_restored_backup_set_info

      # @return [Array<BackupSetInfo>] Backup sets that are currently active
      # (Either being uploaded or getting restored)
      attr_accessor :active_backup_sets

      # @return [String] Name of container created in the Azure Storage account
      # where backups are copied to
      attr_accessor :container_name

      # @return [String] prefix string to use for querying errors for this
      # database
      attr_accessor :error_prefix

      # @return [Boolean] Whether full backup has been applied to the target
      # database or not
      attr_accessor :is_full_backup_restored

      # @return [Array<ReportableException>] Migration exceptions and warnings
      attr_accessor :exceptions_and_warnings


      #
      # Mapper for MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel class as
      # Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'DatabaseLevelOutput',
          type: {
            name: 'Composite',
            class_name: 'MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              resultType: {
                client_side_validation: true,
                required: true,
                serialized_name: 'resultType',
                type: {
                  name: 'String'
                }
              },
              source_database_name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'sourceDatabaseName',
                type: {
                  name: 'String'
                }
              },
              migration_state: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'migrationState',
                type: {
                  name: 'String'
                }
              },
              started_on: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'startedOn',
                type: {
                  name: 'DateTime'
                }
              },
              ended_on: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'endedOn',
                type: {
                  name: 'DateTime'
                }
              },
              full_backup_set_info: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'fullBackupSetInfo',
                type: {
                  name: 'Composite',
                  class_name: 'BackupSetInfo'
                }
              },
              last_restored_backup_set_info: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'lastRestoredBackupSetInfo',
                type: {
                  name: 'Composite',
                  class_name: 'BackupSetInfo'
                }
              },
              active_backup_sets: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'activeBackupSets',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'BackupSetInfoElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'BackupSetInfo'
                      }
                  }
                }
              },
              container_name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'containerName',
                type: {
                  name: 'String'
                }
              },
              error_prefix: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'errorPrefix',
                type: {
                  name: 'String'
                }
              },
              is_full_backup_restored: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'isFullBackupRestored',
                type: {
                  name: 'Boolean'
                }
              },
              exceptions_and_warnings: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'exceptionsAndWarnings',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ReportableExceptionElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ReportableException'
                      }
                  }
                }
              }
            }
          }
        }
      end
    end
  end
end
