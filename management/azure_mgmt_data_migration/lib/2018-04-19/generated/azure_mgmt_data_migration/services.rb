# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataMigration::Mgmt::V2018_04_19
  #
  # Data Migration Client
  #
  class Services
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Services class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [DataMigrationServiceClient] reference to the DataMigrationServiceClient
    attr_reader :client

    #
    # Create or update DMS Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The PUT method creates a new service or updates an
    # existing one. When a service is updated, existing child resources (i.e.
    # tasks) are unaffected. Services currently support a single kind, "vm", which
    # refers to a VM-based service, although other kinds may be added in the
    # future. This method can change the kind, SKU, and network of the service, but
    # if tasks are currently running (i.e. the service is busy), this will fail
    # with 400 Bad Request ("ServiceIsBusy"). The provider will reply when
    # successful with 200 OK or 201 Created. Long-running operations use the
    # provisioningState property.
    #
    # @param parameters [DataMigrationService] Information about the service
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DataMigrationService] operation results.
    #
    def create_or_update(parameters, group_name, service_name, custom_headers:nil)
      response = create_or_update_async(parameters, group_name, service_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param parameters [DataMigrationService] Information about the service
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def create_or_update_async(parameters, group_name, service_name, custom_headers:nil)
      # Send request
      promise = begin_create_or_update_async(parameters, group_name, service_name, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationService.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Get DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The GET method retrieves information about a service
    # instance.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DataMigrationService] operation results.
    #
    def get(group_name, service_name, custom_headers:nil)
      response = get_async(group_name, service_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The GET method retrieves information about a service
    # instance.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(group_name, service_name, custom_headers:nil)
      get_async(group_name, service_name, custom_headers:custom_headers).value!
    end

    #
    # Get DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The GET method retrieves information about a service
    # instance.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(group_name, service_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'group_name is nil' if group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'groupName' => group_name,'serviceName' => service_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationService.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The DELETE method deletes a service. Any running tasks
    # will be canceled.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param delete_running_tasks [Boolean] Delete the resource even if it contains
    # running tasks
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete(group_name, service_name, delete_running_tasks:nil, custom_headers:nil)
      response = delete_async(group_name, service_name, delete_running_tasks:delete_running_tasks, custom_headers:custom_headers).value!
      nil
    end

    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param delete_running_tasks [Boolean] Delete the resource even if it contains
    # running tasks
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async(group_name, service_name, delete_running_tasks:nil, custom_headers:nil)
      # Send request
      promise = begin_delete_async(group_name, service_name, delete_running_tasks:delete_running_tasks, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Create or update DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The PATCH method updates an existing service. This method
    # can change the kind, SKU, and network of the service, but if tasks are
    # currently running (i.e. the service is busy), this will fail with 400 Bad
    # Request ("ServiceIsBusy").
    #
    # @param parameters [DataMigrationService] Information about the service
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DataMigrationService] operation results.
    #
    def update(parameters, group_name, service_name, custom_headers:nil)
      response = update_async(parameters, group_name, service_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param parameters [DataMigrationService] Information about the service
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def update_async(parameters, group_name, service_name, custom_headers:nil)
      # Send request
      promise = begin_update_async(parameters, group_name, service_name, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationService.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Check service health status
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action performs a health check and returns the status
    # of the service and virtual machine size.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DataMigrationServiceStatusResponse] operation results.
    #
    def check_status(group_name, service_name, custom_headers:nil)
      response = check_status_async(group_name, service_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Check service health status
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action performs a health check and returns the status
    # of the service and virtual machine size.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def check_status_with_http_info(group_name, service_name, custom_headers:nil)
      check_status_async(group_name, service_name, custom_headers:custom_headers).value!
    end

    #
    # Check service health status
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action performs a health check and returns the status
    # of the service and virtual machine size.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def check_status_async(group_name, service_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'group_name is nil' if group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkStatus'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'groupName' => group_name,'serviceName' => service_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationServiceStatusResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Start service
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action starts the service and the service can be used
    # for data migration.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def start(group_name, service_name, custom_headers:nil)
      response = start_async(group_name, service_name, custom_headers:custom_headers).value!
      nil
    end

    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def start_async(group_name, service_name, custom_headers:nil)
      # Send request
      promise = begin_start_async(group_name, service_name, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Stop service
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action stops the service and the service cannot be
    # used for data migration. The service owner won't be billed when the service
    # is stopped.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def stop(group_name, service_name, custom_headers:nil)
      response = stop_async(group_name, service_name, custom_headers:custom_headers).value!
      nil
    end

    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def stop_async(group_name, service_name, custom_headers:nil)
      # Send request
      promise = begin_stop_async(group_name, service_name, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Get compatible SKUs
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The skus action returns the list of SKUs that a service
    # resource can be updated to.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<AvailableServiceSku>] operation results.
    #
    def list_skus(group_name, service_name, custom_headers:nil)
      first_page = list_skus_as_lazy(group_name, service_name, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Get compatible SKUs
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The skus action returns the list of SKUs that a service
    # resource can be updated to.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_skus_with_http_info(group_name, service_name, custom_headers:nil)
      list_skus_async(group_name, service_name, custom_headers:custom_headers).value!
    end

    #
    # Get compatible SKUs
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The skus action returns the list of SKUs that a service
    # resource can be updated to.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_skus_async(group_name, service_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'group_name is nil' if group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/skus'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'groupName' => group_name,'serviceName' => service_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::ServiceSkuList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Check nested resource name validity and availability
    #
    # This method checks whether a proposed nested resource name is valid and
    # available.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param parameters [NameAvailabilityRequest] Requested name to validate
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [NameAvailabilityResponse] operation results.
    #
    def nested_check_name_availability(group_name, service_name, parameters, custom_headers:nil)
      response = nested_check_name_availability_async(group_name, service_name, parameters, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Check nested resource name validity and availability
    #
    # This method checks whether a proposed nested resource name is valid and
    # available.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param parameters [NameAvailabilityRequest] Requested name to validate
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def nested_check_name_availability_with_http_info(group_name, service_name, parameters, custom_headers:nil)
      nested_check_name_availability_async(group_name, service_name, parameters, custom_headers:custom_headers).value!
    end

    #
    # Check nested resource name validity and availability
    #
    # This method checks whether a proposed nested resource name is valid and
    # available.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param parameters [NameAvailabilityRequest] Requested name to validate
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def nested_check_name_availability_async(group_name, service_name, parameters, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'group_name is nil' if group_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::NameAvailabilityRequest.mapper()
      request_content = @client.serialize(request_mapper,  parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkNameAvailability'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'groupName' => group_name,'serviceName' => service_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::NameAvailabilityResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get services in resource group
    #
    # The Services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # resource group.
    #
    # @param group_name [String] Name of the resource group
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<DataMigrationService>] operation results.
    #
    def list_by_resource_group(group_name, custom_headers:nil)
      first_page = list_by_resource_group_as_lazy(group_name, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Get services in resource group
    #
    # The Services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # resource group.
    #
    # @param group_name [String] Name of the resource group
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_resource_group_with_http_info(group_name, custom_headers:nil)
      list_by_resource_group_async(group_name, custom_headers:custom_headers).value!
    end

    #
    # Get services in resource group
    #
    # The Services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # resource group.
    #
    # @param group_name [String] Name of the resource group
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_resource_group_async(group_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'group_name is nil' if group_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'groupName' => group_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationServiceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get services in subscription
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # subscription.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<DataMigrationService>] operation results.
    #
    def list(custom_headers:nil)
      first_page = list_as_lazy(custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Get services in subscription
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # subscription.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(custom_headers:nil)
      list_async(custom_headers:custom_headers).value!
    end

    #
    # Get services in subscription
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # subscription.
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/services'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationServiceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Check name validity and availability
    #
    # This method checks whether a proposed top-level resource name is valid and
    # available.
    #
    # @param location [String] The Azure region of the operation
    # @param parameters [NameAvailabilityRequest] Requested name to validate
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [NameAvailabilityResponse] operation results.
    #
    def check_name_availability(location, parameters, custom_headers:nil)
      response = check_name_availability_async(location, parameters, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Check name validity and availability
    #
    # This method checks whether a proposed top-level resource name is valid and
    # available.
    #
    # @param location [String] The Azure region of the operation
    # @param parameters [NameAvailabilityRequest] Requested name to validate
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def check_name_availability_with_http_info(location, parameters, custom_headers:nil)
      check_name_availability_async(location, parameters, custom_headers:custom_headers).value!
    end

    #
    # Check name validity and availability
    #
    # This method checks whether a proposed top-level resource name is valid and
    # available.
    #
    # @param location [String] The Azure region of the operation
    # @param parameters [NameAvailabilityRequest] Requested name to validate
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def check_name_availability_async(location, parameters, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'location is nil' if location.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::NameAvailabilityRequest.mapper()
      request_content = @client.serialize(request_mapper,  parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/checkNameAvailability'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'location' => location},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::NameAvailabilityResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create or update DMS Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The PUT method creates a new service or updates an
    # existing one. When a service is updated, existing child resources (i.e.
    # tasks) are unaffected. Services currently support a single kind, "vm", which
    # refers to a VM-based service, although other kinds may be added in the
    # future. This method can change the kind, SKU, and network of the service, but
    # if tasks are currently running (i.e. the service is busy), this will fail
    # with 400 Bad Request ("ServiceIsBusy"). The provider will reply when
    # successful with 200 OK or 201 Created. Long-running operations use the
    # provisioningState property.
    #
    # @param parameters [DataMigrationService] Information about the service
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DataMigrationService] operation results.
    #
    def begin_create_or_update(parameters, group_name, service_name, custom_headers:nil)
      response = begin_create_or_update_async(parameters, group_name, service_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create or update DMS Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The PUT method creates a new service or updates an
    # existing one. When a service is updated, existing child resources (i.e.
    # tasks) are unaffected. Services currently support a single kind, "vm", which
    # refers to a VM-based service, although other kinds may be added in the
    # future. This method can change the kind, SKU, and network of the service, but
    # if tasks are currently running (i.e. the service is busy), this will fail
    # with 400 Bad Request ("ServiceIsBusy"). The provider will reply when
    # successful with 200 OK or 201 Created. Long-running operations use the
    # provisioningState property.
    #
    # @param parameters [DataMigrationService] Information about the service
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_create_or_update_with_http_info(parameters, group_name, service_name, custom_headers:nil)
      begin_create_or_update_async(parameters, group_name, service_name, custom_headers:custom_headers).value!
    end

    #
    # Create or update DMS Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The PUT method creates a new service or updates an
    # existing one. When a service is updated, existing child resources (i.e.
    # tasks) are unaffected. Services currently support a single kind, "vm", which
    # refers to a VM-based service, although other kinds may be added in the
    # future. This method can change the kind, SKU, and network of the service, but
    # if tasks are currently running (i.e. the service is busy), this will fail
    # with 400 Bad Request ("ServiceIsBusy"). The provider will reply when
    # successful with 200 OK or 201 Created. Long-running operations use the
    # provisioningState property.
    #
    # @param parameters [DataMigrationService] Information about the service
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_create_or_update_async(parameters, group_name, service_name, custom_headers:nil)
      fail ArgumentError, 'parameters is nil' if parameters.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'group_name is nil' if group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationService.mapper()
      request_content = @client.serialize(request_mapper,  parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'groupName' => group_name,'serviceName' => service_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationService.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationService.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The DELETE method deletes a service. Any running tasks
    # will be canceled.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param delete_running_tasks [Boolean] Delete the resource even if it contains
    # running tasks
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete(group_name, service_name, delete_running_tasks:nil, custom_headers:nil)
      response = begin_delete_async(group_name, service_name, delete_running_tasks:delete_running_tasks, custom_headers:custom_headers).value!
      nil
    end

    #
    # Delete DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The DELETE method deletes a service. Any running tasks
    # will be canceled.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param delete_running_tasks [Boolean] Delete the resource even if it contains
    # running tasks
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_with_http_info(group_name, service_name, delete_running_tasks:nil, custom_headers:nil)
      begin_delete_async(group_name, service_name, delete_running_tasks:delete_running_tasks, custom_headers:custom_headers).value!
    end

    #
    # Delete DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The DELETE method deletes a service. Any running tasks
    # will be canceled.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param delete_running_tasks [Boolean] Delete the resource even if it contains
    # running tasks
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async(group_name, service_name, delete_running_tasks:nil, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'group_name is nil' if group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'groupName' => group_name,'serviceName' => service_name},
          query_params: {'deleteRunningTasks' => delete_running_tasks,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Create or update DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The PATCH method updates an existing service. This method
    # can change the kind, SKU, and network of the service, but if tasks are
    # currently running (i.e. the service is busy), this will fail with 400 Bad
    # Request ("ServiceIsBusy").
    #
    # @param parameters [DataMigrationService] Information about the service
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DataMigrationService] operation results.
    #
    def begin_update(parameters, group_name, service_name, custom_headers:nil)
      response = begin_update_async(parameters, group_name, service_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create or update DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The PATCH method updates an existing service. This method
    # can change the kind, SKU, and network of the service, but if tasks are
    # currently running (i.e. the service is busy), this will fail with 400 Bad
    # Request ("ServiceIsBusy").
    #
    # @param parameters [DataMigrationService] Information about the service
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_update_with_http_info(parameters, group_name, service_name, custom_headers:nil)
      begin_update_async(parameters, group_name, service_name, custom_headers:custom_headers).value!
    end

    #
    # Create or update DMS Service Instance
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The PATCH method updates an existing service. This method
    # can change the kind, SKU, and network of the service, but if tasks are
    # currently running (i.e. the service is busy), this will fail with 400 Bad
    # Request ("ServiceIsBusy").
    #
    # @param parameters [DataMigrationService] Information about the service
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_update_async(parameters, group_name, service_name, custom_headers:nil)
      fail ArgumentError, 'parameters is nil' if parameters.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'group_name is nil' if group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationService.mapper()
      request_content = @client.serialize(request_mapper,  parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'groupName' => group_name,'serviceName' => service_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationService.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Start service
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action starts the service and the service can be used
    # for data migration.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_start(group_name, service_name, custom_headers:nil)
      response = begin_start_async(group_name, service_name, custom_headers:custom_headers).value!
      nil
    end

    #
    # Start service
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action starts the service and the service can be used
    # for data migration.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_start_with_http_info(group_name, service_name, custom_headers:nil)
      begin_start_async(group_name, service_name, custom_headers:custom_headers).value!
    end

    #
    # Start service
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action starts the service and the service can be used
    # for data migration.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_start_async(group_name, service_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'group_name is nil' if group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/start'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'groupName' => group_name,'serviceName' => service_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Stop service
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action stops the service and the service cannot be
    # used for data migration. The service owner won't be billed when the service
    # is stopped.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_stop(group_name, service_name, custom_headers:nil)
      response = begin_stop_async(group_name, service_name, custom_headers:custom_headers).value!
      nil
    end

    #
    # Stop service
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action stops the service and the service cannot be
    # used for data migration. The service owner won't be billed when the service
    # is stopped.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_stop_with_http_info(group_name, service_name, custom_headers:nil)
      begin_stop_async(group_name, service_name, custom_headers:custom_headers).value!
    end

    #
    # Stop service
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This action stops the service and the service cannot be
    # used for data migration. The service owner won't be billed when the service
    # is stopped.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_stop_async(group_name, service_name, custom_headers:nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'group_name is nil' if group_name.nil?
      fail ArgumentError, 'service_name is nil' if service_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/stop'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'groupName' => group_name,'serviceName' => service_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Get compatible SKUs
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The skus action returns the list of SKUs that a service
    # resource can be updated to.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ServiceSkuList] operation results.
    #
    def list_skus_next(next_page_link, custom_headers:nil)
      response = list_skus_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get compatible SKUs
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The skus action returns the list of SKUs that a service
    # resource can be updated to.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_skus_next_with_http_info(next_page_link, custom_headers:nil)
      list_skus_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Get compatible SKUs
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The skus action returns the list of SKUs that a service
    # resource can be updated to.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_skus_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::ServiceSkuList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get services in resource group
    #
    # The Services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DataMigrationServiceList] operation results.
    #
    def list_by_resource_group_next(next_page_link, custom_headers:nil)
      response = list_by_resource_group_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get services in resource group
    #
    # The Services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_resource_group_next_with_http_info(next_page_link, custom_headers:nil)
      list_by_resource_group_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Get services in resource group
    #
    # The Services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_resource_group_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationServiceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get services in subscription
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # subscription.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DataMigrationServiceList] operation results.
    #
    def list_next(next_page_link, custom_headers:nil)
      response = list_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get services in subscription
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # subscription.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers:nil)
      list_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Get services in subscription
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # subscription.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::DataMigration::Mgmt::V2018_04_19::Models::DataMigrationServiceList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get compatible SKUs
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. The skus action returns the list of SKUs that a service
    # resource can be updated to.
    #
    # @param group_name [String] Name of the resource group
    # @param service_name [String] Name of the service
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ServiceSkuList] which provide lazy access to pages of the response.
    #
    def list_skus_as_lazy(group_name, service_name, custom_headers:nil)
      response = list_skus_async(group_name, service_name, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_skus_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

    #
    # Get services in resource group
    #
    # The Services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # resource group.
    #
    # @param group_name [String] Name of the resource group
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DataMigrationServiceList] which provide lazy access to pages of the
    # response.
    #
    def list_by_resource_group_as_lazy(group_name, custom_headers:nil)
      response = list_by_resource_group_async(group_name, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_by_resource_group_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

    #
    # Get services in subscription
    #
    # The services resource is the top-level resource that represents the Database
    # Migration Service. This method returns a list of service resources in a
    # subscription.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DataMigrationServiceList] which provide lazy access to pages of the
    # response.
    #
    def list_as_lazy(custom_headers:nil)
      response = list_async(custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
