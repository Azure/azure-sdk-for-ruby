# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataMigration::Mgmt::V2018_07_15_preview
  module Models
    #
    # Base class for all types of DMS task properties. If task is not supported
    # by current client, this object is returned.
    #
    class ProjectTaskProperties

      include MsRestAzure

      @@discriminatorMap = Hash.new
      @@discriminatorMap["GetTDECertificates.Sql"] = "GetTdeCertificatesSqlTaskProperties"
      @@discriminatorMap["Validate.Oracle.AzureDbPostgreSql.Sync"] = "ValidateOracleAzureDbForPostgreSqlSyncTaskProperties"
      @@discriminatorMap["Validate.MongoDb"] = "ValidateMongoDbTaskProperties"
      @@discriminatorMap["ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS"] = "ValidateMigrationInputSqlServerSqlMISyncTaskProperties"
      @@discriminatorMap["ValidateMigrationInput.SqlServer.AzureSqlDbMI"] = "ValidateMigrationInputSqlServerSqlMITaskProperties"
      @@discriminatorMap["ValidateMigrationInput.SqlServer.SqlDb.Sync"] = "ValidateMigrationInputSqlServerSqlDbSyncTaskProperties"
      @@discriminatorMap["Migrate.Oracle.Sql.Sync"] = "MigrateOracleAzureDbForPostgreSqlSyncTaskProperties"
      @@discriminatorMap["Migrate.PostgreSql.AzureDbForPostgreSql.Sync"] = "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties"
      @@discriminatorMap["Migrate.MySql.AzureDbForMySql.Sync"] = "MigrateMySqlAzureDbForMySqlSyncTaskProperties"
      @@discriminatorMap["Migrate.SqlServer.AzureSqlDb.Sync"] = "MigrateSqlServerSqlDbSyncTaskProperties"
      @@discriminatorMap["Migrate.SqlServer.SqlDb"] = "MigrateSqlServerSqlDbTaskProperties"
      @@discriminatorMap["Migrate.SqlServer.AzureSqlDbMI.Sync.LRS"] = "MigrateSqlServerSqlMISyncTaskProperties"
      @@discriminatorMap["Migrate.SqlServer.AzureSqlDbMI"] = "MigrateSqlServerSqlMITaskProperties"
      @@discriminatorMap["Migrate.MongoDb"] = "MigrateMongoDbTaskProperties"
      @@discriminatorMap["ConnectToTarget.AzureDbForMySql"] = "ConnectToTargetAzureDbForMySqlTaskProperties"
      @@discriminatorMap["ConnectToTarget.AzureSqlDbMI.Sync.LRS"] = "ConnectToTargetSqlMISyncTaskProperties"
      @@discriminatorMap["ConnectToTarget.AzureSqlDbMI"] = "ConnectToTargetSqlMITaskProperties"
      @@discriminatorMap["GetUserTablesPostgreSql"] = "GetUserTablesPostgreSqlTaskProperties"
      @@discriminatorMap["GetUserTablesOracle"] = "GetUserTablesOracleTaskProperties"
      @@discriminatorMap["GetUserTables.AzureSqlDb.Sync"] = "GetUserTablesSqlSyncTaskProperties"
      @@discriminatorMap["GetUserTables.Sql"] = "GetUserTablesSqlTaskProperties"
      @@discriminatorMap["ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync"] = "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties"
      @@discriminatorMap["ConnectToTarget.AzureDbForPostgreSql.Sync"] = "ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties"
      @@discriminatorMap["ConnectToTarget.SqlDb.Sync"] = "ConnectToTargetSqlSqlDbSyncTaskProperties"
      @@discriminatorMap["ConnectToTarget.SqlDb"] = "ConnectToTargetSqlDbTaskProperties"
      @@discriminatorMap["ConnectToSource.Oracle.Sync"] = "ConnectToSourceOracleSyncTaskProperties"
      @@discriminatorMap["ConnectToSource.PostgreSql.Sync"] = "ConnectToSourcePostgreSqlSyncTaskProperties"
      @@discriminatorMap["ConnectToSource.SqlServer.Sync"] = "ConnectToSourceSqlServerSyncTaskProperties"
      @@discriminatorMap["ConnectToSource.SqlServer"] = "ConnectToSourceSqlServerTaskProperties"
      @@discriminatorMap["Connect.MongoDb"] = "ConnectToMongoDbTaskProperties"
      @@discriminatorMap["ConnectToSource.MySql"] = "ConnectToSourceMySqlTaskProperties"
      @@discriminatorMap["MigrateSchemaSqlServerSqlDb"] = "MigrateSchemaSqlServerSqlDbTaskProperties"
      @@discriminatorMap["Service.Check.OCI"] = "CheckOCIDriverTaskProperties"
      @@discriminatorMap["Service.Upload.OCI"] = "UploadOCIDriverTaskProperties"
      @@discriminatorMap["Service.Install.OCI"] = "InstallOCIDriverTaskProperties"

      def initialize
        @taskType = "Unknown"
      end

      attr_accessor :taskType

      # @return [Array<ODataError>] Array of errors. This is ignored if
      # submitted.
      attr_accessor :errors

      # @return [TaskState] The state of the task. This is ignored if
      # submitted. Possible values include: 'Unknown', 'Queued', 'Running',
      # 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
      attr_accessor :state

      # @return [Array<CommandProperties>] Array of command properties.
      attr_accessor :commands

      # @return [Hash{String => String}] Key value pairs of client data to
      # attach meta data information to task
      attr_accessor :client_data


      #
      # Mapper for ProjectTaskProperties class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'Unknown',
          type: {
            name: 'Composite',
            polymorphic_discriminator: 'taskType',
            uber_parent: 'ProjectTaskProperties',
            class_name: 'ProjectTaskProperties',
            model_properties: {
              errors: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'errors',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ODataErrorElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ODataError'
                      }
                  }
                }
              },
              state: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'state',
                type: {
                  name: 'String'
                }
              },
              commands: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'commands',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'CommandPropertiesElementType',
                      type: {
                        name: 'Composite',
                        polymorphic_discriminator: 'commandType',
                        uber_parent: 'CommandProperties',
                        class_name: 'CommandProperties'
                      }
                  }
                }
              },
              client_data: {
                client_side_validation: true,
                required: false,
                serialized_name: 'clientData',
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              }
            }
          }
        }
      end
    end
  end
end
