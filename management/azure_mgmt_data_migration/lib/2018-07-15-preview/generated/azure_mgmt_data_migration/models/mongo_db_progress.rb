# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataMigration::Mgmt::V2018_07_15_preview
  module Models
    #
    # Base class for MongoDB migration outputs
    #
    class MongoDbProgress

      include MsRestAzure

      # @return [Integer] The number of document bytes copied during the
      # Copying stage
      attr_accessor :bytes_copied

      # @return [Integer] The number of documents copied during the Copying
      # stage
      attr_accessor :documents_copied

      # @return [String] The elapsed time in the format
      # [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
      attr_accessor :elapsed_time

      # @return [Hash{String => MongoDbError}] The errors and warnings that
      # have occurred for the current object. The keys are the error codes.
      attr_accessor :errors

      # @return [Integer] The number of oplog events awaiting replay
      attr_accessor :events_pending

      # @return [Integer] The number of oplog events replayed so far
      attr_accessor :events_replayed

      # @return [DateTime] The timestamp of the last oplog event received, or
      # null if no oplog event has been received yet
      attr_accessor :last_event_time

      # @return [DateTime] The timestamp of the last oplog event replayed, or
      # null if no oplog event has been replayed yet
      attr_accessor :last_replay_time

      # @return [String] The name of the progress object. For a collection,
      # this is the unqualified collection name. For a database, this is the
      # database name. For the overall migration, this is null.
      attr_accessor :name

      # @return [String] The qualified name of the progress object. For a
      # collection, this is the database-qualified name. For a database, this
      # is the database name. For the overall migration, this is null.
      attr_accessor :qualified_name

      # @return [Enum] The type of progress object. Possible values include:
      # 'Migration', 'Database', 'Collection'
      attr_accessor :result_type

      # @return [MongoDbMigrationState] Possible values include: 'NotStarted',
      # 'ValidatingInput', 'Initializing', 'Restarting', 'Copying',
      # 'InitialReplay', 'Replaying', 'Finalizing', 'Complete', 'Canceled',
      # 'Failed'
      attr_accessor :state

      # @return [Integer] The total number of document bytes on the source at
      # the beginning of the Copying stage, or -1 if the total size was unknown
      attr_accessor :total_bytes

      # @return [Integer] The total number of documents on the source at the
      # beginning of the Copying stage, or -1 if the total count was unknown
      attr_accessor :total_documents


      #
      # Mapper for MongoDbProgress class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'MongoDbProgress',
          type: {
            name: 'Composite',
            class_name: 'MongoDbProgress',
            model_properties: {
              bytes_copied: {
                client_side_validation: true,
                required: true,
                serialized_name: 'bytesCopied',
                type: {
                  name: 'Number'
                }
              },
              documents_copied: {
                client_side_validation: true,
                required: true,
                serialized_name: 'documentsCopied',
                type: {
                  name: 'Number'
                }
              },
              elapsed_time: {
                client_side_validation: true,
                required: true,
                serialized_name: 'elapsedTime',
                type: {
                  name: 'String'
                }
              },
              errors: {
                client_side_validation: true,
                required: true,
                serialized_name: 'errors',
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'MongoDbErrorElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'MongoDbError'
                      }
                  }
                }
              },
              events_pending: {
                client_side_validation: true,
                required: true,
                serialized_name: 'eventsPending',
                type: {
                  name: 'Number'
                }
              },
              events_replayed: {
                client_side_validation: true,
                required: true,
                serialized_name: 'eventsReplayed',
                type: {
                  name: 'Number'
                }
              },
              last_event_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'lastEventTime',
                type: {
                  name: 'DateTime'
                }
              },
              last_replay_time: {
                client_side_validation: true,
                required: false,
                serialized_name: 'lastReplayTime',
                type: {
                  name: 'DateTime'
                }
              },
              name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              },
              qualified_name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'qualifiedName',
                type: {
                  name: 'String'
                }
              },
              result_type: {
                client_side_validation: true,
                required: true,
                serialized_name: 'resultType',
                type: {
                  name: 'String'
                }
              },
              state: {
                client_side_validation: true,
                required: true,
                serialized_name: 'state',
                type: {
                  name: 'String'
                }
              },
              total_bytes: {
                client_side_validation: true,
                required: true,
                serialized_name: 'totalBytes',
                type: {
                  name: 'Number'
                }
              },
              total_documents: {
                client_side_validation: true,
                required: true,
                serialized_name: 'totalDocuments',
                type: {
                  name: 'Number'
                }
              }
            }
          }
        }
      end
    end
  end
end
