# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataMigration::Mgmt::V2018_03_15_preview
  module Models
    #
    # Migration level result for Sql server to Sql MI migration.
    #
    class MigrateSqlServerSqlMITaskOutputMigrationLevel < MigrateSqlServerSqlMITaskOutput

      include MsRestAzure


      def initialize
        @resultType = "MigrationLevelOutput"
      end

      attr_accessor :resultType

      # @return [DateTime] Migration start time
      attr_accessor :started_on

      # @return [DateTime] Migration end time
      attr_accessor :ended_on

      # @return [MigrationStatus] Current status of migration. Possible values
      # include: 'Default', 'Connecting', 'SourceAndTargetSelected',
      # 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped',
      # 'Completed', 'CompletedWithWarnings'
      attr_accessor :status

      # @return [MigrationState] Current state of migration. Possible values
      # include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed',
      # 'Skipped', 'Stopped'
      attr_accessor :state

      # @return [String] Migration progress message
      attr_accessor :message

      # @return [Hash{String => String}] Selected databases as a map from
      # database name to database id
      attr_accessor :databases

      # @return [String] Source server version
      attr_accessor :source_server_version

      # @return [String] Source server brand version
      attr_accessor :source_server_brand_version

      # @return [String] Target server version
      attr_accessor :target_server_version

      # @return [String] Target server brand version
      attr_accessor :target_server_brand_version

      # @return [Array<ReportableException>] Migration exceptions and warnings.
      attr_accessor :exceptions_and_warnings


      #
      # Mapper for MigrateSqlServerSqlMITaskOutputMigrationLevel class as Ruby
      # Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'MigrationLevelOutput',
          type: {
            name: 'Composite',
            class_name: 'MigrateSqlServerSqlMITaskOutputMigrationLevel',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              resultType: {
                client_side_validation: true,
                required: true,
                serialized_name: 'resultType',
                type: {
                  name: 'String'
                }
              },
              started_on: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'startedOn',
                type: {
                  name: 'DateTime'
                }
              },
              ended_on: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'endedOn',
                type: {
                  name: 'DateTime'
                }
              },
              status: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'status',
                type: {
                  name: 'String'
                }
              },
              state: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'state',
                type: {
                  name: 'String'
                }
              },
              message: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'message',
                type: {
                  name: 'String'
                }
              },
              databases: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'databases',
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              },
              source_server_version: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'sourceServerVersion',
                type: {
                  name: 'String'
                }
              },
              source_server_brand_version: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'sourceServerBrandVersion',
                type: {
                  name: 'String'
                }
              },
              target_server_version: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'targetServerVersion',
                type: {
                  name: 'String'
                }
              },
              target_server_brand_version: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'targetServerBrandVersion',
                type: {
                  name: 'String'
                }
              },
              exceptions_and_warnings: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'exceptionsAndWarnings',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ReportableExceptionElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ReportableException'
                      }
                  }
                }
              }
            }
          }
        }
      end
    end
  end
end
