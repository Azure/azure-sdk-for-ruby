# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::VMwareCloudSimple::Mgmt::V2019-04-01
  #
  # A service client - single point of access to the REST API.
  #
  class VMwareCloudSimpleClient < MsRestAzure::AzureServiceClient
    include MsRestAzure
    include MsRestAzure::Serialization

    # @return [String] the base URI of the service.
    attr_accessor :base_url

    # @return Credentials needed for the client to connect to Azure.
    attr_reader :credentials

    # @return [String] Client API version.
    attr_reader :api_version

    # @return [String] referer url
    attr_accessor :referer

    # @return [String] The region Id (westus, eastus)
    attr_accessor :region_id

    # @return [String] The subscription ID.
    attr_accessor :subscription_id

    # @return [String] Gets or sets the preferred language for the response.
    attr_accessor :accept_language

    # @return [Integer] Gets or sets the retry timeout in seconds for Long
    # Running Operations. Default value is 30.
    attr_accessor :long_running_operation_retry_timeout

    # @return [Boolean] When set to true a unique x-ms-client-request-id value
    # is generated and included in each request. Default is true.
    attr_accessor :generate_client_request_id

    # @return [AvailableOperations] available_operations
    attr_reader :available_operations

    # @return [DedicatedCloudNodeOperations] dedicated_cloud_node_operations
    attr_reader :dedicated_cloud_node_operations

    # @return [DedicatedCloudServiceOperations]
    # dedicated_cloud_service_operations
    attr_reader :dedicated_cloud_service_operations

    # @return [SkusAvailabilityWithinRegion] skus_availability_within_region
    attr_reader :skus_availability_within_region

    # @return [PrivateCloudByRegion] private_cloud_by_region
    attr_reader :private_cloud_by_region

    # @return [ResourcepoolsByPC] resourcepools_by_pc
    attr_reader :resourcepools_by_pc

    # @return [ResourcepoolByPC] resourcepool_by_pc
    attr_reader :resourcepool_by_pc

    # @return [VirtualMachineTemplatesByPC] virtual_machine_templates_by_pc
    attr_reader :virtual_machine_templates_by_pc

    # @return [VirtualMachineTemplateByPC] virtual_machine_template_by_pc
    attr_reader :virtual_machine_template_by_pc

    # @return [VirtualNetworksByPC] virtual_networks_by_pc
    attr_reader :virtual_networks_by_pc

    # @return [VirtualNetworkByPC] virtual_network_by_pc
    attr_reader :virtual_network_by_pc

    # @return [UsagesWithinRegion] usages_within_region
    attr_reader :usages_within_region

    # @return [VirtualMachineOperations] virtual_machine_operations
    attr_reader :virtual_machine_operations

    #
    # Creates initializes a new instance of the VMwareCloudSimpleClient class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param base_url [String] the base URI of the service.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials = nil, base_url = nil, options = nil)
      super(credentials, options)
      @base_url = base_url || 'https://management.azure.com'

      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @credentials = credentials

      @available_operations = AvailableOperations.new(self)
      @dedicated_cloud_node_operations = DedicatedCloudNodeOperations.new(self)
      @dedicated_cloud_service_operations = DedicatedCloudServiceOperations.new(self)
      @skus_availability_within_region = SkusAvailabilityWithinRegion.new(self)
      @private_cloud_by_region = PrivateCloudByRegion.new(self)
      @resourcepools_by_pc = ResourcepoolsByPC.new(self)
      @resourcepool_by_pc = ResourcepoolByPC.new(self)
      @virtual_machine_templates_by_pc = VirtualMachineTemplatesByPC.new(self)
      @virtual_machine_template_by_pc = VirtualMachineTemplateByPC.new(self)
      @virtual_networks_by_pc = VirtualNetworksByPC.new(self)
      @virtual_network_by_pc = VirtualNetworkByPC.new(self)
      @usages_within_region = UsagesWithinRegion.new(self)
      @virtual_machine_operations = VirtualMachineOperations.new(self)
      @api_version = '2019-04-01'
      @accept_language = 'en-US'
      @long_running_operation_retry_timeout = 30
      @generate_client_request_id = true
      add_telemetry
    end

    #
    # Makes a request and returns the body of the response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    #
    # Makes a request and returns the operation response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [MsRestAzure::AzureOperationResponse] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    #
    # Makes a request asynchronously.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      request_url = options[:base_url] || @base_url

      request_headers = @request_headers
      request_headers.merge!({'accept-language' => @accept_language}) unless @accept_language.nil?
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @credentials}) unless @credentials.nil?

      super(request_url, method, path, options)
    end

    #
    # Implements get of async operation
    #
    # Return an async operation
    #
    # @param operation_id [String] operation id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OperationResource] operation results.
    #
    def get_operation_result_by_region(operation_id, custom_headers = nil)
      response = get_operation_result_by_region_async(operation_id, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Implements get of async operation
    #
    # Return an async operation
    #
    # @param operation_id [String] operation id
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_operation_result_by_region_with_http_info(operation_id, custom_headers = nil)
      get_operation_result_by_region_async(operation_id, custom_headers).value!
    end

    #
    # Implements get of async operation
    #
    # Return an async operation
    #
    # @param operation_id [String] operation id
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_operation_result_by_region_async(operation_id, custom_headers = nil)
      fail ArgumentError, 'api_version is nil' if api_version.nil?
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'region_id is nil' if region_id.nil?
      fail ArgumentError, 'referer is nil' if referer.nil?
      fail ArgumentError, 'operation_id is nil' if operation_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['Referer'] = referer unless referer.nil?
      request_headers['accept-language'] = accept_language unless accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/operationResults/{operationId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'regionId' => region_id,'operationId' => operation_id},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::VMwareCloudSimple::Mgmt::V2019-04-01::Models::OperationResource.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Implements private cloud GET method
    #
    # Returns private cloud by its name
    #
    # @param pc_name [String] The private cloud name
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PrivateCloud] operation results.
    #
    def get_private_cloud(pc_name, custom_headers = nil)
      response = get_private_cloud_async(pc_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Implements private cloud GET method
    #
    # Returns private cloud by its name
    #
    # @param pc_name [String] The private cloud name
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_private_cloud_with_http_info(pc_name, custom_headers = nil)
      get_private_cloud_async(pc_name, custom_headers).value!
    end

    #
    # Implements private cloud GET method
    #
    # Returns private cloud by its name
    #
    # @param pc_name [String] The private cloud name
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_private_cloud_async(pc_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'pc_name is nil' if pc_name.nil?
      fail ArgumentError, 'region_id is nil' if region_id.nil?
      fail ArgumentError, 'api_version is nil' if api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = accept_language unless accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/locations/{regionId}/privateClouds/{pcName}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'pcName' => pc_name,'regionId' => region_id},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::VMwareCloudSimple::Mgmt::V2019-04-01::Models::PrivateCloud.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end


    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = 'azure_mgmt_vmwarecloudsimple'
        if defined? Azure::VMwareCloudSimple::Mgmt::V2019-04-01::VERSION
          sdk_information = "#{sdk_information}/#{Azure::VMwareCloudSimple::Mgmt::V2019-04-01::VERSION}"
        end
        add_user_agent_information(sdk_information)
    end
  end
end
