# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::RecoveryServicesSiteRecovery
  #
  # ReplicationRecoveryPlans
  #
  class ReplicationRecoveryPlans
    include MsRestAzure

    #
    # Creates and initializes a new instance of the ReplicationRecoveryPlans class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [SiteRecoveryManagementClient] reference to the SiteRecoveryManagementClient
    attr_reader :client

    #
    # Execute reprotect of the recovery plan.
    #
    # The operation to reprotect(reverse replicate) a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def reprotect(recovery_plan_name, custom_headers = nil)
      response = reprotect_async(recovery_plan_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def reprotect_async(recovery_plan_name, custom_headers = nil)
      # Send request
      promise = begin_reprotect_async(recovery_plan_name, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Execute commit failover of the recovery plan.
    #
    # The operation to commit the fail over of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def failover_commit(recovery_plan_name, custom_headers = nil)
      response = failover_commit_async(recovery_plan_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def failover_commit_async(recovery_plan_name, custom_headers = nil)
      # Send request
      promise = begin_failover_commit_async(recovery_plan_name, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Execute test failover cleanup of the recovery plan.
    #
    # The operation to cleanup test failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanTestFailoverCleanupInput] Test failover cleanup
    # input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def test_failover_cleanup(recovery_plan_name, input, custom_headers = nil)
      response = test_failover_cleanup_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanTestFailoverCleanupInput] Test failover cleanup
    # input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def test_failover_cleanup_async(recovery_plan_name, input, custom_headers = nil)
      # Send request
      promise = begin_test_failover_cleanup_async(recovery_plan_name, input, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Execute test failover of the recovery plan.
    #
    # The operation to start the test failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanTestFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def test_failover(recovery_plan_name, input, custom_headers = nil)
      response = test_failover_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanTestFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def test_failover_async(recovery_plan_name, input, custom_headers = nil)
      # Send request
      promise = begin_test_failover_async(recovery_plan_name, input, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Execute unplanned failover of the recovery plan.
    #
    # The operation to start the failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanUnplannedFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def unplanned_failover(recovery_plan_name, input, custom_headers = nil)
      response = unplanned_failover_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanUnplannedFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def unplanned_failover_async(recovery_plan_name, input, custom_headers = nil)
      # Send request
      promise = begin_unplanned_failover_async(recovery_plan_name, input, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Execute planned failover of the recovery plan.
    #
    # The operation to start the planned failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanPlannedFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def planned_failover(recovery_plan_name, input, custom_headers = nil)
      response = planned_failover_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanPlannedFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def planned_failover_async(recovery_plan_name, input, custom_headers = nil)
      # Send request
      promise = begin_planned_failover_async(recovery_plan_name, input, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Gets the requested recovery plan.
    #
    # Gets the details of the recovery plan.
    #
    # @param recovery_plan_name [String] Name of the recovery plan.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def get(recovery_plan_name, custom_headers = nil)
      response = get_async(recovery_plan_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the requested recovery plan.
    #
    # Gets the details of the recovery plan.
    #
    # @param recovery_plan_name [String] Name of the recovery plan.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(recovery_plan_name, custom_headers = nil)
      get_async(recovery_plan_name, custom_headers).value!
    end

    #
    # Gets the requested recovery plan.
    #
    # Gets the details of the recovery plan.
    #
    # @param recovery_plan_name [String] Name of the recovery plan.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(recovery_plan_name, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'recovery_plan_name is nil' if recovery_plan_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id,'recoveryPlanName' => recovery_plan_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates a recovery plan with the given details.
    #
    # The operation to create a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [CreateRecoveryPlanInput] Recovery Plan creation input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def create(recovery_plan_name, input, custom_headers = nil)
      response = create_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [CreateRecoveryPlanInput] Recovery Plan creation input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def create_async(recovery_plan_name, input, custom_headers = nil)
      # Send request
      promise = begin_create_async(recovery_plan_name, input, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Deletes the specified recovery plan.
    #
    # Delete a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete(recovery_plan_name, custom_headers = nil)
      response = delete_async(recovery_plan_name, custom_headers).value!
      nil
    end

    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async(recovery_plan_name, custom_headers = nil)
      # Send request
      promise = begin_delete_async(recovery_plan_name, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Updates the given recovery plan.
    #
    # The operation to update a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [UpdateRecoveryPlanInput] Update recovery plan input
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def update(recovery_plan_name, input, custom_headers = nil)
      response = update_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [UpdateRecoveryPlanInput] Update recovery plan input
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def update_async(recovery_plan_name, input, custom_headers = nil)
      # Send request
      promise = begin_update_async(recovery_plan_name, input, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Gets the list of recovery plans.
    #
    # Lists the recovery plans in the vault.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<RecoveryPlan>] operation results.
    #
    def list(custom_headers = nil)
      first_page = list_as_lazy(custom_headers)
      first_page.get_all_items
    end

    #
    # Gets the list of recovery plans.
    #
    # Lists the recovery plans in the vault.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(custom_headers = nil)
      list_async(custom_headers).value!
    end

    #
    # Gets the list of recovery plans.
    #
    # Lists the recovery plans in the vault.
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlanCollection.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Execute reprotect of the recovery plan.
    #
    # The operation to reprotect(reverse replicate) a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def begin_reprotect(recovery_plan_name, custom_headers = nil)
      response = begin_reprotect_async(recovery_plan_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Execute reprotect of the recovery plan.
    #
    # The operation to reprotect(reverse replicate) a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_reprotect_with_http_info(recovery_plan_name, custom_headers = nil)
      begin_reprotect_async(recovery_plan_name, custom_headers).value!
    end

    #
    # Execute reprotect of the recovery plan.
    #
    # The operation to reprotect(reverse replicate) a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_reprotect_async(recovery_plan_name, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'recovery_plan_name is nil' if recovery_plan_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/reProtect'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id,'recoveryPlanName' => recovery_plan_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Execute commit failover of the recovery plan.
    #
    # The operation to commit the fail over of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def begin_failover_commit(recovery_plan_name, custom_headers = nil)
      response = begin_failover_commit_async(recovery_plan_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Execute commit failover of the recovery plan.
    #
    # The operation to commit the fail over of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_failover_commit_with_http_info(recovery_plan_name, custom_headers = nil)
      begin_failover_commit_async(recovery_plan_name, custom_headers).value!
    end

    #
    # Execute commit failover of the recovery plan.
    #
    # The operation to commit the fail over of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_failover_commit_async(recovery_plan_name, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'recovery_plan_name is nil' if recovery_plan_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCommit'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id,'recoveryPlanName' => recovery_plan_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Execute test failover cleanup of the recovery plan.
    #
    # The operation to cleanup test failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanTestFailoverCleanupInput] Test failover cleanup
    # input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def begin_test_failover_cleanup(recovery_plan_name, input, custom_headers = nil)
      response = begin_test_failover_cleanup_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Execute test failover cleanup of the recovery plan.
    #
    # The operation to cleanup test failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanTestFailoverCleanupInput] Test failover cleanup
    # input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_test_failover_cleanup_with_http_info(recovery_plan_name, input, custom_headers = nil)
      begin_test_failover_cleanup_async(recovery_plan_name, input, custom_headers).value!
    end

    #
    # Execute test failover cleanup of the recovery plan.
    #
    # The operation to cleanup test failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanTestFailoverCleanupInput] Test failover cleanup
    # input.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_test_failover_cleanup_async(recovery_plan_name, input, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'recovery_plan_name is nil' if recovery_plan_name.nil?
      fail ArgumentError, 'input is nil' if input.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlanTestFailoverCleanupInput.mapper()
      request_content = @client.serialize(request_mapper,  input)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailoverCleanup'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id,'recoveryPlanName' => recovery_plan_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Execute test failover of the recovery plan.
    #
    # The operation to start the test failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanTestFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def begin_test_failover(recovery_plan_name, input, custom_headers = nil)
      response = begin_test_failover_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Execute test failover of the recovery plan.
    #
    # The operation to start the test failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanTestFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_test_failover_with_http_info(recovery_plan_name, input, custom_headers = nil)
      begin_test_failover_async(recovery_plan_name, input, custom_headers).value!
    end

    #
    # Execute test failover of the recovery plan.
    #
    # The operation to start the test failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanTestFailoverInput] Failover input.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_test_failover_async(recovery_plan_name, input, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'recovery_plan_name is nil' if recovery_plan_name.nil?
      fail ArgumentError, 'input is nil' if input.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlanTestFailoverInput.mapper()
      request_content = @client.serialize(request_mapper,  input)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id,'recoveryPlanName' => recovery_plan_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Execute unplanned failover of the recovery plan.
    #
    # The operation to start the failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanUnplannedFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def begin_unplanned_failover(recovery_plan_name, input, custom_headers = nil)
      response = begin_unplanned_failover_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Execute unplanned failover of the recovery plan.
    #
    # The operation to start the failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanUnplannedFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_unplanned_failover_with_http_info(recovery_plan_name, input, custom_headers = nil)
      begin_unplanned_failover_async(recovery_plan_name, input, custom_headers).value!
    end

    #
    # Execute unplanned failover of the recovery plan.
    #
    # The operation to start the failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanUnplannedFailoverInput] Failover input.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_unplanned_failover_async(recovery_plan_name, input, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'recovery_plan_name is nil' if recovery_plan_name.nil?
      fail ArgumentError, 'input is nil' if input.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlanUnplannedFailoverInput.mapper()
      request_content = @client.serialize(request_mapper,  input)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/unplannedFailover'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id,'recoveryPlanName' => recovery_plan_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Execute planned failover of the recovery plan.
    #
    # The operation to start the planned failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanPlannedFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def begin_planned_failover(recovery_plan_name, input, custom_headers = nil)
      response = begin_planned_failover_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Execute planned failover of the recovery plan.
    #
    # The operation to start the planned failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanPlannedFailoverInput] Failover input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_planned_failover_with_http_info(recovery_plan_name, input, custom_headers = nil)
      begin_planned_failover_async(recovery_plan_name, input, custom_headers).value!
    end

    #
    # Execute planned failover of the recovery plan.
    #
    # The operation to start the planned failover of a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [RecoveryPlanPlannedFailoverInput] Failover input.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_planned_failover_async(recovery_plan_name, input, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'recovery_plan_name is nil' if recovery_plan_name.nil?
      fail ArgumentError, 'input is nil' if input.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlanPlannedFailoverInput.mapper()
      request_content = @client.serialize(request_mapper,  input)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/plannedFailover'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id,'recoveryPlanName' => recovery_plan_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates a recovery plan with the given details.
    #
    # The operation to create a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [CreateRecoveryPlanInput] Recovery Plan creation input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def begin_create(recovery_plan_name, input, custom_headers = nil)
      response = begin_create_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates a recovery plan with the given details.
    #
    # The operation to create a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [CreateRecoveryPlanInput] Recovery Plan creation input.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_create_with_http_info(recovery_plan_name, input, custom_headers = nil)
      begin_create_async(recovery_plan_name, input, custom_headers).value!
    end

    #
    # Creates a recovery plan with the given details.
    #
    # The operation to create a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [CreateRecoveryPlanInput] Recovery Plan creation input.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_create_async(recovery_plan_name, input, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'recovery_plan_name is nil' if recovery_plan_name.nil?
      fail ArgumentError, 'input is nil' if input.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::CreateRecoveryPlanInput.mapper()
      request_content = @client.serialize(request_mapper,  input)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id,'recoveryPlanName' => recovery_plan_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes the specified recovery plan.
    #
    # Delete a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete(recovery_plan_name, custom_headers = nil)
      response = begin_delete_async(recovery_plan_name, custom_headers).value!
      nil
    end

    #
    # Deletes the specified recovery plan.
    #
    # Delete a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_with_http_info(recovery_plan_name, custom_headers = nil)
      begin_delete_async(recovery_plan_name, custom_headers).value!
    end

    #
    # Deletes the specified recovery plan.
    #
    # Delete a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async(recovery_plan_name, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'recovery_plan_name is nil' if recovery_plan_name.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id,'recoveryPlanName' => recovery_plan_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Updates the given recovery plan.
    #
    # The operation to update a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [UpdateRecoveryPlanInput] Update recovery plan input
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlan] operation results.
    #
    def begin_update(recovery_plan_name, input, custom_headers = nil)
      response = begin_update_async(recovery_plan_name, input, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates the given recovery plan.
    #
    # The operation to update a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [UpdateRecoveryPlanInput] Update recovery plan input
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_update_with_http_info(recovery_plan_name, input, custom_headers = nil)
      begin_update_async(recovery_plan_name, input, custom_headers).value!
    end

    #
    # Updates the given recovery plan.
    #
    # The operation to update a recovery plan.
    #
    # @param recovery_plan_name [String] Recovery plan name.
    # @param input [UpdateRecoveryPlanInput] Update recovery plan input
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_update_async(recovery_plan_name, input, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.resource_name is nil' if @client.resource_name.nil?
      fail ArgumentError, '@client.resource_group_name is nil' if @client.resource_group_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'recovery_plan_name is nil' if recovery_plan_name.nil?
      fail ArgumentError, 'input is nil' if input.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::UpdateRecoveryPlanInput.mapper()
      request_content = @client.serialize(request_mapper,  input)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceName' => @client.resource_name,'resourceGroupName' => @client.resource_group_name,'subscriptionId' => @client.subscription_id,'recoveryPlanName' => recovery_plan_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlan.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the list of recovery plans.
    #
    # Lists the recovery plans in the vault.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlanCollection] operation results.
    #
    def list_next(next_page_link, custom_headers = nil)
      response = list_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the list of recovery plans.
    #
    # Lists the recovery plans in the vault.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers = nil)
      list_next_async(next_page_link, custom_headers).value!
    end

    #
    # Gets the list of recovery plans.
    #
    # Lists the recovery plans in the vault.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::ARM::RecoveryServicesSiteRecovery::Models::RecoveryPlanCollection.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the list of recovery plans.
    #
    # Lists the recovery plans in the vault.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RecoveryPlanCollection] which provide lazy access to pages of the
    # response.
    #
    def list_as_lazy(custom_headers = nil)
      response = list_async(custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

  end
end
