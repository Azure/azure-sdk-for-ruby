# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::StorageSync::Mgmt::V2019_02_01
  module Models
    #
    # Server Endpoint sync status
    #
    class ServerEndpointSyncStatus

      include MsRestAzure

      # @return [Enum] Download Health Status. Possible values include:
      # 'Healthy', 'Error', 'SyncBlockedForRestore',
      # 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'
      attr_accessor :download_health

      # @return [Enum] Upload Health Status. Possible values include:
      # 'Healthy', 'Error', 'SyncBlockedForRestore',
      # 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'
      attr_accessor :upload_health

      # @return [Enum] Combined Health Status. Possible values include:
      # 'Healthy', 'Error', 'SyncBlockedForRestore',
      # 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'
      attr_accessor :combined_health

      # @return [Enum] Sync activity. Possible values include: 'Upload',
      # 'Download', 'UploadAndDownload'
      attr_accessor :sync_activity

      # @return [Integer] Total count of persistent files not syncing (combined
      # upload + download). Reserved for future use.
      attr_accessor :total_persistent_files_not_syncing_count

      # @return [DateTime] Last Updated Timestamp
      attr_accessor :last_updated_timestamp

      # @return [SyncSessionStatus] Upload Status
      attr_accessor :upload_status

      # @return [SyncSessionStatus] Download Status
      attr_accessor :download_status

      # @return [SyncActivityStatus] Upload sync activity
      attr_accessor :upload_activity

      # @return [SyncActivityStatus] Download sync activity
      attr_accessor :download_activity

      # @return [Enum] Offline Data Transfer State. Possible values include:
      # 'InProgress', 'Stopping', 'NotRunning', 'Complete'
      attr_accessor :offline_data_transfer_status


      #
      # Mapper for ServerEndpointSyncStatus class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'ServerEndpointSyncStatus',
          type: {
            name: 'Composite',
            class_name: 'ServerEndpointSyncStatus',
            model_properties: {
              download_health: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'downloadHealth',
                type: {
                  name: 'String'
                }
              },
              upload_health: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'uploadHealth',
                type: {
                  name: 'String'
                }
              },
              combined_health: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'combinedHealth',
                type: {
                  name: 'String'
                }
              },
              sync_activity: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'syncActivity',
                type: {
                  name: 'String'
                }
              },
              total_persistent_files_not_syncing_count: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'totalPersistentFilesNotSyncingCount',
                type: {
                  name: 'Number'
                }
              },
              last_updated_timestamp: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'lastUpdatedTimestamp',
                type: {
                  name: 'DateTime'
                }
              },
              upload_status: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'uploadStatus',
                type: {
                  name: 'Composite',
                  class_name: 'SyncSessionStatus'
                }
              },
              download_status: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'downloadStatus',
                type: {
                  name: 'Composite',
                  class_name: 'SyncSessionStatus'
                }
              },
              upload_activity: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'uploadActivity',
                type: {
                  name: 'Composite',
                  class_name: 'SyncActivityStatus'
                }
              },
              download_activity: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'downloadActivity',
                type: {
                  name: 'Composite',
                  class_name: 'SyncActivityStatus'
                }
              },
              offline_data_transfer_status: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'offlineDataTransferStatus',
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
