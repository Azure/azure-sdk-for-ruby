# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Policy::Mgmt::V2019_06_01
  #
  # To manage and control access to your resources, you can define customized
  # policies and assign them at a scope.
  #
  class PolicyAssignments
    include MsRestAzure

    #
    # Creates and initializes a new instance of the PolicyAssignments class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [PolicyClient] reference to the PolicyClient
    attr_reader :client

    #
    # Deletes a policy assignment.
    #
    # This operation deletes a policy assignment, given its name and the scope it
    # was created in. The scope of a policy assignment is the part of its ID
    # preceding
    # '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    #
    # @param scope [String] The scope of the policy assignment. Valid scopes are:
    # management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # @param policy_assignment_name [String] The name of the policy assignment to
    # delete.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignment] operation results.
    #
    def delete(scope, policy_assignment_name, custom_headers:nil)
      response = delete_async(scope, policy_assignment_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a policy assignment.
    #
    # This operation deletes a policy assignment, given its name and the scope it
    # was created in. The scope of a policy assignment is the part of its ID
    # preceding
    # '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    #
    # @param scope [String] The scope of the policy assignment. Valid scopes are:
    # management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # @param policy_assignment_name [String] The name of the policy assignment to
    # delete.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(scope, policy_assignment_name, custom_headers:nil)
      delete_async(scope, policy_assignment_name, custom_headers:custom_headers).value!
    end

    #
    # Deletes a policy assignment.
    #
    # This operation deletes a policy assignment, given its name and the scope it
    # was created in. The scope of a policy assignment is the part of its ID
    # preceding
    # '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    #
    # @param scope [String] The scope of the policy assignment. Valid scopes are:
    # management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # @param policy_assignment_name [String] The name of the policy assignment to
    # delete.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(scope, policy_assignment_name, custom_headers:nil)
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, 'policy_assignment_name is nil' if policy_assignment_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'policyAssignmentName' => policy_assignment_name},
          skip_encoding_path_params: {'scope' => scope},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignment.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates or updates a policy assignment.
    #
    # This operation creates or updates a policy assignment with the given scope
    # and name. Policy assignments apply to all resources contained within their
    # scope. For example, when you assign a policy at resource group scope, that
    # policy applies to all resources in the group.
    #
    # @param scope [String] The scope of the policy assignment. Valid scopes are:
    # management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # @param policy_assignment_name [String] The name of the policy assignment.
    # @param parameters [PolicyAssignment] Parameters for the policy assignment.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignment] operation results.
    #
    def create(scope, policy_assignment_name, parameters, custom_headers:nil)
      response = create_async(scope, policy_assignment_name, parameters, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates or updates a policy assignment.
    #
    # This operation creates or updates a policy assignment with the given scope
    # and name. Policy assignments apply to all resources contained within their
    # scope. For example, when you assign a policy at resource group scope, that
    # policy applies to all resources in the group.
    #
    # @param scope [String] The scope of the policy assignment. Valid scopes are:
    # management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # @param policy_assignment_name [String] The name of the policy assignment.
    # @param parameters [PolicyAssignment] Parameters for the policy assignment.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_with_http_info(scope, policy_assignment_name, parameters, custom_headers:nil)
      create_async(scope, policy_assignment_name, parameters, custom_headers:custom_headers).value!
    end

    #
    # Creates or updates a policy assignment.
    #
    # This operation creates or updates a policy assignment with the given scope
    # and name. Policy assignments apply to all resources contained within their
    # scope. For example, when you assign a policy at resource group scope, that
    # policy applies to all resources in the group.
    #
    # @param scope [String] The scope of the policy assignment. Valid scopes are:
    # management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # @param policy_assignment_name [String] The name of the policy assignment.
    # @param parameters [PolicyAssignment] Parameters for the policy assignment.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_async(scope, policy_assignment_name, parameters, custom_headers:nil)
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, 'policy_assignment_name is nil' if policy_assignment_name.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignment.mapper()
      request_content = @client.serialize(request_mapper,  parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'policyAssignmentName' => policy_assignment_name},
          skip_encoding_path_params: {'scope' => scope},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignment.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves a policy assignment.
    #
    # This operation retrieves a single policy assignment, given its name and the
    # scope it was created at.
    #
    # @param scope [String] The scope of the policy assignment. Valid scopes are:
    # management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # @param policy_assignment_name [String] The name of the policy assignment to
    # get.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignment] operation results.
    #
    def get(scope, policy_assignment_name, custom_headers:nil)
      response = get_async(scope, policy_assignment_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves a policy assignment.
    #
    # This operation retrieves a single policy assignment, given its name and the
    # scope it was created at.
    #
    # @param scope [String] The scope of the policy assignment. Valid scopes are:
    # management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # @param policy_assignment_name [String] The name of the policy assignment to
    # get.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(scope, policy_assignment_name, custom_headers:nil)
      get_async(scope, policy_assignment_name, custom_headers:custom_headers).value!
    end

    #
    # Retrieves a policy assignment.
    #
    # This operation retrieves a single policy assignment, given its name and the
    # scope it was created at.
    #
    # @param scope [String] The scope of the policy assignment. Valid scopes are:
    # management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # @param policy_assignment_name [String] The name of the policy assignment to
    # get.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(scope, policy_assignment_name, custom_headers:nil)
      fail ArgumentError, 'scope is nil' if scope.nil?
      fail ArgumentError, 'policy_assignment_name is nil' if policy_assignment_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'policyAssignmentName' => policy_assignment_name},
          skip_encoding_path_params: {'scope' => scope},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignment.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves all policy assignments that apply to a resource group.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given resource group in the given subscription that match the optional
    # given $filter. Valid values for $filter are: 'atScope()' or
    # 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered
    # list includes all policy assignments associated with the resource group,
    # including those that apply directly or apply from containing scopes, as well
    # as any applied to resources contained within the resource group. If
    # $filter=atScope() is provided, the returned list includes all policy
    # assignments that apply to the resource group, which is everything in the
    # unfiltered list except those applied to resources contained within the
    # resource group. If $filter=policyDefinitionId eq '{value}' is provided, the
    # returned list includes all policy assignments of the policy definition whose
    # id is {value} that apply to the resource group.
    #
    # @param resource_group_name [String] The name of the resource group that
    # contains policy assignments.
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<PolicyAssignment>] operation results.
    #
    def list_for_resource_group(resource_group_name, filter:nil, custom_headers:nil)
      first_page = list_for_resource_group_as_lazy(resource_group_name, filter:filter, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves all policy assignments that apply to a resource group.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given resource group in the given subscription that match the optional
    # given $filter. Valid values for $filter are: 'atScope()' or
    # 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered
    # list includes all policy assignments associated with the resource group,
    # including those that apply directly or apply from containing scopes, as well
    # as any applied to resources contained within the resource group. If
    # $filter=atScope() is provided, the returned list includes all policy
    # assignments that apply to the resource group, which is everything in the
    # unfiltered list except those applied to resources contained within the
    # resource group. If $filter=policyDefinitionId eq '{value}' is provided, the
    # returned list includes all policy assignments of the policy definition whose
    # id is {value} that apply to the resource group.
    #
    # @param resource_group_name [String] The name of the resource group that
    # contains policy assignments.
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_for_resource_group_with_http_info(resource_group_name, filter:nil, custom_headers:nil)
      list_for_resource_group_async(resource_group_name, filter:filter, custom_headers:custom_headers).value!
    end

    #
    # Retrieves all policy assignments that apply to a resource group.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given resource group in the given subscription that match the optional
    # given $filter. Valid values for $filter are: 'atScope()' or
    # 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered
    # list includes all policy assignments associated with the resource group,
    # including those that apply directly or apply from containing scopes, as well
    # as any applied to resources contained within the resource group. If
    # $filter=atScope() is provided, the returned list includes all policy
    # assignments that apply to the resource group, which is everything in the
    # unfiltered list except those applied to resources contained within the
    # resource group. If $filter=policyDefinitionId eq '{value}' is provided, the
    # returned list includes all policy assignments of the policy definition whose
    # id is {value} that apply to the resource group.
    #
    # @param resource_group_name [String] The name of the resource group that
    # contains policy assignments.
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_for_resource_group_async(resource_group_name, filter:nil, custom_headers:nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MaxLength': '90'" if !resource_group_name.nil? && resource_group_name.length > 90
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MinLength': '1'" if !resource_group_name.nil? && resource_group_name.length < 1
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'Pattern': '^[-\w\._\(\)]+$'" if !resource_group_name.nil? && resource_group_name.match(Regexp.new('^^[-\w\._\(\)]+$$')).nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'subscriptionId' => @client.subscription_id},
          query_params: {'api-version' => @client.api_version},
          skip_encoding_query_params: {'$filter' => filter},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignmentListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves all policy assignments that apply to a resource.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the specified resource in the given resource group and subscription that
    # match the optional given $filter. Valid values for $filter are: 'atScope()'
    # or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
    # unfiltered list includes all policy assignments associated with the resource,
    # including those that apply directly or from all containing scopes, as well as
    # any applied to resources contained within the resource. If $filter=atScope()
    # is provided, the returned list includes all policy assignments that apply to
    # the resource, which is everything in the unfiltered list except those applied
    # to resources contained within the resource. If $filter=policyDefinitionId eq
    # '{value}' is provided, the returned list includes all policy assignments of
    # the policy definition whose id is {value} that apply to the resource. Three
    # parameters plus the resource name are used to identify a specific resource.
    # If the resource is not part of a parent resource (the more common case), the
    # parent resource path should not be provided (or provided as ''). For example
    # a web app could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites',
    # {resourceName} == 'MyWebApp'). If the resource is part of a parent resource,
    # then all parameters should be provided. For example a virtual machine DNS
    # name could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Compute', {parentResourcePath} ==
    # 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
    # {resourceName} == 'MyComputerName'). A convenient alternative to providing
    # the namespace and type name separately is to provide both in the
    # {resourceType} parameter, format: ({resourceProviderNamespace} == '',
    # {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
    # {resourceName} == 'MyWebApp').
    #
    # @param resource_group_name [String] The name of the resource group containing
    # the resource.
    # @param resource_provider_namespace [String] The namespace of the resource
    # provider. For example, the namespace of a virtual machine is
    # Microsoft.Compute (from Microsoft.Compute/virtualMachines)
    # @param parent_resource_path [String] The parent resource path. Use empty
    # string if there is none.
    # @param resource_type [String] The resource type name. For example the type
    # name of a web app is 'sites' (from Microsoft.Web/sites).
    # @param resource_name [String] The name of the resource.
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<PolicyAssignment>] operation results.
    #
    def list_for_resource(resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, filter:nil, custom_headers:nil)
      first_page = list_for_resource_as_lazy(resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, filter:filter, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves all policy assignments that apply to a resource.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the specified resource in the given resource group and subscription that
    # match the optional given $filter. Valid values for $filter are: 'atScope()'
    # or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
    # unfiltered list includes all policy assignments associated with the resource,
    # including those that apply directly or from all containing scopes, as well as
    # any applied to resources contained within the resource. If $filter=atScope()
    # is provided, the returned list includes all policy assignments that apply to
    # the resource, which is everything in the unfiltered list except those applied
    # to resources contained within the resource. If $filter=policyDefinitionId eq
    # '{value}' is provided, the returned list includes all policy assignments of
    # the policy definition whose id is {value} that apply to the resource. Three
    # parameters plus the resource name are used to identify a specific resource.
    # If the resource is not part of a parent resource (the more common case), the
    # parent resource path should not be provided (or provided as ''). For example
    # a web app could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites',
    # {resourceName} == 'MyWebApp'). If the resource is part of a parent resource,
    # then all parameters should be provided. For example a virtual machine DNS
    # name could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Compute', {parentResourcePath} ==
    # 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
    # {resourceName} == 'MyComputerName'). A convenient alternative to providing
    # the namespace and type name separately is to provide both in the
    # {resourceType} parameter, format: ({resourceProviderNamespace} == '',
    # {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
    # {resourceName} == 'MyWebApp').
    #
    # @param resource_group_name [String] The name of the resource group containing
    # the resource.
    # @param resource_provider_namespace [String] The namespace of the resource
    # provider. For example, the namespace of a virtual machine is
    # Microsoft.Compute (from Microsoft.Compute/virtualMachines)
    # @param parent_resource_path [String] The parent resource path. Use empty
    # string if there is none.
    # @param resource_type [String] The resource type name. For example the type
    # name of a web app is 'sites' (from Microsoft.Web/sites).
    # @param resource_name [String] The name of the resource.
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_for_resource_with_http_info(resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, filter:nil, custom_headers:nil)
      list_for_resource_async(resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, filter:filter, custom_headers:custom_headers).value!
    end

    #
    # Retrieves all policy assignments that apply to a resource.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the specified resource in the given resource group and subscription that
    # match the optional given $filter. Valid values for $filter are: 'atScope()'
    # or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
    # unfiltered list includes all policy assignments associated with the resource,
    # including those that apply directly or from all containing scopes, as well as
    # any applied to resources contained within the resource. If $filter=atScope()
    # is provided, the returned list includes all policy assignments that apply to
    # the resource, which is everything in the unfiltered list except those applied
    # to resources contained within the resource. If $filter=policyDefinitionId eq
    # '{value}' is provided, the returned list includes all policy assignments of
    # the policy definition whose id is {value} that apply to the resource. Three
    # parameters plus the resource name are used to identify a specific resource.
    # If the resource is not part of a parent resource (the more common case), the
    # parent resource path should not be provided (or provided as ''). For example
    # a web app could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites',
    # {resourceName} == 'MyWebApp'). If the resource is part of a parent resource,
    # then all parameters should be provided. For example a virtual machine DNS
    # name could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Compute', {parentResourcePath} ==
    # 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
    # {resourceName} == 'MyComputerName'). A convenient alternative to providing
    # the namespace and type name separately is to provide both in the
    # {resourceType} parameter, format: ({resourceProviderNamespace} == '',
    # {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
    # {resourceName} == 'MyWebApp').
    #
    # @param resource_group_name [String] The name of the resource group containing
    # the resource.
    # @param resource_provider_namespace [String] The namespace of the resource
    # provider. For example, the namespace of a virtual machine is
    # Microsoft.Compute (from Microsoft.Compute/virtualMachines)
    # @param parent_resource_path [String] The parent resource path. Use empty
    # string if there is none.
    # @param resource_type [String] The resource type name. For example the type
    # name of a web app is 'sites' (from Microsoft.Web/sites).
    # @param resource_name [String] The name of the resource.
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_for_resource_async(resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, filter:nil, custom_headers:nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MaxLength': '90'" if !resource_group_name.nil? && resource_group_name.length > 90
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MinLength': '1'" if !resource_group_name.nil? && resource_group_name.length < 1
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'Pattern': '^[-\w\._\(\)]+$'" if !resource_group_name.nil? && resource_group_name.match(Regexp.new('^^[-\w\._\(\)]+$$')).nil?
      fail ArgumentError, 'resource_provider_namespace is nil' if resource_provider_namespace.nil?
      fail ArgumentError, 'parent_resource_path is nil' if parent_resource_path.nil?
      fail ArgumentError, 'resource_type is nil' if resource_type.nil?
      fail ArgumentError, 'resource_name is nil' if resource_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'resourceProviderNamespace' => resource_provider_namespace,'resourceName' => resource_name,'subscriptionId' => @client.subscription_id},
          skip_encoding_path_params: {'parentResourcePath' => parent_resource_path,'resourceType' => resource_type},
          query_params: {'$filter' => filter,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignmentListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves all policy assignments that apply to a subscription.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given subscription that match the optional given $filter. Valid values
    # for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter
    # is not provided, the unfiltered list includes all policy assignments
    # associated with the subscription, including those that apply directly or from
    # management groups that contain the given subscription, as well as any applied
    # to objects contained within the subscription. If $filter=atScope() is
    # provided, the returned list includes all policy assignments that apply to the
    # subscription, which is everything in the unfiltered list except those applied
    # to objects contained within the subscription. If $filter=policyDefinitionId
    # eq '{value}' is provided, the returned list includes all policy assignments
    # of the policy definition whose id is {value}.
    #
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<PolicyAssignment>] operation results.
    #
    def list(filter:nil, custom_headers:nil)
      first_page = list_as_lazy(filter:filter, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Retrieves all policy assignments that apply to a subscription.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given subscription that match the optional given $filter. Valid values
    # for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter
    # is not provided, the unfiltered list includes all policy assignments
    # associated with the subscription, including those that apply directly or from
    # management groups that contain the given subscription, as well as any applied
    # to objects contained within the subscription. If $filter=atScope() is
    # provided, the returned list includes all policy assignments that apply to the
    # subscription, which is everything in the unfiltered list except those applied
    # to objects contained within the subscription. If $filter=policyDefinitionId
    # eq '{value}' is provided, the returned list includes all policy assignments
    # of the policy definition whose id is {value}.
    #
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(filter:nil, custom_headers:nil)
      list_async(filter:filter, custom_headers:custom_headers).value!
    end

    #
    # Retrieves all policy assignments that apply to a subscription.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given subscription that match the optional given $filter. Valid values
    # for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter
    # is not provided, the unfiltered list includes all policy assignments
    # associated with the subscription, including those that apply directly or from
    # management groups that contain the given subscription, as well as any applied
    # to objects contained within the subscription. If $filter=atScope() is
    # provided, the returned list includes all policy assignments that apply to the
    # subscription, which is everything in the unfiltered list except those applied
    # to objects contained within the subscription. If $filter=policyDefinitionId
    # eq '{value}' is provided, the returned list includes all policy assignments
    # of the policy definition whose id is {value}.
    #
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(filter:nil, custom_headers:nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id},
          query_params: {'$filter' => filter,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignmentListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a policy assignment.
    #
    # This operation deletes the policy with the given ID. Policy assignment IDs
    # have this format:
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # Valid formats for {scope} are:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'
    # (management group), '/subscriptions/{subscriptionId}' (subscription),
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
    # (resource group), or
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # (resource).
    #
    # @param policy_assignment_id [String] The ID of the policy assignment to
    # delete. Use the format
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignment] operation results.
    #
    def delete_by_id(policy_assignment_id, custom_headers:nil)
      response = delete_by_id_async(policy_assignment_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Deletes a policy assignment.
    #
    # This operation deletes the policy with the given ID. Policy assignment IDs
    # have this format:
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # Valid formats for {scope} are:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'
    # (management group), '/subscriptions/{subscriptionId}' (subscription),
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
    # (resource group), or
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # (resource).
    #
    # @param policy_assignment_id [String] The ID of the policy assignment to
    # delete. Use the format
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_by_id_with_http_info(policy_assignment_id, custom_headers:nil)
      delete_by_id_async(policy_assignment_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a policy assignment.
    #
    # This operation deletes the policy with the given ID. Policy assignment IDs
    # have this format:
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # Valid formats for {scope} are:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'
    # (management group), '/subscriptions/{subscriptionId}' (subscription),
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
    # (resource group), or
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
    # (resource).
    #
    # @param policy_assignment_id [String] The ID of the policy assignment to
    # delete. Use the format
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_by_id_async(policy_assignment_id, custom_headers:nil)
      fail ArgumentError, 'policy_assignment_id is nil' if policy_assignment_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{policyAssignmentId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'policyAssignmentId' => policy_assignment_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignment.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates or updates a policy assignment.
    #
    # This operation creates or updates the policy assignment with the given ID.
    # Policy assignments made on a scope apply to all resources contained in that
    # scope. For example, when you assign a policy to a resource group that policy
    # applies to all resources in the group. Policy assignment IDs have this
    # format:
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # Valid scopes are: management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    #
    # @param policy_assignment_id [String] The ID of the policy assignment to
    # create. Use the format
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # @param parameters [PolicyAssignment] Parameters for policy assignment.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignment] operation results.
    #
    def create_by_id(policy_assignment_id, parameters, custom_headers:nil)
      response = create_by_id_async(policy_assignment_id, parameters, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates or updates a policy assignment.
    #
    # This operation creates or updates the policy assignment with the given ID.
    # Policy assignments made on a scope apply to all resources contained in that
    # scope. For example, when you assign a policy to a resource group that policy
    # applies to all resources in the group. Policy assignment IDs have this
    # format:
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # Valid scopes are: management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    #
    # @param policy_assignment_id [String] The ID of the policy assignment to
    # create. Use the format
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # @param parameters [PolicyAssignment] Parameters for policy assignment.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_by_id_with_http_info(policy_assignment_id, parameters, custom_headers:nil)
      create_by_id_async(policy_assignment_id, parameters, custom_headers:custom_headers).value!
    end

    #
    # Creates or updates a policy assignment.
    #
    # This operation creates or updates the policy assignment with the given ID.
    # Policy assignments made on a scope apply to all resources contained in that
    # scope. For example, when you assign a policy to a resource group that policy
    # applies to all resources in the group. Policy assignment IDs have this
    # format:
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # Valid scopes are: management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    #
    # @param policy_assignment_id [String] The ID of the policy assignment to
    # create. Use the format
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # @param parameters [PolicyAssignment] Parameters for policy assignment.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_by_id_async(policy_assignment_id, parameters, custom_headers:nil)
      fail ArgumentError, 'policy_assignment_id is nil' if policy_assignment_id.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignment.mapper()
      request_content = @client.serialize(request_mapper,  parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = '{policyAssignmentId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'policyAssignmentId' => policy_assignment_id},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignment.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves the policy assignment with the given ID.
    #
    # The operation retrieves the policy assignment with the given ID. Policy
    # assignment IDs have this format:
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # Valid scopes are: management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    #
    # @param policy_assignment_id [String] The ID of the policy assignment to get.
    # Use the format
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignment] operation results.
    #
    def get_by_id(policy_assignment_id, custom_headers:nil)
      response = get_by_id_async(policy_assignment_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves the policy assignment with the given ID.
    #
    # The operation retrieves the policy assignment with the given ID. Policy
    # assignment IDs have this format:
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # Valid scopes are: management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    #
    # @param policy_assignment_id [String] The ID of the policy assignment to get.
    # Use the format
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_by_id_with_http_info(policy_assignment_id, custom_headers:nil)
      get_by_id_async(policy_assignment_id, custom_headers:custom_headers).value!
    end

    #
    # Retrieves the policy assignment with the given ID.
    #
    # The operation retrieves the policy assignment with the given ID. Policy
    # assignment IDs have this format:
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # Valid scopes are: management group (format:
    # '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
    # subscription (format: '/subscriptions/{subscriptionId}'), resource group
    # (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
    # resource (format:
    # '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    #
    # @param policy_assignment_id [String] The ID of the policy assignment to get.
    # Use the format
    # '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_by_id_async(policy_assignment_id, custom_headers:nil)
      fail ArgumentError, 'policy_assignment_id is nil' if policy_assignment_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{policyAssignmentId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'policyAssignmentId' => policy_assignment_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignment.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves all policy assignments that apply to a resource group.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given resource group in the given subscription that match the optional
    # given $filter. Valid values for $filter are: 'atScope()' or
    # 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered
    # list includes all policy assignments associated with the resource group,
    # including those that apply directly or apply from containing scopes, as well
    # as any applied to resources contained within the resource group. If
    # $filter=atScope() is provided, the returned list includes all policy
    # assignments that apply to the resource group, which is everything in the
    # unfiltered list except those applied to resources contained within the
    # resource group. If $filter=policyDefinitionId eq '{value}' is provided, the
    # returned list includes all policy assignments of the policy definition whose
    # id is {value} that apply to the resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignmentListResult] operation results.
    #
    def list_for_resource_group_next(next_page_link, custom_headers:nil)
      response = list_for_resource_group_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves all policy assignments that apply to a resource group.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given resource group in the given subscription that match the optional
    # given $filter. Valid values for $filter are: 'atScope()' or
    # 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered
    # list includes all policy assignments associated with the resource group,
    # including those that apply directly or apply from containing scopes, as well
    # as any applied to resources contained within the resource group. If
    # $filter=atScope() is provided, the returned list includes all policy
    # assignments that apply to the resource group, which is everything in the
    # unfiltered list except those applied to resources contained within the
    # resource group. If $filter=policyDefinitionId eq '{value}' is provided, the
    # returned list includes all policy assignments of the policy definition whose
    # id is {value} that apply to the resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_for_resource_group_next_with_http_info(next_page_link, custom_headers:nil)
      list_for_resource_group_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Retrieves all policy assignments that apply to a resource group.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given resource group in the given subscription that match the optional
    # given $filter. Valid values for $filter are: 'atScope()' or
    # 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered
    # list includes all policy assignments associated with the resource group,
    # including those that apply directly or apply from containing scopes, as well
    # as any applied to resources contained within the resource group. If
    # $filter=atScope() is provided, the returned list includes all policy
    # assignments that apply to the resource group, which is everything in the
    # unfiltered list except those applied to resources contained within the
    # resource group. If $filter=policyDefinitionId eq '{value}' is provided, the
    # returned list includes all policy assignments of the policy definition whose
    # id is {value} that apply to the resource group.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_for_resource_group_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignmentListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves all policy assignments that apply to a resource.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the specified resource in the given resource group and subscription that
    # match the optional given $filter. Valid values for $filter are: 'atScope()'
    # or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
    # unfiltered list includes all policy assignments associated with the resource,
    # including those that apply directly or from all containing scopes, as well as
    # any applied to resources contained within the resource. If $filter=atScope()
    # is provided, the returned list includes all policy assignments that apply to
    # the resource, which is everything in the unfiltered list except those applied
    # to resources contained within the resource. If $filter=policyDefinitionId eq
    # '{value}' is provided, the returned list includes all policy assignments of
    # the policy definition whose id is {value} that apply to the resource. Three
    # parameters plus the resource name are used to identify a specific resource.
    # If the resource is not part of a parent resource (the more common case), the
    # parent resource path should not be provided (or provided as ''). For example
    # a web app could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites',
    # {resourceName} == 'MyWebApp'). If the resource is part of a parent resource,
    # then all parameters should be provided. For example a virtual machine DNS
    # name could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Compute', {parentResourcePath} ==
    # 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
    # {resourceName} == 'MyComputerName'). A convenient alternative to providing
    # the namespace and type name separately is to provide both in the
    # {resourceType} parameter, format: ({resourceProviderNamespace} == '',
    # {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
    # {resourceName} == 'MyWebApp').
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignmentListResult] operation results.
    #
    def list_for_resource_next(next_page_link, custom_headers:nil)
      response = list_for_resource_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves all policy assignments that apply to a resource.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the specified resource in the given resource group and subscription that
    # match the optional given $filter. Valid values for $filter are: 'atScope()'
    # or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
    # unfiltered list includes all policy assignments associated with the resource,
    # including those that apply directly or from all containing scopes, as well as
    # any applied to resources contained within the resource. If $filter=atScope()
    # is provided, the returned list includes all policy assignments that apply to
    # the resource, which is everything in the unfiltered list except those applied
    # to resources contained within the resource. If $filter=policyDefinitionId eq
    # '{value}' is provided, the returned list includes all policy assignments of
    # the policy definition whose id is {value} that apply to the resource. Three
    # parameters plus the resource name are used to identify a specific resource.
    # If the resource is not part of a parent resource (the more common case), the
    # parent resource path should not be provided (or provided as ''). For example
    # a web app could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites',
    # {resourceName} == 'MyWebApp'). If the resource is part of a parent resource,
    # then all parameters should be provided. For example a virtual machine DNS
    # name could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Compute', {parentResourcePath} ==
    # 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
    # {resourceName} == 'MyComputerName'). A convenient alternative to providing
    # the namespace and type name separately is to provide both in the
    # {resourceType} parameter, format: ({resourceProviderNamespace} == '',
    # {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
    # {resourceName} == 'MyWebApp').
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_for_resource_next_with_http_info(next_page_link, custom_headers:nil)
      list_for_resource_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Retrieves all policy assignments that apply to a resource.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the specified resource in the given resource group and subscription that
    # match the optional given $filter. Valid values for $filter are: 'atScope()'
    # or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
    # unfiltered list includes all policy assignments associated with the resource,
    # including those that apply directly or from all containing scopes, as well as
    # any applied to resources contained within the resource. If $filter=atScope()
    # is provided, the returned list includes all policy assignments that apply to
    # the resource, which is everything in the unfiltered list except those applied
    # to resources contained within the resource. If $filter=policyDefinitionId eq
    # '{value}' is provided, the returned list includes all policy assignments of
    # the policy definition whose id is {value} that apply to the resource. Three
    # parameters plus the resource name are used to identify a specific resource.
    # If the resource is not part of a parent resource (the more common case), the
    # parent resource path should not be provided (or provided as ''). For example
    # a web app could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites',
    # {resourceName} == 'MyWebApp'). If the resource is part of a parent resource,
    # then all parameters should be provided. For example a virtual machine DNS
    # name could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Compute', {parentResourcePath} ==
    # 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
    # {resourceName} == 'MyComputerName'). A convenient alternative to providing
    # the namespace and type name separately is to provide both in the
    # {resourceType} parameter, format: ({resourceProviderNamespace} == '',
    # {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
    # {resourceName} == 'MyWebApp').
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_for_resource_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignmentListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves all policy assignments that apply to a subscription.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given subscription that match the optional given $filter. Valid values
    # for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter
    # is not provided, the unfiltered list includes all policy assignments
    # associated with the subscription, including those that apply directly or from
    # management groups that contain the given subscription, as well as any applied
    # to objects contained within the subscription. If $filter=atScope() is
    # provided, the returned list includes all policy assignments that apply to the
    # subscription, which is everything in the unfiltered list except those applied
    # to objects contained within the subscription. If $filter=policyDefinitionId
    # eq '{value}' is provided, the returned list includes all policy assignments
    # of the policy definition whose id is {value}.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignmentListResult] operation results.
    #
    def list_next(next_page_link, custom_headers:nil)
      response = list_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Retrieves all policy assignments that apply to a subscription.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given subscription that match the optional given $filter. Valid values
    # for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter
    # is not provided, the unfiltered list includes all policy assignments
    # associated with the subscription, including those that apply directly or from
    # management groups that contain the given subscription, as well as any applied
    # to objects contained within the subscription. If $filter=atScope() is
    # provided, the returned list includes all policy assignments that apply to the
    # subscription, which is everything in the unfiltered list except those applied
    # to objects contained within the subscription. If $filter=policyDefinitionId
    # eq '{value}' is provided, the returned list includes all policy assignments
    # of the policy definition whose id is {value}.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers:nil)
      list_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Retrieves all policy assignments that apply to a subscription.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given subscription that match the optional given $filter. Valid values
    # for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter
    # is not provided, the unfiltered list includes all policy assignments
    # associated with the subscription, including those that apply directly or from
    # management groups that contain the given subscription, as well as any applied
    # to objects contained within the subscription. If $filter=atScope() is
    # provided, the returned list includes all policy assignments that apply to the
    # subscription, which is everything in the unfiltered list except those applied
    # to objects contained within the subscription. If $filter=policyDefinitionId
    # eq '{value}' is provided, the returned list includes all policy assignments
    # of the policy definition whose id is {value}.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Policy::Mgmt::V2019_06_01::Models::PolicyAssignmentListResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Retrieves all policy assignments that apply to a resource group.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given resource group in the given subscription that match the optional
    # given $filter. Valid values for $filter are: 'atScope()' or
    # 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered
    # list includes all policy assignments associated with the resource group,
    # including those that apply directly or apply from containing scopes, as well
    # as any applied to resources contained within the resource group. If
    # $filter=atScope() is provided, the returned list includes all policy
    # assignments that apply to the resource group, which is everything in the
    # unfiltered list except those applied to resources contained within the
    # resource group. If $filter=policyDefinitionId eq '{value}' is provided, the
    # returned list includes all policy assignments of the policy definition whose
    # id is {value} that apply to the resource group.
    #
    # @param resource_group_name [String] The name of the resource group that
    # contains policy assignments.
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignmentListResult] which provide lazy access to pages of
    # the response.
    #
    def list_for_resource_group_as_lazy(resource_group_name, filter:nil, custom_headers:nil)
      response = list_for_resource_group_async(resource_group_name, filter:filter, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_for_resource_group_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

    #
    # Retrieves all policy assignments that apply to a resource.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the specified resource in the given resource group and subscription that
    # match the optional given $filter. Valid values for $filter are: 'atScope()'
    # or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
    # unfiltered list includes all policy assignments associated with the resource,
    # including those that apply directly or from all containing scopes, as well as
    # any applied to resources contained within the resource. If $filter=atScope()
    # is provided, the returned list includes all policy assignments that apply to
    # the resource, which is everything in the unfiltered list except those applied
    # to resources contained within the resource. If $filter=policyDefinitionId eq
    # '{value}' is provided, the returned list includes all policy assignments of
    # the policy definition whose id is {value} that apply to the resource. Three
    # parameters plus the resource name are used to identify a specific resource.
    # If the resource is not part of a parent resource (the more common case), the
    # parent resource path should not be provided (or provided as ''). For example
    # a web app could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites',
    # {resourceName} == 'MyWebApp'). If the resource is part of a parent resource,
    # then all parameters should be provided. For example a virtual machine DNS
    # name could be specified as ({resourceProviderNamespace} ==
    # 'Microsoft.Compute', {parentResourcePath} ==
    # 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
    # {resourceName} == 'MyComputerName'). A convenient alternative to providing
    # the namespace and type name separately is to provide both in the
    # {resourceType} parameter, format: ({resourceProviderNamespace} == '',
    # {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
    # {resourceName} == 'MyWebApp').
    #
    # @param resource_group_name [String] The name of the resource group containing
    # the resource.
    # @param resource_provider_namespace [String] The namespace of the resource
    # provider. For example, the namespace of a virtual machine is
    # Microsoft.Compute (from Microsoft.Compute/virtualMachines)
    # @param parent_resource_path [String] The parent resource path. Use empty
    # string if there is none.
    # @param resource_type [String] The resource type name. For example the type
    # name of a web app is 'sites' (from Microsoft.Web/sites).
    # @param resource_name [String] The name of the resource.
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignmentListResult] which provide lazy access to pages of
    # the response.
    #
    def list_for_resource_as_lazy(resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, filter:nil, custom_headers:nil)
      response = list_for_resource_async(resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, filter:filter, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_for_resource_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

    #
    # Retrieves all policy assignments that apply to a subscription.
    #
    # This operation retrieves the list of all policy assignments associated with
    # the given subscription that match the optional given $filter. Valid values
    # for $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter
    # is not provided, the unfiltered list includes all policy assignments
    # associated with the subscription, including those that apply directly or from
    # management groups that contain the given subscription, as well as any applied
    # to objects contained within the subscription. If $filter=atScope() is
    # provided, the returned list includes all policy assignments that apply to the
    # subscription, which is everything in the unfiltered list except those applied
    # to objects contained within the subscription. If $filter=policyDefinitionId
    # eq '{value}' is provided, the returned list includes all policy assignments
    # of the policy definition whose id is {value}.
    #
    # @param filter [String] The filter to apply on the operation. Valid values for
    # $filter are: 'atScope()' or 'policyDefinitionId eq '{value}''. If $filter is
    # not provided, no filtering is performed.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PolicyAssignmentListResult] which provide lazy access to pages of
    # the response.
    #
    def list_as_lazy(filter:nil, custom_headers:nil)
      response = list_async(filter:filter, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
