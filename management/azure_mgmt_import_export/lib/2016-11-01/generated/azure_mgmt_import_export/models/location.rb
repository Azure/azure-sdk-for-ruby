# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ImportExport::Mgmt::V2016_11_01
  module Models
    #
    # Provides information about an Azure data center location.
    #
    class Location

      include MsRestAzure

      # @return [String] Specifies the resource identifier of the location.
      attr_accessor :id

      # @return [String] Specifies the name of the location. Use List Locations
      # to get all supported locations.
      attr_accessor :name

      # @return [String] Specifies the type of the location.
      attr_accessor :type

      # @return [String] The recipient name to use when shipping the drives to
      # the Azure data center.
      attr_accessor :recipient_name

      # @return [String] The first line of the street address to use when
      # shipping the drives to the Azure data center.
      attr_accessor :street_address1

      # @return [String] The second line of the street address to use when
      # shipping the drives to the Azure data center.
      attr_accessor :street_address2

      # @return [String] The city name to use when shipping the drives to the
      # Azure data center.
      attr_accessor :city

      # @return [String] The state or province to use when shipping the drives
      # to the Azure data center.
      attr_accessor :state_or_province

      # @return [String] The postal code to use when shipping the drives to the
      # Azure data center.
      attr_accessor :postal_code

      # @return [String] The country or region to use when shipping the drives
      # to the Azure data center.
      attr_accessor :country_or_region

      # @return [String] The phone number for the Azure data center.
      attr_accessor :phone

      # @return [Array<String>] A list of carriers that are supported at this
      # location.
      attr_accessor :supported_carriers

      # @return [Array<String>] A list of location IDs that should be used to
      # ship shipping drives to for jobs created against the current location.
      # If the current location is active, it will be part of the list. If it
      # is temporarily closed due to maintenance, this list may contain other
      # locations.
      attr_accessor :alternate_locations


      #
      # Mapper for Location class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'Location',
          type: {
            name: 'Composite',
            class_name: 'Location',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              },
              type: {
                client_side_validation: true,
                required: false,
                serialized_name: 'type',
                type: {
                  name: 'String'
                }
              },
              recipient_name: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.recipientName',
                type: {
                  name: 'String'
                }
              },
              street_address1: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.streetAddress1',
                type: {
                  name: 'String'
                }
              },
              street_address2: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.streetAddress2',
                type: {
                  name: 'String'
                }
              },
              city: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.city',
                type: {
                  name: 'String'
                }
              },
              state_or_province: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.stateOrProvince',
                type: {
                  name: 'String'
                }
              },
              postal_code: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.postalCode',
                type: {
                  name: 'String'
                }
              },
              country_or_region: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.countryOrRegion',
                type: {
                  name: 'String'
                }
              },
              phone: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.phone',
                type: {
                  name: 'String'
                }
              },
              supported_carriers: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.supportedCarriers',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              },
              alternate_locations: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.alternateLocations',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              }
            }
          }
        }
      end
    end
  end
end
