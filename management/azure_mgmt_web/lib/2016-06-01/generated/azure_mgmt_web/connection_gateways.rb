# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Web::Mgmt::V2016_06_01
  #
  # ConnectionGateways
  #
  class ConnectionGateways
    include MsRestAzure

    #
    # Creates and initializes a new instance of the ConnectionGateways class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [LogicAppsManagementClient] reference to the LogicAppsManagementClient
    attr_reader :client

    #
    # Lists all of the connection gateways
    #
    # Gets a list of gateways under a subscription
    #
    # @param subscription_id [String] Subscription Id
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ConnectionGatewayDefinitionCollection] operation results.
    #
    def list(subscription_id, api_version, custom_headers:nil)
      response = list_async(subscription_id, api_version, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all of the connection gateways
    #
    # Gets a list of gateways under a subscription
    #
    # @param subscription_id [String] Subscription Id
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(subscription_id, api_version, custom_headers:nil)
      list_async(subscription_id, api_version, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the connection gateways
    #
    # Gets a list of gateways under a subscription
    #
    # @param subscription_id [String] Subscription Id
    # @param api_version [String] API Version
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(subscription_id, api_version, custom_headers:nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'api_version is nil' if api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.Web/connectionGateways'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Web::Mgmt::V2016_06_01::Models::ConnectionGatewayDefinitionCollection.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Lists all of the connection gateways
    #
    # Gets a list of gateways under a subscription and in a specific resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ConnectionGatewayDefinitionCollection] operation results.
    #
    def list_by_resource_group(subscription_id, resource_group_name, api_version, custom_headers:nil)
      response = list_by_resource_group_async(subscription_id, resource_group_name, api_version, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists all of the connection gateways
    #
    # Gets a list of gateways under a subscription and in a specific resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_by_resource_group_with_http_info(subscription_id, resource_group_name, api_version, custom_headers:nil)
      list_by_resource_group_async(subscription_id, resource_group_name, api_version, custom_headers:custom_headers).value!
    end

    #
    # Lists all of the connection gateways
    #
    # Gets a list of gateways under a subscription and in a specific resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param api_version [String] API Version
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_resource_group_async(subscription_id, resource_group_name, api_version, custom_headers:nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'api_version is nil' if api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'resourceGroupName' => resource_group_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Web::Mgmt::V2016_06_01::Models::ConnectionGatewayDefinitionCollection.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets a specific gateway
    #
    # Gets a specific gateway under a subscription and in a specific resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ConnectionGatewayDefinition] operation results.
    #
    def get(subscription_id, resource_group_name, connection_gateway_name, api_version, custom_headers:nil)
      response = get_async(subscription_id, resource_group_name, connection_gateway_name, api_version, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets a specific gateway
    #
    # Gets a specific gateway under a subscription and in a specific resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(subscription_id, resource_group_name, connection_gateway_name, api_version, custom_headers:nil)
      get_async(subscription_id, resource_group_name, connection_gateway_name, api_version, custom_headers:custom_headers).value!
    end

    #
    # Gets a specific gateway
    #
    # Gets a specific gateway under a subscription and in a specific resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param api_version [String] API Version
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(subscription_id, resource_group_name, connection_gateway_name, api_version, custom_headers:nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'connection_gateway_name is nil' if connection_gateway_name.nil?
      fail ArgumentError, 'api_version is nil' if api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'resourceGroupName' => resource_group_name,'connectionGatewayName' => connection_gateway_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Web::Mgmt::V2016_06_01::Models::ConnectionGatewayDefinition.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Replaces a specific gateway
    #
    # Creates or updates a specific gateway for under a subscription and in a
    # specific resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param connection_gateway [ConnectionGatewayDefinition] The connection
    # gateway
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ConnectionGatewayDefinition] operation results.
    #
    def create_or_update(subscription_id, resource_group_name, connection_gateway_name, connection_gateway, api_version, custom_headers:nil)
      response = create_or_update_async(subscription_id, resource_group_name, connection_gateway_name, connection_gateway, api_version, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Replaces a specific gateway
    #
    # Creates or updates a specific gateway for under a subscription and in a
    # specific resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param connection_gateway [ConnectionGatewayDefinition] The connection
    # gateway
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def create_or_update_with_http_info(subscription_id, resource_group_name, connection_gateway_name, connection_gateway, api_version, custom_headers:nil)
      create_or_update_async(subscription_id, resource_group_name, connection_gateway_name, connection_gateway, api_version, custom_headers:custom_headers).value!
    end

    #
    # Replaces a specific gateway
    #
    # Creates or updates a specific gateway for under a subscription and in a
    # specific resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param connection_gateway [ConnectionGatewayDefinition] The connection
    # gateway
    # @param api_version [String] API Version
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_or_update_async(subscription_id, resource_group_name, connection_gateway_name, connection_gateway, api_version, custom_headers:nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'connection_gateway_name is nil' if connection_gateway_name.nil?
      fail ArgumentError, 'connection_gateway is nil' if connection_gateway.nil?
      fail ArgumentError, 'api_version is nil' if api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Web::Mgmt::V2016_06_01::Models::ConnectionGatewayDefinition.mapper()
      request_content = @client.serialize(request_mapper,  connection_gateway)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'resourceGroupName' => resource_group_name,'connectionGatewayName' => connection_gateway_name},
          query_params: {'api-version' => api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Web::Mgmt::V2016_06_01::Models::ConnectionGatewayDefinition.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Web::Mgmt::V2016_06_01::Models::ConnectionGatewayDefinition.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates a specific gateway
    #
    # Updates a connection gateway's tags
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param connection_gateway [ConnectionGatewayDefinition] The connection
    # gateway
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ConnectionGatewayDefinition] operation results.
    #
    def update(subscription_id, resource_group_name, connection_gateway_name, connection_gateway, api_version, custom_headers:nil)
      response = update_async(subscription_id, resource_group_name, connection_gateway_name, connection_gateway, api_version, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates a specific gateway
    #
    # Updates a connection gateway's tags
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param connection_gateway [ConnectionGatewayDefinition] The connection
    # gateway
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_with_http_info(subscription_id, resource_group_name, connection_gateway_name, connection_gateway, api_version, custom_headers:nil)
      update_async(subscription_id, resource_group_name, connection_gateway_name, connection_gateway, api_version, custom_headers:custom_headers).value!
    end

    #
    # Updates a specific gateway
    #
    # Updates a connection gateway's tags
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param connection_gateway [ConnectionGatewayDefinition] The connection
    # gateway
    # @param api_version [String] API Version
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_async(subscription_id, resource_group_name, connection_gateway_name, connection_gateway, api_version, custom_headers:nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'connection_gateway_name is nil' if connection_gateway_name.nil?
      fail ArgumentError, 'connection_gateway is nil' if connection_gateway.nil?
      fail ArgumentError, 'api_version is nil' if api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Web::Mgmt::V2016_06_01::Models::ConnectionGatewayDefinition.mapper()
      request_content = @client.serialize(request_mapper,  connection_gateway)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'resourceGroupName' => resource_group_name,'connectionGatewayName' => connection_gateway_name},
          query_params: {'api-version' => api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Web::Mgmt::V2016_06_01::Models::ConnectionGatewayDefinition.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes a specific gateway
    #
    # Deletes a specific gateway for under a subscription and in a specific
    # resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete(subscription_id, resource_group_name, connection_gateway_name, api_version, custom_headers:nil)
      response = delete_async(subscription_id, resource_group_name, connection_gateway_name, api_version, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes a specific gateway
    #
    # Deletes a specific gateway for under a subscription and in a specific
    # resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param api_version [String] API Version
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(subscription_id, resource_group_name, connection_gateway_name, api_version, custom_headers:nil)
      delete_async(subscription_id, resource_group_name, connection_gateway_name, api_version, custom_headers:custom_headers).value!
    end

    #
    # Deletes a specific gateway
    #
    # Deletes a specific gateway for under a subscription and in a specific
    # resource group
    #
    # @param subscription_id [String] Subscription Id
    # @param resource_group_name [String] The resource group
    # @param connection_gateway_name [String] The connection gateway name
    # @param api_version [String] API Version
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(subscription_id, resource_group_name, connection_gateway_name, api_version, custom_headers:nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'connection_gateway_name is nil' if connection_gateway_name.nil?
      fail ArgumentError, 'api_version is nil' if api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'resourceGroupName' => resource_group_name,'connectionGatewayName' => connection_gateway_name},
          query_params: {'api-version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?

        result
      end

      promise.execute
    end

  end
end
