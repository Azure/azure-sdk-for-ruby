# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::LabServices::Mgmt::V2018_10_15
  #
  # The Managed Labs Client.
  #
  class EnvironmentSettings
    include MsRestAzure

    #
    # Creates and initializes a new instance of the EnvironmentSettings class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [ManagedLabsClient] reference to the ManagedLabsClient
    attr_reader :client

    #
    # List environment setting in a given lab.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param expand [String] Specify the $expand query. Example:
    # 'properties($select=publishingState)'
    # @param filter [String] The filter to apply to the operation.
    # @param top [Integer] The maximum number of resources to return from the
    # operation.
    # @param orderby [String] The ordering expression for the results, using OData
    # notation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<EnvironmentSetting>] operation results.
    #
    def list(resource_group_name, lab_account_name, lab_name, expand = nil, filter = nil, top = nil, orderby = nil, custom_headers = nil)
      first_page = list_as_lazy(resource_group_name, lab_account_name, lab_name, expand, filter, top, orderby, custom_headers)
      first_page.get_all_items
    end

    #
    # List environment setting in a given lab.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param expand [String] Specify the $expand query. Example:
    # 'properties($select=publishingState)'
    # @param filter [String] The filter to apply to the operation.
    # @param top [Integer] The maximum number of resources to return from the
    # operation.
    # @param orderby [String] The ordering expression for the results, using OData
    # notation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(resource_group_name, lab_account_name, lab_name, expand = nil, filter = nil, top = nil, orderby = nil, custom_headers = nil)
      list_async(resource_group_name, lab_account_name, lab_name, expand, filter, top, orderby, custom_headers).value!
    end

    #
    # List environment setting in a given lab.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param expand [String] Specify the $expand query. Example:
    # 'properties($select=publishingState)'
    # @param filter [String] The filter to apply to the operation.
    # @param top [Integer] The maximum number of resources to return from the
    # operation.
    # @param orderby [String] The ordering expression for the results, using OData
    # notation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(resource_group_name, lab_account_name, lab_name, expand = nil, filter = nil, top = nil, orderby = nil, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'lab_account_name is nil' if lab_account_name.nil?
      fail ArgumentError, 'lab_name is nil' if lab_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'labAccountName' => lab_account_name,'labName' => lab_name},
          query_params: {'$expand' => expand,'$filter' => filter,'$top' => top,'$orderby' => orderby,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::LabServices::Mgmt::V2018_10_15::Models::ResponseWithContinuationEnvironmentSetting.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get environment setting
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param expand [String] Specify the $expand query. Example:
    # 'properties($select=publishingState)'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EnvironmentSetting] operation results.
    #
    def get(resource_group_name, lab_account_name, lab_name, environment_setting_name, expand = nil, custom_headers = nil)
      response = get_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, expand, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get environment setting
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param expand [String] Specify the $expand query. Example:
    # 'properties($select=publishingState)'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(resource_group_name, lab_account_name, lab_name, environment_setting_name, expand = nil, custom_headers = nil)
      get_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, expand, custom_headers).value!
    end

    #
    # Get environment setting
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param expand [String] Specify the $expand query. Example:
    # 'properties($select=publishingState)'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, expand = nil, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'lab_account_name is nil' if lab_account_name.nil?
      fail ArgumentError, 'lab_name is nil' if lab_name.nil?
      fail ArgumentError, 'environment_setting_name is nil' if environment_setting_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'labAccountName' => lab_account_name,'labName' => lab_name,'environmentSettingName' => environment_setting_name},
          query_params: {'$expand' => expand,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::LabServices::Mgmt::V2018_10_15::Models::EnvironmentSetting.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create or replace an existing Environment Setting. This operation can take a
    # while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param environment_setting [EnvironmentSetting] Represents settings of an
    # environment, from which environment instances would be created
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EnvironmentSetting] operation results.
    #
    def create_or_update(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers = nil)
      response = create_or_update_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param environment_setting [EnvironmentSetting] Represents settings of an
    # environment, from which environment instances would be created
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def create_or_update_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers = nil)
      # Send request
      promise = begin_create_or_update_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::LabServices::Mgmt::V2018_10_15::Models::EnvironmentSetting.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Delete environment setting. This operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      response = delete_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
      nil
    end

    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      # Send request
      promise = begin_delete_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Modify properties of environment setting.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param environment_setting [EnvironmentSettingFragment] Represents settings
    # of an environment, from which environment instances would be created
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EnvironmentSetting] operation results.
    #
    def update(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers = nil)
      response = update_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Modify properties of environment setting.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param environment_setting [EnvironmentSettingFragment] Represents settings
    # of an environment, from which environment instances would be created
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_with_http_info(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers = nil)
      update_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers).value!
    end

    #
    # Modify properties of environment setting.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param environment_setting [EnvironmentSettingFragment] Represents settings
    # of an environment, from which environment instances would be created
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'lab_account_name is nil' if lab_account_name.nil?
      fail ArgumentError, 'lab_name is nil' if lab_name.nil?
      fail ArgumentError, 'environment_setting_name is nil' if environment_setting_name.nil?
      fail ArgumentError, 'environment_setting is nil' if environment_setting.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::LabServices::Mgmt::V2018_10_15::Models::EnvironmentSettingFragment.mapper()
      request_content = @client.serialize(request_mapper,  environment_setting)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'labAccountName' => lab_account_name,'labName' => lab_name,'environmentSettingName' => environment_setting_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::LabServices::Mgmt::V2018_10_15::Models::EnvironmentSetting.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Claims a random environment for a user in an environment settings
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def claim_any(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      response = claim_any_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
      nil
    end

    #
    # Claims a random environment for a user in an environment settings
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def claim_any_with_http_info(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      claim_any_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
    end

    #
    # Claims a random environment for a user in an environment settings
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def claim_any_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'lab_account_name is nil' if lab_account_name.nil?
      fail ArgumentError, 'lab_name is nil' if lab_name.nil?
      fail ArgumentError, 'environment_setting_name is nil' if environment_setting_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/claimAny'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'labAccountName' => lab_account_name,'labName' => lab_name,'environmentSettingName' => environment_setting_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Provisions/deprovisions required resources for an environment setting based
    # on current state of the lab/environment setting.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param publish_payload [PublishPayload] Payload for Publish operation on
    # EnvironmentSetting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def publish(resource_group_name, lab_account_name, lab_name, environment_setting_name, publish_payload, custom_headers = nil)
      response = publish_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, publish_payload, custom_headers).value!
      nil
    end

    #
    # Provisions/deprovisions required resources for an environment setting based
    # on current state of the lab/environment setting.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param publish_payload [PublishPayload] Payload for Publish operation on
    # EnvironmentSetting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def publish_with_http_info(resource_group_name, lab_account_name, lab_name, environment_setting_name, publish_payload, custom_headers = nil)
      publish_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, publish_payload, custom_headers).value!
    end

    #
    # Provisions/deprovisions required resources for an environment setting based
    # on current state of the lab/environment setting.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param publish_payload [PublishPayload] Payload for Publish operation on
    # EnvironmentSetting.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def publish_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, publish_payload, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'lab_account_name is nil' if lab_account_name.nil?
      fail ArgumentError, 'lab_name is nil' if lab_name.nil?
      fail ArgumentError, 'environment_setting_name is nil' if environment_setting_name.nil?
      fail ArgumentError, 'publish_payload is nil' if publish_payload.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::LabServices::Mgmt::V2018_10_15::Models::PublishPayload.mapper()
      request_content = @client.serialize(request_mapper,  publish_payload)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/publish'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'labAccountName' => lab_account_name,'labName' => lab_name,'environmentSettingName' => environment_setting_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Starts a template by starting all resources inside the template. This
    # operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def start(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      response = start_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
      nil
    end

    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def start_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      # Send request
      promise = begin_start_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Starts a template by starting all resources inside the template. This
    # operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def stop(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      response = stop_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
      nil
    end

    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def stop_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      # Send request
      promise = begin_stop_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Create or replace an existing Environment Setting. This operation can take a
    # while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param environment_setting [EnvironmentSetting] Represents settings of an
    # environment, from which environment instances would be created
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EnvironmentSetting] operation results.
    #
    def begin_create_or_update(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers = nil)
      response = begin_create_or_update_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create or replace an existing Environment Setting. This operation can take a
    # while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param environment_setting [EnvironmentSetting] Represents settings of an
    # environment, from which environment instances would be created
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_create_or_update_with_http_info(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers = nil)
      begin_create_or_update_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers).value!
    end

    #
    # Create or replace an existing Environment Setting. This operation can take a
    # while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param environment_setting [EnvironmentSetting] Represents settings of an
    # environment, from which environment instances would be created
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_create_or_update_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, environment_setting, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'lab_account_name is nil' if lab_account_name.nil?
      fail ArgumentError, 'lab_name is nil' if lab_name.nil?
      fail ArgumentError, 'environment_setting_name is nil' if environment_setting_name.nil?
      fail ArgumentError, 'environment_setting is nil' if environment_setting.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Azure::LabServices::Mgmt::V2018_10_15::Models::EnvironmentSetting.mapper()
      request_content = @client.serialize(request_mapper,  environment_setting)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'labAccountName' => lab_account_name,'labName' => lab_name,'environmentSettingName' => environment_setting_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::LabServices::Mgmt::V2018_10_15::Models::EnvironmentSetting.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::LabServices::Mgmt::V2018_10_15::Models::EnvironmentSetting.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete environment setting. This operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      response = begin_delete_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
      nil
    end

    #
    # Delete environment setting. This operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_with_http_info(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      begin_delete_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
    end

    #
    # Delete environment setting. This operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'lab_account_name is nil' if lab_account_name.nil?
      fail ArgumentError, 'lab_name is nil' if lab_name.nil?
      fail ArgumentError, 'environment_setting_name is nil' if environment_setting_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'labAccountName' => lab_account_name,'labName' => lab_name,'environmentSettingName' => environment_setting_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Starts a template by starting all resources inside the template. This
    # operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_start(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      response = begin_start_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
      nil
    end

    #
    # Starts a template by starting all resources inside the template. This
    # operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_start_with_http_info(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      begin_start_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
    end

    #
    # Starts a template by starting all resources inside the template. This
    # operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_start_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'lab_account_name is nil' if lab_account_name.nil?
      fail ArgumentError, 'lab_name is nil' if lab_name.nil?
      fail ArgumentError, 'environment_setting_name is nil' if environment_setting_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/start'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'labAccountName' => lab_account_name,'labName' => lab_name,'environmentSettingName' => environment_setting_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Starts a template by starting all resources inside the template. This
    # operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_stop(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      response = begin_stop_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
      nil
    end

    #
    # Starts a template by starting all resources inside the template. This
    # operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_stop_with_http_info(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      begin_stop_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers).value!
    end

    #
    # Starts a template by starting all resources inside the template. This
    # operation can take a while to complete
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param environment_setting_name [String] The name of the environment Setting.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_stop_async(resource_group_name, lab_account_name, lab_name, environment_setting_name, custom_headers = nil)
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'lab_account_name is nil' if lab_account_name.nil?
      fail ArgumentError, 'lab_name is nil' if lab_name.nil?
      fail ArgumentError, 'environment_setting_name is nil' if environment_setting_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labaccounts/{labAccountName}/labs/{labName}/environmentsettings/{environmentSettingName}/stop'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id,'resourceGroupName' => resource_group_name,'labAccountName' => lab_account_name,'labName' => lab_name,'environmentSettingName' => environment_setting_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # List environment setting in a given lab.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ResponseWithContinuationEnvironmentSetting] operation results.
    #
    def list_next(next_page_link, custom_headers = nil)
      response = list_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # List environment setting in a given lab.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers = nil)
      list_next_async(next_page_link, custom_headers).value!
    end

    #
    # List environment setting in a given lab.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::LabServices::Mgmt::V2018_10_15::Models::ResponseWithContinuationEnvironmentSetting.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # List environment setting in a given lab.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param lab_account_name [String] The name of the lab Account.
    # @param lab_name [String] The name of the lab.
    # @param expand [String] Specify the $expand query. Example:
    # 'properties($select=publishingState)'
    # @param filter [String] The filter to apply to the operation.
    # @param top [Integer] The maximum number of resources to return from the
    # operation.
    # @param orderby [String] The ordering expression for the results, using OData
    # notation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ResponseWithContinuationEnvironmentSetting] which provide lazy
    # access to pages of the response.
    #
    def list_as_lazy(resource_group_name, lab_account_name, lab_name, expand = nil, filter = nil, top = nil, orderby = nil, custom_headers = nil)
      response = list_async(resource_group_name, lab_account_name, lab_name, expand, filter, top, orderby, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

  end
end
