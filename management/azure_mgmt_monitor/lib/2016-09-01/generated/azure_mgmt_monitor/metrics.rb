# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Monitor::Mgmt::V2016_09_01
  #
  # Monitor Management Client
  #
  class Metrics
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Metrics class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [MonitorClient] reference to the MonitorClient
    attr_reader :client

    #
    # Lists the metric values for a resource.
    #
    # @param resource_uri [String] The identifier of the resource.
    # @param filter [String] Reduces the set of data collected.<br>The filter is
    # optional. If present it must contain a list of metric names to retrieve of
    # the form: *(name.value eq 'metricName' [or name.value eq 'metricName' or
    # ...])*. Optionally, the filter can contain conditions for the following
    # attributes *aggregationType*, *startTime*, *endTime*, and *timeGrain* of the
    # form *attributeName operator value*. Where operator is one of *ne*, *eq*,
    # *gt*, *lt*.<br>Several conditions can be combined with parentheses and
    # logical operators, e.g: *and*, *or*.<br>Some example filter expressions
    # are:<br>- $filter=(name.value eq 'RunsSucceeded') and aggregationType eq
    # 'Total' and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain
    # eq duration'PT1M',<br>- $filter=(name.value eq 'RunsSucceeded') and
    # (aggregationType eq 'Total' or aggregationType eq 'Average') and startTime eq
    # 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration'PT1H',<br>-
    # $filter=(name.value eq 'ActionsCompleted' or name.value eq 'RunsSucceeded')
    # and (aggregationType eq 'Total' or aggregationType eq 'Average') and
    # startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq
    # duration'PT1M'.<br><br>**NOTE**: When a metrics query comes in with multiple
    # metrics, but with no aggregation types defined, the service will pick the
    # Primary aggregation type of the first metrics to be used as the default
    # aggregation type for all the metrics.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MetricCollection] operation results.
    #
    def list(resource_uri, filter = nil, custom_headers = nil)
      response = list_async(resource_uri, filter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Lists the metric values for a resource.
    #
    # @param resource_uri [String] The identifier of the resource.
    # @param filter [String] Reduces the set of data collected.<br>The filter is
    # optional. If present it must contain a list of metric names to retrieve of
    # the form: *(name.value eq 'metricName' [or name.value eq 'metricName' or
    # ...])*. Optionally, the filter can contain conditions for the following
    # attributes *aggregationType*, *startTime*, *endTime*, and *timeGrain* of the
    # form *attributeName operator value*. Where operator is one of *ne*, *eq*,
    # *gt*, *lt*.<br>Several conditions can be combined with parentheses and
    # logical operators, e.g: *and*, *or*.<br>Some example filter expressions
    # are:<br>- $filter=(name.value eq 'RunsSucceeded') and aggregationType eq
    # 'Total' and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain
    # eq duration'PT1M',<br>- $filter=(name.value eq 'RunsSucceeded') and
    # (aggregationType eq 'Total' or aggregationType eq 'Average') and startTime eq
    # 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration'PT1H',<br>-
    # $filter=(name.value eq 'ActionsCompleted' or name.value eq 'RunsSucceeded')
    # and (aggregationType eq 'Total' or aggregationType eq 'Average') and
    # startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq
    # duration'PT1M'.<br><br>**NOTE**: When a metrics query comes in with multiple
    # metrics, but with no aggregation types defined, the service will pick the
    # Primary aggregation type of the first metrics to be used as the default
    # aggregation type for all the metrics.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(resource_uri, filter = nil, custom_headers = nil)
      list_async(resource_uri, filter, custom_headers).value!
    end

    #
    # Lists the metric values for a resource.
    #
    # @param resource_uri [String] The identifier of the resource.
    # @param filter [String] Reduces the set of data collected.<br>The filter is
    # optional. If present it must contain a list of metric names to retrieve of
    # the form: *(name.value eq 'metricName' [or name.value eq 'metricName' or
    # ...])*. Optionally, the filter can contain conditions for the following
    # attributes *aggregationType*, *startTime*, *endTime*, and *timeGrain* of the
    # form *attributeName operator value*. Where operator is one of *ne*, *eq*,
    # *gt*, *lt*.<br>Several conditions can be combined with parentheses and
    # logical operators, e.g: *and*, *or*.<br>Some example filter expressions
    # are:<br>- $filter=(name.value eq 'RunsSucceeded') and aggregationType eq
    # 'Total' and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain
    # eq duration'PT1M',<br>- $filter=(name.value eq 'RunsSucceeded') and
    # (aggregationType eq 'Total' or aggregationType eq 'Average') and startTime eq
    # 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration'PT1H',<br>-
    # $filter=(name.value eq 'ActionsCompleted' or name.value eq 'RunsSucceeded')
    # and (aggregationType eq 'Total' or aggregationType eq 'Average') and
    # startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq
    # duration'PT1M'.<br><br>**NOTE**: When a metrics query comes in with multiple
    # metrics, but with no aggregation types defined, the service will pick the
    # Primary aggregation type of the first metrics to be used as the default
    # aggregation type for all the metrics.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(resource_uri, filter = nil, custom_headers = nil)
      fail ArgumentError, 'resource_uri is nil' if resource_uri.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{resourceUri}/providers/microsoft.insights/metrics'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'resourceUri' => resource_uri},
          query_params: {'$filter' => filter,'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Monitor::Mgmt::V2016_09_01::Models::MetricCollection.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end
