# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Monitor::Mgmt::V2015_05_01
  #
  # Composite Swagger for Application Insights Management Client
  #
  class Favorites
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Favorites class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [ApplicationInsightsManagementClient] reference to the ApplicationInsightsManagementClient
    attr_reader :client

    #
    # Gets a list of favorites defined within an Application Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_type [FavoriteType] The type of favorite. Value can be either
    # shared or user. Possible values include: 'shared', 'user'
    # @param source_type [FavoriteSourceType] Source type of favorite to return.
    # When left out, the source type defaults to 'other' (not present in this
    # enum). Possible values include: 'retention', 'notebook', 'sessions',
    # 'events', 'userflows', 'funnel', 'impact', 'segmentation'
    # @param can_fetch_content [Boolean] Flag indicating whether or not to return
    # the full content for each applicable favorite. If false, only return summary
    # content for favorites.
    # @param tags [Array<String>] Tags that must be present on each favorite
    # returned.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list(resource_group_name, resource_name, favorite_type:nil, source_type:nil, can_fetch_content:nil, tags:nil, custom_headers:nil)
      response = list_async(resource_group_name, resource_name, favorite_type:favorite_type, source_type:source_type, can_fetch_content:can_fetch_content, tags:tags, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets a list of favorites defined within an Application Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_type [FavoriteType] The type of favorite. Value can be either
    # shared or user. Possible values include: 'shared', 'user'
    # @param source_type [FavoriteSourceType] Source type of favorite to return.
    # When left out, the source type defaults to 'other' (not present in this
    # enum). Possible values include: 'retention', 'notebook', 'sessions',
    # 'events', 'userflows', 'funnel', 'impact', 'segmentation'
    # @param can_fetch_content [Boolean] Flag indicating whether or not to return
    # the full content for each applicable favorite. If false, only return summary
    # content for favorites.
    # @param tags [Array<String>] Tags that must be present on each favorite
    # returned.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(resource_group_name, resource_name, favorite_type:nil, source_type:nil, can_fetch_content:nil, tags:nil, custom_headers:nil)
      list_async(resource_group_name, resource_name, favorite_type:favorite_type, source_type:source_type, can_fetch_content:can_fetch_content, tags:tags, custom_headers:custom_headers).value!
    end

    #
    # Gets a list of favorites defined within an Application Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_type [FavoriteType] The type of favorite. Value can be either
    # shared or user. Possible values include: 'shared', 'user'
    # @param source_type [FavoriteSourceType] Source type of favorite to return.
    # When left out, the source type defaults to 'other' (not present in this
    # enum). Possible values include: 'retention', 'notebook', 'sessions',
    # 'events', 'userflows', 'funnel', 'impact', 'segmentation'
    # @param can_fetch_content [Boolean] Flag indicating whether or not to return
    # the full content for each applicable favorite. If false, only return summary
    # content for favorites.
    # @param tags [Array<String>] Tags that must be present on each favorite
    # returned.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(resource_group_name, resource_name, favorite_type:nil, source_type:nil, can_fetch_content:nil, tags:nil, custom_headers:nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MaxLength': '90'" if !resource_group_name.nil? && resource_group_name.length > 90
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MinLength': '1'" if !resource_group_name.nil? && resource_group_name.length < 1
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'Pattern': '^[-\w\._\(\)]+$'" if !resource_group_name.nil? && resource_group_name.match(Regexp.new('^^[-\w\._\(\)]+$$')).nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, "'@client.api_version' should satisfy the constraint - 'MinLength': '1'" if !@client.api_version.nil? && @client.api_version.length < 1
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, "'@client.subscription_id' should satisfy the constraint - 'MinLength': '1'" if !@client.subscription_id.nil? && @client.subscription_id.length < 1
      fail ArgumentError, 'resource_name is nil' if resource_name.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'subscriptionId' => @client.subscription_id,'resourceName' => resource_name},
          query_params: {'api-version' => @client.api_version,'favoriteType' => favorite_type,'sourceType' => source_type,'canFetchContent' => can_fetch_content,'tags' => tags.nil? ? nil : tags.join(',')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'ApplicationInsightsComponentFavoriteElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'ApplicationInsightsComponentFavorite'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get a single favorite by its FavoriteId, defined within an Application
    # Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ApplicationInsightsComponentFavorite] operation results.
    #
    def get(resource_group_name, resource_name, favorite_id, custom_headers:nil)
      response = get_async(resource_group_name, resource_name, favorite_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get a single favorite by its FavoriteId, defined within an Application
    # Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(resource_group_name, resource_name, favorite_id, custom_headers:nil)
      get_async(resource_group_name, resource_name, favorite_id, custom_headers:custom_headers).value!
    end

    #
    # Get a single favorite by its FavoriteId, defined within an Application
    # Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(resource_group_name, resource_name, favorite_id, custom_headers:nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MaxLength': '90'" if !resource_group_name.nil? && resource_group_name.length > 90
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MinLength': '1'" if !resource_group_name.nil? && resource_group_name.length < 1
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'Pattern': '^[-\w\._\(\)]+$'" if !resource_group_name.nil? && resource_group_name.match(Regexp.new('^^[-\w\._\(\)]+$$')).nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, "'@client.api_version' should satisfy the constraint - 'MinLength': '1'" if !@client.api_version.nil? && @client.api_version.length < 1
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, "'@client.subscription_id' should satisfy the constraint - 'MinLength': '1'" if !@client.subscription_id.nil? && @client.subscription_id.length < 1
      fail ArgumentError, 'resource_name is nil' if resource_name.nil?
      fail ArgumentError, 'favorite_id is nil' if favorite_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'subscriptionId' => @client.subscription_id,'resourceName' => resource_name,'favoriteId' => favorite_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Monitor::Mgmt::V2015_05_01::Models::ApplicationInsightsComponentFavorite.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a new favorites to an Application Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param favorite_properties [ApplicationInsightsComponentFavorite] Properties
    # that need to be specified to create a new favorite and add it to an
    # Application Insights component.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ApplicationInsightsComponentFavorite] operation results.
    #
    def add(resource_group_name, resource_name, favorite_id, favorite_properties, custom_headers:nil)
      response = add_async(resource_group_name, resource_name, favorite_id, favorite_properties, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a new favorites to an Application Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param favorite_properties [ApplicationInsightsComponentFavorite] Properties
    # that need to be specified to create a new favorite and add it to an
    # Application Insights component.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def add_with_http_info(resource_group_name, resource_name, favorite_id, favorite_properties, custom_headers:nil)
      add_async(resource_group_name, resource_name, favorite_id, favorite_properties, custom_headers:custom_headers).value!
    end

    #
    # Adds a new favorites to an Application Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param favorite_properties [ApplicationInsightsComponentFavorite] Properties
    # that need to be specified to create a new favorite and add it to an
    # Application Insights component.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_async(resource_group_name, resource_name, favorite_id, favorite_properties, custom_headers:nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MaxLength': '90'" if !resource_group_name.nil? && resource_group_name.length > 90
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MinLength': '1'" if !resource_group_name.nil? && resource_group_name.length < 1
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'Pattern': '^[-\w\._\(\)]+$'" if !resource_group_name.nil? && resource_group_name.match(Regexp.new('^^[-\w\._\(\)]+$$')).nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, "'@client.api_version' should satisfy the constraint - 'MinLength': '1'" if !@client.api_version.nil? && @client.api_version.length < 1
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, "'@client.subscription_id' should satisfy the constraint - 'MinLength': '1'" if !@client.subscription_id.nil? && @client.subscription_id.length < 1
      fail ArgumentError, 'resource_name is nil' if resource_name.nil?
      fail ArgumentError, 'favorite_id is nil' if favorite_id.nil?
      fail ArgumentError, 'favorite_properties is nil' if favorite_properties.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Monitor::Mgmt::V2015_05_01::Models::ApplicationInsightsComponentFavorite.mapper()
      request_content = @client.serialize(request_mapper,  favorite_properties)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'subscriptionId' => @client.subscription_id,'resourceName' => resource_name,'favoriteId' => favorite_id},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Monitor::Mgmt::V2015_05_01::Models::ApplicationInsightsComponentFavorite.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates a favorite that has already been added to an Application Insights
    # component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param favorite_properties [ApplicationInsightsComponentFavorite] Properties
    # that need to be specified to update the existing favorite.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ApplicationInsightsComponentFavorite] operation results.
    #
    def update(resource_group_name, resource_name, favorite_id, favorite_properties, custom_headers:nil)
      response = update_async(resource_group_name, resource_name, favorite_id, favorite_properties, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates a favorite that has already been added to an Application Insights
    # component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param favorite_properties [ApplicationInsightsComponentFavorite] Properties
    # that need to be specified to update the existing favorite.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def update_with_http_info(resource_group_name, resource_name, favorite_id, favorite_properties, custom_headers:nil)
      update_async(resource_group_name, resource_name, favorite_id, favorite_properties, custom_headers:custom_headers).value!
    end

    #
    # Updates a favorite that has already been added to an Application Insights
    # component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param favorite_properties [ApplicationInsightsComponentFavorite] Properties
    # that need to be specified to update the existing favorite.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_async(resource_group_name, resource_name, favorite_id, favorite_properties, custom_headers:nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MaxLength': '90'" if !resource_group_name.nil? && resource_group_name.length > 90
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MinLength': '1'" if !resource_group_name.nil? && resource_group_name.length < 1
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'Pattern': '^[-\w\._\(\)]+$'" if !resource_group_name.nil? && resource_group_name.match(Regexp.new('^^[-\w\._\(\)]+$$')).nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, "'@client.api_version' should satisfy the constraint - 'MinLength': '1'" if !@client.api_version.nil? && @client.api_version.length < 1
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, "'@client.subscription_id' should satisfy the constraint - 'MinLength': '1'" if !@client.subscription_id.nil? && @client.subscription_id.length < 1
      fail ArgumentError, 'resource_name is nil' if resource_name.nil?
      fail ArgumentError, 'favorite_id is nil' if favorite_id.nil?
      fail ArgumentError, 'favorite_properties is nil' if favorite_properties.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Monitor::Mgmt::V2015_05_01::Models::ApplicationInsightsComponentFavorite.mapper()
      request_content = @client.serialize(request_mapper,  favorite_properties)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'subscriptionId' => @client.subscription_id,'resourceName' => resource_name,'favoriteId' => favorite_id},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Monitor::Mgmt::V2015_05_01::Models::ApplicationInsightsComponentFavorite.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Remove a favorite that is associated to an Application Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete(resource_group_name, resource_name, favorite_id, custom_headers:nil)
      response = delete_async(resource_group_name, resource_name, favorite_id, custom_headers:custom_headers).value!
      nil
    end

    #
    # Remove a favorite that is associated to an Application Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def delete_with_http_info(resource_group_name, resource_name, favorite_id, custom_headers:nil)
      delete_async(resource_group_name, resource_name, favorite_id, custom_headers:custom_headers).value!
    end

    #
    # Remove a favorite that is associated to an Application Insights component.
    #
    # @param resource_group_name [String] The name of the resource group. The name
    # is case insensitive.
    # @param resource_name [String] The name of the Application Insights component
    # resource.
    # @param favorite_id [String] The Id of a specific favorite defined in the
    # Application Insights component
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_async(resource_group_name, resource_name, favorite_id, custom_headers:nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MaxLength': '90'" if !resource_group_name.nil? && resource_group_name.length > 90
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'MinLength': '1'" if !resource_group_name.nil? && resource_group_name.length < 1
      fail ArgumentError, "'resource_group_name' should satisfy the constraint - 'Pattern': '^[-\w\._\(\)]+$'" if !resource_group_name.nil? && resource_group_name.match(Regexp.new('^^[-\w\._\(\)]+$$')).nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, "'@client.api_version' should satisfy the constraint - 'MinLength': '1'" if !@client.api_version.nil? && @client.api_version.length < 1
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?
      fail ArgumentError, "'@client.subscription_id' should satisfy the constraint - 'MinLength': '1'" if !@client.subscription_id.nil? && @client.subscription_id.length < 1
      fail ArgumentError, 'resource_name is nil' if resource_name.nil?
      fail ArgumentError, 'favorite_id is nil' if favorite_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'subscriptionId' => @client.subscription_id,'resourceName' => resource_name,'favoriteId' => favorite_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?

        result
      end

      promise.execute
    end

  end
end
