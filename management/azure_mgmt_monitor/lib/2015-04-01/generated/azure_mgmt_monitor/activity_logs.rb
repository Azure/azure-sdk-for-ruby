# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Monitor::Mgmt::V2015_04_01
  #
  # Monitor Management Client
  #
  class ActivityLogs
    include MsRestAzure

    #
    # Creates and initializes a new instance of the ActivityLogs class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [MonitorManagementClient] reference to the MonitorManagementClient
    attr_reader :client

    #
    # Provides the list of records from the activity logs.
    #
    # @param filter [String] Reduces the set of data collected.<br>This argument is
    # required and it also requires at least the start date/time.<br>The
    # **$filter** argument is very restricted and allows only the following
    # patterns.<br>- *List events for a resource group*: $filter=eventTimestamp ge
    # '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z' and resourceGroupName eq
    # 'resourceGroupName'.<br>- *List events for resource*: $filter=eventTimestamp
    # ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z' and resourceUri eq 'resourceURI'.<br>- *List
    # events for a subscription in a time range*: $filter=eventTimestamp ge
    # '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z'.<br>- *List events for a resource provider*:
    # $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
    # le '2014-07-20T04:36:37.6407898Z' and resourceProvider eq
    # 'resourceProviderName'.<br>- *List events for a correlation Id*:
    # $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
    # le '2014-07-20T04:36:37.6407898Z' and correlationId eq
    # 'correlationID'.<br><br>**NOTE**: No other syntax is allowed.
    # @param select [String] Used to fetch events with only the given
    # properties.<br>The **$select** argument is a comma separated list of property
    # names to be returned. Possible values are: *authorization*, *claims*,
    # *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*,
    # *httpRequest*, *level*, *operationId*, *operationName*, *properties*,
    # *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*,
    # *submissionTimestamp*, *subStatus*, *subscriptionId*
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<EventData>] operation results.
    #
    def list(filter, select = nil, custom_headers = nil)
      first_page = list_as_lazy(filter, select, custom_headers)
      first_page.get_all_items
    end

    #
    # Provides the list of records from the activity logs.
    #
    # @param filter [String] Reduces the set of data collected.<br>This argument is
    # required and it also requires at least the start date/time.<br>The
    # **$filter** argument is very restricted and allows only the following
    # patterns.<br>- *List events for a resource group*: $filter=eventTimestamp ge
    # '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z' and resourceGroupName eq
    # 'resourceGroupName'.<br>- *List events for resource*: $filter=eventTimestamp
    # ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z' and resourceUri eq 'resourceURI'.<br>- *List
    # events for a subscription in a time range*: $filter=eventTimestamp ge
    # '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z'.<br>- *List events for a resource provider*:
    # $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
    # le '2014-07-20T04:36:37.6407898Z' and resourceProvider eq
    # 'resourceProviderName'.<br>- *List events for a correlation Id*:
    # $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
    # le '2014-07-20T04:36:37.6407898Z' and correlationId eq
    # 'correlationID'.<br><br>**NOTE**: No other syntax is allowed.
    # @param select [String] Used to fetch events with only the given
    # properties.<br>The **$select** argument is a comma separated list of property
    # names to be returned. Possible values are: *authorization*, *claims*,
    # *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*,
    # *httpRequest*, *level*, *operationId*, *operationName*, *properties*,
    # *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*,
    # *submissionTimestamp*, *subStatus*, *subscriptionId*
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(filter, select = nil, custom_headers = nil)
      list_async(filter, select, custom_headers).value!
    end

    #
    # Provides the list of records from the activity logs.
    #
    # @param filter [String] Reduces the set of data collected.<br>This argument is
    # required and it also requires at least the start date/time.<br>The
    # **$filter** argument is very restricted and allows only the following
    # patterns.<br>- *List events for a resource group*: $filter=eventTimestamp ge
    # '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z' and resourceGroupName eq
    # 'resourceGroupName'.<br>- *List events for resource*: $filter=eventTimestamp
    # ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z' and resourceUri eq 'resourceURI'.<br>- *List
    # events for a subscription in a time range*: $filter=eventTimestamp ge
    # '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z'.<br>- *List events for a resource provider*:
    # $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
    # le '2014-07-20T04:36:37.6407898Z' and resourceProvider eq
    # 'resourceProviderName'.<br>- *List events for a correlation Id*:
    # $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
    # le '2014-07-20T04:36:37.6407898Z' and correlationId eq
    # 'correlationID'.<br><br>**NOTE**: No other syntax is allowed.
    # @param select [String] Used to fetch events with only the given
    # properties.<br>The **$select** argument is a comma separated list of property
    # names to be returned. Possible values are: *authorization*, *claims*,
    # *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*,
    # *httpRequest*, *level*, *operationId*, *operationName*, *properties*,
    # *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*,
    # *submissionTimestamp*, *subStatus*, *subscriptionId*
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(filter, select = nil, custom_headers = nil)
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'filter is nil' if filter.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/providers/microsoft.insights/eventtypes/management/values'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => @client.subscription_id},
          query_params: {'api-version' => @client.api_version,'$filter' => filter,'$select' => select},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Monitor::Mgmt::V2015_04_01::Models::EventDataCollection.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Provides the list of records from the activity logs.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventDataCollection] operation results.
    #
    def list_next(next_page_link, custom_headers = nil)
      response = list_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Provides the list of records from the activity logs.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers = nil)
      list_next_async(next_page_link, custom_headers).value!
    end

    #
    # Provides the list of records from the activity logs.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Monitor::Mgmt::V2015_04_01::Models::EventDataCollection.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Provides the list of records from the activity logs.
    #
    # @param filter [String] Reduces the set of data collected.<br>This argument is
    # required and it also requires at least the start date/time.<br>The
    # **$filter** argument is very restricted and allows only the following
    # patterns.<br>- *List events for a resource group*: $filter=eventTimestamp ge
    # '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z' and resourceGroupName eq
    # 'resourceGroupName'.<br>- *List events for resource*: $filter=eventTimestamp
    # ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z' and resourceUri eq 'resourceURI'.<br>- *List
    # events for a subscription in a time range*: $filter=eventTimestamp ge
    # '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
    # '2014-07-20T04:36:37.6407898Z'.<br>- *List events for a resource provider*:
    # $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
    # le '2014-07-20T04:36:37.6407898Z' and resourceProvider eq
    # 'resourceProviderName'.<br>- *List events for a correlation Id*:
    # $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
    # le '2014-07-20T04:36:37.6407898Z' and correlationId eq
    # 'correlationID'.<br><br>**NOTE**: No other syntax is allowed.
    # @param select [String] Used to fetch events with only the given
    # properties.<br>The **$select** argument is a comma separated list of property
    # names to be returned. Possible values are: *authorization*, *claims*,
    # *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*,
    # *httpRequest*, *level*, *operationId*, *operationName*, *properties*,
    # *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*,
    # *submissionTimestamp*, *subStatus*, *subscriptionId*
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventDataCollection] which provide lazy access to pages of the
    # response.
    #
    def list_as_lazy(filter, select = nil, custom_headers = nil)
      response = list_async(filter, select, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

  end
end
