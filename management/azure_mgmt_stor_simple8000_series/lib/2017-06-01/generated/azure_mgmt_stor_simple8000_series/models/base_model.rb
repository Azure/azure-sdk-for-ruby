# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::StorSimple8000Series::Mgmt::V2017_06_01
  module Models
    #
    # Represents the base class for all other ARM object models
    #
    class BaseModel

      include MsRestAzure

      # @return [String] The path ID that uniquely identifies the object.
      attr_accessor :id

      # @return [String] The name of the object.
      attr_accessor :name

      # @return [String] The hierarchical type of the object.
      attr_accessor :type

      # @return [Kind] The Kind of the object. Currently only Series8000 is
      # supported. Possible values include: 'Series8000'
      attr_accessor :kind


      #
      # Mapper for BaseModel class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          required: false,
          serialized_name: 'BaseModel',
          type: {
            name: 'Composite',
            class_name: 'BaseModel',
            model_properties: {
              id: {
                required: false,
                read_only: true,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              name: {
                required: false,
                read_only: true,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              },
              type: {
                required: false,
                read_only: true,
                serialized_name: 'type',
                type: {
                  name: 'String'
                }
              },
              kind: {
                required: false,
                serialized_name: 'kind',
                type: {
                  name: 'Enum',
                  module: 'Kind'
                }
              }
            }
          }
        }
      end
    end
  end
end
