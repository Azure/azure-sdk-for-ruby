# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Reservations::Mgmt::V2019_07_19_preview
  #
  # Microsoft Azure Quota Resource Provider.
  #
  class Quota
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Quota class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [ReservationsManagementClient] reference to the ReservationsManagementClient
    attr_reader :client

    #
    # Gets the current service limits (quotas) and usage of a resource. The
    # response from Get API can be leveraged to submit quota update requests.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CurrentQuotaLimitBase] operation results.
    #
    def get(subscription_id, provider_id, location, resource_name, custom_headers:nil)
      response = get_async(subscription_id, provider_id, location, resource_name, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the current service limits (quotas) and usage of a resource. The
    # response from Get API can be leveraged to submit quota update requests.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(subscription_id, provider_id, location, resource_name, custom_headers:nil)
      get_async(subscription_id, provider_id, location, resource_name, custom_headers:custom_headers).value!
    end

    #
    # Gets the current service limits (quotas) and usage of a resource. The
    # response from Get API can be leveraged to submit quota update requests.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(subscription_id, provider_id, location, resource_name, custom_headers:nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'provider_id is nil' if provider_id.nil?
      fail ArgumentError, 'location is nil' if location.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'resource_name is nil' if resource_name.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'providerId' => provider_id,'location' => location,'resourceName' => resource_name},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2019_07_19_preview::Models::CurrentQuotaLimitBase.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create or update the service limits (quota) of a resource to requested value.
    # Steps:
    #
    # 1. Make the Get request to get the quota information for specific resource.
    #
    # 2. To increase the quota, update the limit field in the response from Get
    # request to new value.
    #
    # 3. Submit the JSON to the quota request API to update the quota.
    # The Create quota request may be constructed as follows. The PUT operation can
    # be used to update the quota.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param create_quota_request [CurrentQuotaLimitBase] Quota requests payload.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def create_or_update(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:nil)
      response = create_or_update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param create_quota_request [CurrentQuotaLimitBase] Quota requests payload.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def create_or_update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:nil)
      # Send request
      promise = begin_create_or_update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = {
            client_side_validation: true,
            required: false,
            serialized_name: 'parsed_response',
            type: {
              name: 'Object'
            }
          }
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Update the service limits (quota) of a resource to requested value.
    # Steps:
    #
    # 1. Make the Get request to get the quota information for specific resource.
    #
    # 2. To increase the quota, update the limit field in the response from Get
    # request to new value.
    #
    # 3. Submit the JSON to the quota request API to update the quota.
    # The Update quota request may be constructed as follows. The PATCH operation
    # can be used to update the quota.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param create_quota_request [CurrentQuotaLimitBase] Quota requests payload.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def update(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:nil)
      response = update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param create_quota_request [CurrentQuotaLimitBase] Quota requests payload.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:nil)
      # Send request
      promise = begin_update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = {
            client_side_validation: true,
            required: false,
            serialized_name: 'parsed_response',
            type: {
              name: 'Object'
            }
          }
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Get a list of current service limits (quota) and usages of all the resources.
    # The response from List API can be leveraged to submit quota update requests.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<CurrentQuotaLimitBase>] operation results.
    #
    def list(subscription_id, provider_id, location, custom_headers:nil)
      first_page = list_as_lazy(subscription_id, provider_id, location, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Get a list of current service limits (quota) and usages of all the resources.
    # The response from List API can be leveraged to submit quota update requests.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(subscription_id, provider_id, location, custom_headers:nil)
      list_async(subscription_id, provider_id, location, custom_headers:custom_headers).value!
    end

    #
    # Get a list of current service limits (quota) and usages of all the resources.
    # The response from List API can be leveraged to submit quota update requests.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(subscription_id, provider_id, location, custom_headers:nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'provider_id is nil' if provider_id.nil?
      fail ArgumentError, 'location is nil' if location.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'providerId' => provider_id,'location' => location},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2019_07_19_preview::Models::QuotaLimits.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create or update the service limits (quota) of a resource to requested value.
    # Steps:
    #
    # 1. Make the Get request to get the quota information for specific resource.
    #
    # 2. To increase the quota, update the limit field in the response from Get
    # request to new value.
    #
    # 3. Submit the JSON to the quota request API to update the quota.
    # The Create quota request may be constructed as follows. The PUT operation can
    # be used to update the quota.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param create_quota_request [CurrentQuotaLimitBase] Quota requests payload.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def begin_create_or_update(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:nil)
      response = begin_create_or_update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create or update the service limits (quota) of a resource to requested value.
    # Steps:
    #
    # 1. Make the Get request to get the quota information for specific resource.
    #
    # 2. To increase the quota, update the limit field in the response from Get
    # request to new value.
    #
    # 3. Submit the JSON to the quota request API to update the quota.
    # The Create quota request may be constructed as follows. The PUT operation can
    # be used to update the quota.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param create_quota_request [CurrentQuotaLimitBase] Quota requests payload.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_create_or_update_with_http_info(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:nil)
      begin_create_or_update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:custom_headers).value!
    end

    #
    # Create or update the service limits (quota) of a resource to requested value.
    # Steps:
    #
    # 1. Make the Get request to get the quota information for specific resource.
    #
    # 2. To increase the quota, update the limit field in the response from Get
    # request to new value.
    #
    # 3. Submit the JSON to the quota request API to update the quota.
    # The Create quota request may be constructed as follows. The PUT operation can
    # be used to update the quota.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param create_quota_request [CurrentQuotaLimitBase] Quota requests payload.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_create_or_update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'provider_id is nil' if provider_id.nil?
      fail ArgumentError, 'location is nil' if location.nil?
      fail ArgumentError, 'resource_name is nil' if resource_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'create_quota_request is nil' if create_quota_request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Reservations::Mgmt::V2019_07_19_preview::Models::CurrentQuotaLimitBase.mapper()
      request_content = @client.serialize(request_mapper,  create_quota_request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'providerId' => provider_id,'location' => location,'resourceName' => resource_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2019_07_19_preview::Models::QuotaRequestOneResourceSubmitResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2019_07_19_preview::Models::QuotaRequestSubmitResponse201.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update the service limits (quota) of a resource to requested value.
    # Steps:
    #
    # 1. Make the Get request to get the quota information for specific resource.
    #
    # 2. To increase the quota, update the limit field in the response from Get
    # request to new value.
    #
    # 3. Submit the JSON to the quota request API to update the quota.
    # The Update quota request may be constructed as follows. The PATCH operation
    # can be used to update the quota.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param create_quota_request [CurrentQuotaLimitBase] Quota requests payload.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def begin_update(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:nil)
      response = begin_update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update the service limits (quota) of a resource to requested value.
    # Steps:
    #
    # 1. Make the Get request to get the quota information for specific resource.
    #
    # 2. To increase the quota, update the limit field in the response from Get
    # request to new value.
    #
    # 3. Submit the JSON to the quota request API to update the quota.
    # The Update quota request may be constructed as follows. The PATCH operation
    # can be used to update the quota.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param create_quota_request [CurrentQuotaLimitBase] Quota requests payload.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_update_with_http_info(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:nil)
      begin_update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:custom_headers).value!
    end

    #
    # Update the service limits (quota) of a resource to requested value.
    # Steps:
    #
    # 1. Make the Get request to get the quota information for specific resource.
    #
    # 2. To increase the quota, update the limit field in the response from Get
    # request to new value.
    #
    # 3. Submit the JSON to the quota request API to update the quota.
    # The Update quota request may be constructed as follows. The PATCH operation
    # can be used to update the quota.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param resource_name [String] The resource name for a resource provider, such
    # as SKU name for Microsoft.Compute, Sku or TotalLowPriorityCores for
    # Microsoft.MachineLearningServices
    # @param create_quota_request [CurrentQuotaLimitBase] Quota requests payload.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_update_async(subscription_id, provider_id, location, resource_name, create_quota_request, custom_headers:nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'provider_id is nil' if provider_id.nil?
      fail ArgumentError, 'location is nil' if location.nil?
      fail ArgumentError, 'resource_name is nil' if resource_name.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'create_quota_request is nil' if create_quota_request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Reservations::Mgmt::V2019_07_19_preview::Models::CurrentQuotaLimitBase.mapper()
      request_content = @client.serialize(request_mapper,  create_quota_request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'subscriptions/{subscriptionId}/providers/Microsoft.Capacity/resourceProviders/{providerId}/locations/{location}/serviceLimits/{resourceName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'providerId' => provider_id,'location' => location,'resourceName' => resource_name},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2019_07_19_preview::Models::QuotaRequestOneResourceSubmitResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2019_07_19_preview::Models::QuotaRequestSubmitResponse201.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get a list of current service limits (quota) and usages of all the resources.
    # The response from List API can be leveraged to submit quota update requests.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [QuotaLimits] operation results.
    #
    def list_next(next_page_link, custom_headers:nil)
      response = list_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get a list of current service limits (quota) and usages of all the resources.
    # The response from List API can be leveraged to submit quota update requests.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers:nil)
      list_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Get a list of current service limits (quota) and usages of all the resources.
    # The response from List API can be leveraged to submit quota update requests.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        result.correlation_request_id = http_response['x-ms-correlation-request-id'] unless http_response['x-ms-correlation-request-id'].nil?
        result.client_request_id = http_response['x-ms-client-request-id'] unless http_response['x-ms-client-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2019_07_19_preview::Models::QuotaLimits.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get a list of current service limits (quota) and usages of all the resources.
    # The response from List API can be leveraged to submit quota update requests.
    #
    # @param subscription_id [String] Azure subscription id.
    # @param provider_id [String] Azure resource provider id.
    # @param location [String] Azure region.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [QuotaLimits] which provide lazy access to pages of the response.
    #
    def list_as_lazy(subscription_id, provider_id, location, custom_headers:nil)
      response = list_async(subscription_id, provider_id, location, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
