# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::Reservations::Mgmt::V2017_11_01
  #
  # This API describe Azure Reservation
  #
  class Reservation
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Reservation class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [ReservationsManagementClient] reference to the ReservationsManagementClient
    attr_reader :client

    #
    # Split the `Reservation`.
    #
    # Split a `Reservation` into two `Reservation`s with specified quantity
    # distribution.
    #
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param body [SplitRequest] Information needed to Split a reservation item
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def split(reservation_order_id, body, custom_headers:nil)
      response = split_async(reservation_order_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param body [SplitRequest] Information needed to Split a reservation item
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def split_async(reservation_order_id, body, custom_headers:nil)
      # Send request
      promise = begin_split_async(reservation_order_id, body, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = {
            client_side_validation: true,
            required: false,
            serialized_name: 'parsed_response',
            type: {
              name: 'Sequence',
              element: {
                  client_side_validation: true,
                  required: false,
                  serialized_name: 'ReservationResponseElementType',
                  type: {
                    name: 'Composite',
                    class_name: 'ReservationResponse'
                  }
              }
            }
          }
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Merges two `Reservation`s.
    #
    # Merge the specified `Reservation`s into a new `Reservation`. The two
    # `Reservation`s being merged must have same properties.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param body [MergeRequest] Information needed for commercial request for a
    # reservation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def merge(reservation_order_id, body, custom_headers:nil)
      response = merge_async(reservation_order_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param body [MergeRequest] Information needed for commercial request for a
    # reservation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def merge_async(reservation_order_id, body, custom_headers:nil)
      # Send request
      promise = begin_merge_async(reservation_order_id, body, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = {
            client_side_validation: true,
            required: false,
            serialized_name: 'parsed_response',
            type: {
              name: 'Sequence',
              element: {
                  client_side_validation: true,
                  required: false,
                  serialized_name: 'ReservationResponseElementType',
                  type: {
                    name: 'Composite',
                    class_name: 'ReservationResponse'
                  }
              }
            }
          }
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Get `Reservation`s in a given reservation Order
    #
    # List `Reservation`s within a single `ReservationOrder`.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<ReservationResponse>] operation results.
    #
    def list(reservation_order_id, custom_headers:nil)
      first_page = list_as_lazy(reservation_order_id, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Get `Reservation`s in a given reservation Order
    #
    # List `Reservation`s within a single `ReservationOrder`.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_with_http_info(reservation_order_id, custom_headers:nil)
      list_async(reservation_order_id, custom_headers:custom_headers).value!
    end

    #
    # Get `Reservation`s in a given reservation Order
    #
    # List `Reservation`s within a single `ReservationOrder`.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_async(reservation_order_id, custom_headers:nil)
      fail ArgumentError, 'reservation_order_id is nil' if reservation_order_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'reservationOrderId' => reservation_order_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2017_11_01::Models::ReservationList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get `Reservation` details.
    #
    # Get specific `Reservation` details.
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ReservationResponse] operation results.
    #
    def get(reservation_id, reservation_order_id, custom_headers:nil)
      response = get_async(reservation_id, reservation_order_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get `Reservation` details.
    #
    # Get specific `Reservation` details.
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_with_http_info(reservation_id, reservation_order_id, custom_headers:nil)
      get_async(reservation_id, reservation_order_id, custom_headers:custom_headers).value!
    end

    #
    # Get `Reservation` details.
    #
    # Get specific `Reservation` details.
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(reservation_id, reservation_order_id, custom_headers:nil)
      fail ArgumentError, 'reservation_id is nil' if reservation_id.nil?
      fail ArgumentError, 'reservation_order_id is nil' if reservation_order_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'reservationId' => reservation_id,'reservationOrderId' => reservation_order_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2017_11_01::Models::ReservationResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates a `Reservation`.
    #
    # Updates the applied scopes of the `Reservation`.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param parameters [Patch] Information needed to patch a reservation item
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ReservationResponse] operation results.
    #
    def update(reservation_order_id, reservation_id, parameters, custom_headers:nil)
      response = update_async(reservation_order_id, reservation_id, parameters, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param parameters [Patch] Information needed to patch a reservation item
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def update_async(reservation_order_id, reservation_id, parameters, custom_headers:nil)
      # Send request
      promise = begin_update_async(reservation_order_id, reservation_id, parameters, custom_headers:custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = Azure::Reservations::Mgmt::V2017_11_01::Models::ReservationResponse.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Get `Reservation` revisions.
    #
    # List of all the revisions for the `Reservation`.
    #
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<ReservationResponse>] operation results.
    #
    def list_revisions(reservation_id, reservation_order_id, custom_headers:nil)
      first_page = list_revisions_as_lazy(reservation_id, reservation_order_id, custom_headers:custom_headers)
      first_page.get_all_items
    end

    #
    # Get `Reservation` revisions.
    #
    # List of all the revisions for the `Reservation`.
    #
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_revisions_with_http_info(reservation_id, reservation_order_id, custom_headers:nil)
      list_revisions_async(reservation_id, reservation_order_id, custom_headers:custom_headers).value!
    end

    #
    # Get `Reservation` revisions.
    #
    # List of all the revisions for the `Reservation`.
    #
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_revisions_async(reservation_id, reservation_order_id, custom_headers:nil)
      fail ArgumentError, 'reservation_id is nil' if reservation_id.nil?
      fail ArgumentError, 'reservation_order_id is nil' if reservation_order_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/revisions'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'reservationId' => reservation_id,'reservationOrderId' => reservation_order_id},
          query_params: {'api-version' => @client.api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2017_11_01::Models::ReservationList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Split the `Reservation`.
    #
    # Split a `Reservation` into two `Reservation`s with specified quantity
    # distribution.
    #
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param body [SplitRequest] Information needed to Split a reservation item
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def begin_split(reservation_order_id, body, custom_headers:nil)
      response = begin_split_async(reservation_order_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Split the `Reservation`.
    #
    # Split a `Reservation` into two `Reservation`s with specified quantity
    # distribution.
    #
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param body [SplitRequest] Information needed to Split a reservation item
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_split_with_http_info(reservation_order_id, body, custom_headers:nil)
      begin_split_async(reservation_order_id, body, custom_headers:custom_headers).value!
    end

    #
    # Split the `Reservation`.
    #
    # Split a `Reservation` into two `Reservation`s with specified quantity
    # distribution.
    #
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param body [SplitRequest] Information needed to Split a reservation item
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_split_async(reservation_order_id, body, custom_headers:nil)
      fail ArgumentError, 'reservation_order_id is nil' if reservation_order_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Reservations::Mgmt::V2017_11_01::Models::SplitRequest.mapper()
      request_content = @client.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/split'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'reservationOrderId' => reservation_order_id},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'ReservationResponseElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'ReservationResponse'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Merges two `Reservation`s.
    #
    # Merge the specified `Reservation`s into a new `Reservation`. The two
    # `Reservation`s being merged must have same properties.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param body [MergeRequest] Information needed for commercial request for a
    # reservation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def begin_merge(reservation_order_id, body, custom_headers:nil)
      response = begin_merge_async(reservation_order_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Merges two `Reservation`s.
    #
    # Merge the specified `Reservation`s into a new `Reservation`. The two
    # `Reservation`s being merged must have same properties.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param body [MergeRequest] Information needed for commercial request for a
    # reservation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_merge_with_http_info(reservation_order_id, body, custom_headers:nil)
      begin_merge_async(reservation_order_id, body, custom_headers:custom_headers).value!
    end

    #
    # Merges two `Reservation`s.
    #
    # Merge the specified `Reservation`s into a new `Reservation`. The two
    # `Reservation`s being merged must have same properties.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param body [MergeRequest] Information needed for commercial request for a
    # reservation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_merge_async(reservation_order_id, body, custom_headers:nil)
      fail ArgumentError, 'reservation_order_id is nil' if reservation_order_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Reservations::Mgmt::V2017_11_01::Models::MergeRequest.mapper()
      request_content = @client.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/merge'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'reservationOrderId' => reservation_order_id},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'ReservationResponseElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'ReservationResponse'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates a `Reservation`.
    #
    # Updates the applied scopes of the `Reservation`.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param parameters [Patch] Information needed to patch a reservation item
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ReservationResponse] operation results.
    #
    def begin_update(reservation_order_id, reservation_id, parameters, custom_headers:nil)
      response = begin_update_async(reservation_order_id, reservation_id, parameters, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates a `Reservation`.
    #
    # Updates the applied scopes of the `Reservation`.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param parameters [Patch] Information needed to patch a reservation item
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_update_with_http_info(reservation_order_id, reservation_id, parameters, custom_headers:nil)
      begin_update_async(reservation_order_id, reservation_id, parameters, custom_headers:custom_headers).value!
    end

    #
    # Updates a `Reservation`.
    #
    # Updates the applied scopes of the `Reservation`.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param parameters [Patch] Information needed to patch a reservation item
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_update_async(reservation_order_id, reservation_id, parameters, custom_headers:nil)
      fail ArgumentError, 'reservation_order_id is nil' if reservation_order_id.nil?
      fail ArgumentError, 'reservation_id is nil' if reservation_id.nil?
      fail ArgumentError, '@client.api_version is nil' if @client.api_version.nil?
      fail ArgumentError, 'parameters is nil' if parameters.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      # Serialize Request
      request_mapper = Azure::Reservations::Mgmt::V2017_11_01::Models::Patch.mapper()
      request_content = @client.serialize(request_mapper,  parameters)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'reservationOrderId' => reservation_order_id,'reservationId' => reservation_id},
          query_params: {'api-version' => @client.api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2017_11_01::Models::ReservationResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get `Reservation`s in a given reservation Order
    #
    # List `Reservation`s within a single `ReservationOrder`.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ReservationList] operation results.
    #
    def list_next(next_page_link, custom_headers:nil)
      response = list_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get `Reservation`s in a given reservation Order
    #
    # List `Reservation`s within a single `ReservationOrder`.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_next_with_http_info(next_page_link, custom_headers:nil)
      list_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Get `Reservation`s in a given reservation Order
    #
    # List `Reservation`s within a single `ReservationOrder`.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2017_11_01::Models::ReservationList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get `Reservation` revisions.
    #
    # List of all the revisions for the `Reservation`.
    #
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ReservationList] operation results.
    #
    def list_revisions_next(next_page_link, custom_headers:nil)
      response = list_revisions_next_async(next_page_link, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get `Reservation` revisions.
    #
    # List of all the revisions for the `Reservation`.
    #
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def list_revisions_next_with_http_info(next_page_link, custom_headers:nil)
      list_revisions_next_async(next_page_link, custom_headers:custom_headers).value!
    end

    #
    # Get `Reservation` revisions.
    #
    # List of all the revisions for the `Reservation`.
    #
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_revisions_next_async(next_page_link, custom_headers:nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Azure::Reservations::Mgmt::V2017_11_01::Models::ReservationList.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get `Reservation`s in a given reservation Order
    #
    # List `Reservation`s within a single `ReservationOrder`.
    #
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ReservationList] which provide lazy access to pages of the response.
    #
    def list_as_lazy(reservation_order_id, custom_headers:nil)
      response = list_async(reservation_order_id, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

    #
    # Get `Reservation` revisions.
    #
    # List of all the revisions for the `Reservation`.
    #
    #
    # @param reservation_id [String] Id of the Reservation Item
    # @param reservation_order_id [String] Order Id of the reservation
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ReservationList] which provide lazy access to pages of the response.
    #
    def list_revisions_as_lazy(reservation_id, reservation_order_id, custom_headers:nil)
      response = list_revisions_async(reservation_id, reservation_order_id, custom_headers:custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          list_revisions_next_async(next_page_link, custom_headers:custom_headers)
        end
        page
      end
    end

  end
end
